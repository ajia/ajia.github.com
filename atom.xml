<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Ajia's Blog]]></title>
  <link href="http://ajia.github.com/atom.xml" rel="self"/>
  <link href="http://ajia.github.com/"/>
  <updated>2013-08-21T16:49:21+08:00</updated>
  <id>http://ajia.github.com/</id>
  <author>
    <name><![CDATA[Ajia]]></name>
    <email><![CDATA[DerekLunt@163.com]]></email>
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[RethinkDB 创始人总结的 57 条创业经验]]></title>
    <link href="http://ajia.github.com/blog/2013/08/19/rethinkdb-chuang-shi-ren-zong-jie-de-57-tiao-chuang-ye-jing-yan/"/>
    <updated>2013-08-19T15:51:00+08:00</updated>
    <id>http://ajia.github.com/blog/2013/08/19/rethinkdb-chuang-shi-ren-zong-jie-de-57-tiao-chuang-ye-jing-yan</id>
    <content type="html"><![CDATA[<p>总部位于旧金山的云计算数据库服务公司RethinkDB创始人斯拉瓦·阿克麦切特（Slava Akhmechet）日前发表文章，总结了57条创业经验，其中涉及团队、融资、市场、产品、营销、销售、产品开发、公司管理、个人状态等9个方面。</p>

<!-- more -->


<p>以下是阿克麦切特总结的57条创业经验：</p>

<p>那些才华横溢、经验丰富的人们已经写过不少创业经验，我想要再添加一些内容。我用过去四年的艰辛总结出了这些经验。如果你打算创业，希望你的路平坦一些。</p>

<h1>团队建设</h1>

<ul>
<li><p>1、如果你的2到4人团队无法在6个月到1年内实现盈利，那么肯定出问题了。除非是你自己选择不盈利，但这必须是你的选择，而非市场原因。</p></li>
<li><p>2、在创始人中间平均分配股票。</p></li>
<li><p>3、一直有一个期权行使计划。</p></li>
<li><p>4、依据一致意见做出大多数决定，但唯一一位CEO拥有最终决定权。从第一天就明确如此。</p></li>
<li><p>5、你作为CEO的权威是赢得的，因为你是从无到有。如果赢得胜利，这种权威会随之增长，反之则会下降。不要试图滥用你没有赢得的权威。</p></li>
<li><p>6、士气是真实存在的，而且自身能够永久存在。如果长时间没有胜利，你的投资者、员工、家人，以及你自己都会失去信心。努力工作，不要陷入这种境地。</p></li>
<li><p>7、谨慎选择最初团队成员。所有人都应当开心共事，至少拥有一项企业相关的技能，效率极高且务实。所有人都应当有产品意识，在产品与公司方面拥有共同的理念。</p></li>
<li><p>8、你工作采用的标准，就是你所接受的标准。选择一小部分对你最重要的、没有谈判余地的规定，并毫不松懈地予以执行。</p></li>
<li><p>9、解雇那些难以共事、没有效率、不可靠、没有产品意识，以及不务实的人。迅速解雇。</p></li>
<li><p>10、有些磨擦是好事，但磨擦过多很要命。解雇那些制造太多磨擦的人。好工作＋坏习惯=你被解雇了。</p></li>
</ul>


<h1>资金筹集</h1>

<ul>
<li><p>11、如果在某一轮融资中你不得不放弃公司15%的控制权，那么公司肯定在某个方面出了问题。这是可以挽救的，但不是理想做法。</p></li>
<li><p>12、如果你还没有赢得人们的尊重，那么依靠吸引力融资要比依靠讲故事融资容易得多。如果你不得不依靠讲故事融资，但却没有自己的声誉，那么肯定有问题。</p></li>
<li><p>13、将自己的融资谈判当作一个至少可成活的产品，推出去之后，每次见面都重复。</p></li>
<li><p>14、大多数投资者的建议有助于公司优化和发展，虚心听取。</p></li>
<li><p>15、大多数投资者的建议无助于开发一款神奇的产品，没有人能帮你开发神奇产品，这是你自己的事情。</p></li>
<li><p>16、不要留恋于融资过程。事成之后，赶紧前进。</p></li>
</ul>


<h1>市场方面</h1>

<ul>
<li><p>17、最好的产品一定不是在真空中产生的，它们成功的原因在于它在某个领域胜出了其他所有产品。找到自己的这个领域，做最好的那个。如果没有这样一个领域，那肯定有问题。</p></li>
<li><p>18、投入到一个既能立即见效，又拥有巨大发展潜力的问题上。如果它无助于改善大量人群的生活条件，那就不值得去做。例如，谷歌(微博)填补了人们日常生活中一个巨大的空白，令数十亿人受益。它改变了人们的行为方式和认知周围世界的方式。努力去做这款拥有如此规模的产品。</p></li>
<li><p>19、刚开始树立一个正确的理念。从经验来看，这个时候你只能依此而动。</p></li>
<li><p>20、要知道，市场瞬息万变，多个团队会几乎同时想出同一个有价值的理念。</p></li>
<li><p>21、接受新观念，因为这是其他社交或技术改变促成的。尽早步入正轨，但确保技术已经足以使产品变得更好。</p></li>
<li><p>22、如果有一个过去未奏效的理念，而且没有社交或技术变革使其现在变得可行有效，那么认定它会失败。（这是又一个市场假设理论，如果一个理念可以取得成果，那么它已经实施了。只有情况发生变化之后，它才值得再次尝试。）</p></li>
<li><p>23、告诉市场，不接受你的产品意味着失去战机。坚持自己的理想和信念，但尊重客观趋势。如果你坚信世界需要诗歌，那么卖掉你的嘻哈歌曲，保留诗歌集。</p></li>
</ul>


<h1>产品方面</h1>

<ul>
<li><p>24、产品观念意味着一切，尽快掌握这种观念。擅长产品技术并不意味着擅长产品管理。</p></li>
<li><p>25、不要生产已经存在的东西。消费者不会因为它是你的就会购买。</p></li>
<li><p>26、确保自己知道用户别无选择而转向你的产品的原因，以及他们不会转回其他产品的原因。不要太相信自己，尽可能检验自己的假设。</p></li>
<li><p>27、对每个产品功能提两个问题。人们会不会因为这个功能而去购买产品？人们会不会因为缺少这个功能而不去购买？如果答不出后面这个问题，就答不出前面的问题。如果两个问题的答案都是否定的，那就不要去开发这个功能。</p></li>
<li><p>28、生产一款尽管有不足，人们也愿意买的东西，而不要生产没有不足之处于是人们应当去买的东西。前者令人愉悦并支付购买，后者无法令人愉悦。</p></li>
<li><p>29、注意“鸡”与“蛋”的产品关系，确保自己的产品能够立即使用。</p></li>
<li><p>30、注意那些可能购买你的产品的人们，以及那些只发评论的人们之间的区别。多关注前者，忽略后者。</p></li>
</ul>


<h1>营销方面</h1>

<ul>
<li><p>31、产品至上。如果人们喜欢你的产品，最小规模的发布会也会引起关注。如果人们不喜欢产品，再大的营销也无济于事。</p></li>
<li><p>32、在产品中内置营销。如果可能的话，制造YouTube效应（人们不断地在你的平台上发布有趣的内容）和Facebook效应（如果用户使用了产品，他们的朋友也会使用）。</p></li>
<li><p>33、看看电影《寿司之神》，以这种方式做营销。选择一小部分任务，持续开展工作，每天都有新进步。</p></li>
<li><p>34、定期对效率进行再评估。撤消无效做法，加倍有效做法。</p></li>
<li><p>35、不要猜，要去考察。</p></li>
<li><p>36、面向你的用户去营销。吸引那些不会购买你产品的人们的注意力，实际上就是浪费时间与金钱。</p></li>
<li><p>37、如果你的竞争对手不说反话，你就不要去说。例如，你的竞争对手说不出你的产品很慢，那么赞扬自己产品速度快就是无效营销。另一方面，你的竞争对手称自己的软件是面向某一些程序员的，那么你就说你的软件是面向另一部分程序员的，这就是不错的营销。苹果可以不遵守这个惯例，但你不能。</p></li>
<li><p>38、不要对你的用户或竞争对手使用骄傲自大的语气，这不助于你销售产品，反而会破坏你的良好声誉。</p></li>
<li><p>39、不要对批评不屑一顾。相反，用批评来改进自己的产品。如果你认真采纳其批评建议，那么最严厉的批评者往往会成为最强有力的支持者。</p></li>
</ul>


<h1>销售方面</h1>

<ul>
<li><p>40、销售能改变一切。如果产品销售出色，那么你即便搞砸了其他事情，也是可以弥补的。</p></li>
<li><p>41、产品至上。对于一款所有人都想要的产品，销售起来很容易，回报也很丰厚，但销售一款没有人需要的产品则是一个令人痛苦的数字游戏。</p></li>
<li><p>42、如果产品介于两个极端之间，那么不懈地去追求这个数字游戏吧。即便销售不好，你也会获得宝贵的经验。</p></li>
<li><p>43、致力于提高效率。在一位不可能购买你产品的用户身上花费时间，无异于什么工作都没有干。</p></li>
<li><p>44、引进比输出更容易。如果可能的话，生产一款客户向你表达了需求，并且愿意为之付费的产品。</p></li>
</ul>


<h1>产品开发</h1>

<ul>
<li><p>45、开发速度很重要。</p></li>
<li><p>46、不要复杂，产品越简单，你出货的可能性越大，你迅速修复问题的可能性也就越大。</p></li>
<li><p>47、选择一种付出20%就能获得80%回报的执行方式。</p></li>
<li><p>48、只要有可能，就选择现货定制的零部件。</p></li>
<li><p>49、采用快速的开发速率，确保这个速率不会超过一到两周。</p></li>
<li><p>50、关注长远项目。如果无法保持速率，就不要去做开发。</p></li>
<li><p>51、关注长期的修改。如果无法在速率中修改，就不要去做。</p></li>
<li><p>52、如果你不得不做不符合产品速率的东西，那么在这个过程中设置尽可能多的结构与评估轮次。</p></li>
<li><p>53、在错误的东西上工作一个月，相当于一个月没有上班。</p></li>
</ul>


<h1>公司管理</h1>

<ul>
<li><p>54、不要花太多时间来选择办公楼、会计、文员、门卫、家具、托管工具等。相信条件已经够好，不要犹豫地前进。</p></li>
<li><p>55、花时间找一位优秀的、不是很昂贵的律师。这很有必要。</p></li>
</ul>


<h1>个人状态</h1>

<ul>
<li><p>56、尽自己最大的努力，给你的创业公司贴上自己的标签（你可能会失败，但要尝度）。每天都尽全力工作，然后休息。这样在尘埃落定之后，你会因自己做过的选择而感到骄傲，无论结果如何。</p></li>
<li><p>57、每隔一段时间，就离开一次。去徒步旅行，看望另一座城市的家人，跳舞，玩象棋，打网球，任何事情。你会让你更有效率，让你周围的人们感觉快乐。</p></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[ruby中测试驱动开发]]></title>
    <link href="http://ajia.github.com/blog/2013/07/21/rubyzhong-ce-shi-qu-dong-kai-fa/"/>
    <updated>2013-07-21T18:03:00+08:00</updated>
    <id>http://ajia.github.com/blog/2013/07/21/rubyzhong-ce-shi-qu-dong-kai-fa</id>
    <content type="html"><![CDATA[
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[用Git做版本控制]]></title>
    <link href="http://ajia.github.com/blog/2013/07/19/yong-gitzuo-ban-ben-kong-zhi/"/>
    <updated>2013-07-19T15:15:00+08:00</updated>
    <id>http://ajia.github.com/blog/2013/07/19/yong-gitzuo-ban-ben-kong-zhi</id>
    <content type="html"><![CDATA[<p>版本控制系统可以跟踪项目代码的变化，便于和他人协作，如果出现问题（例如不小心删除了文件）还可以回滚到以前的版本。每个软件开发者都应该学习使用版本控制系统。</p>

<p>版本控制工具很多，Rails 社区更多的会使用 Git，它最初是由 Linus Torvalds 开发用来存储 Linux 内核代码的。Git 的知识很多，这里我们只会介绍一些简单的内容，网络上有很多免费的资料可以阅读，我特别推荐 Scott Chacon 的《Pro Git》（Apress 2009 年出版。<a href="http://git-scm.com/book/zh">中文版</a>）。之所以推荐你将代码放到 Git 这个版本控制系统中是因为这几乎是 Rails 社区的普遍做法，还因为这样做更利于代码的分享，也便于程序的部署。</p>

<!-- more -->


<h3>安装与设置</h3>

<p>第一次运行的设置</p>

<p>安装Git后，你应该做一些只需做一次的事情：系统设置——这样的设置在每台电脑上只需做一次：</p>

<pre><code>$ git config --global user.name "Your Name"
$ git config --global user.email your.email@example.com
</code></pre>

<p>我还想用co代替字数较多的checkout命令，那么要做如下设置：</p>

<pre><code>$ git config --global alias.co checkout
</code></pre>

<p>最后，你还可以设置编辑 Git 提交信息时使用的编辑器。如果你使用的是图形界面的编辑器，例如 Sublime Text、TextMate、gVim 或 MacVim，要加上一个旗标确保编辑器会在终端中保持状态而不是立马结束命令：</p>

<pre><code>$ git config --global core.editor "subl -w"
</code></pre>

<h3>设置第一个仓库</h3>

<p>下面的步骤你每次新建一个仓库时都要执行。首先进入刚创建的应用程序的根目录，然后初始化一个新仓库：</p>

<pre><code>$ git init 
Initialized empty Git repository in /Users/mhartl/rails_projects/first_app/.git/
</code></pre>

<h3>添加文件并提交</h3>

<p>最后我们要把 Rails 项目中的文件添加到 Git 中，然后提交结果。你可以使用下述命令添加所有的文件（除了 .gitignore 中忽略的文件）：</p>

<pre><code>$ git add .
</code></pre>

<p>这里的点号（.）代表当前目录，Git 会自动的将所有的文件，包括子目录中的文件添加到 Git 中。这个命令会将项目的文件添加到暂存区域（staging area），这个区域包含未提交的改动。你可以使用 status 命令查看暂存区域有哪些文件</p>

<pre><code>$ git status
# On branch master
#
# Initial commit
#
# Changes to be committed:
#   (use "git rm --cached &lt;file&gt;..." to unstage)
#
#       new file:   README.rdoc
#       new file:   Rakefile
.
.
.
（显示的结果很长，所以我用点号代替了。）
</code></pre>

<p>用 commit 命令告诉 Git 你想保存这些改动：</p>

<pre><code>$ git commit -m "Initial commit"
[master (root-commit) df0a62f] Initial commit
42 files changed, 8461 insertions(+), 0 deletions(-)
create mode 100644 README.rdoc
create mode 100644 Rakefile
.
.
.
</code></pre>

<p>参数 -m 允许你为这次提交添加一个信息，如果没有提供 -m，Git 会打开你在前面设置的编辑器，你需要在编辑器中填写信息。</p>

<p>有一点很重要，Git 提交是针对本地的，数据只存在执行提交的电脑中。这一点和另一个很著名的开源版本控制系统 SVN 不同，SVN 提交时会更新远程仓库。git 将 SVN 中的提交分成了两部分：本地保存的更改（git commit）和将更改推送到远程仓库（git push）。</p>

<p>顺便说一下，你可以使用 log 命令查看提交的历史信息：</p>

<pre><code>$git log
commit df0a62f3f091e53ffa799309b3e32c27b0b38eb4
Author: Michael Hartl &lt;michael@michaelhartl.com&gt;
Date:   Thu Oct 15 11:36:21 2009 -0700
Initial commit
</code></pre>

<h3>Git为我们带来了什么好处？</h3>

<p>现在你可能还不是完全清楚将源码纳入版本控制系统有什么好处，那我就举个例子来说明一下吧。（后续章节中还有很多例子）假设你不小心做了一些改动，比如说删除了 app/controllers/ 文件夹：</p>

<pre><code>$ ls app/controllers/
application_controller.rb
$ rm -rf app/controllers/
$ ls app/controllers/
ls: app/controllers/: No such file or directory
</code></pre>

<p>我们用 Unix 中的 ls 命令列出 app/controllers/ 文件夹中的内容，用 rm 命令删除这个文件夹。旗标 -rf 的意思是“强制递归”，无需得到确认就递归的删除所有文件、文件夹、子文件夹等。</p>

<p>查看一下状态看看发生了什么：</p>

<pre><code>$ git status
# On branch master
# Changed but not updated:
#   (use "git add/rm &lt;file&gt;..." to update what will be committed)
#   (use "git checkout -- &lt;file&gt;..." to discard changes in working directory)
#
#       deleted:    app/controllers/application_controller.rb
#
no changes added to commit (use "git add" and/or "git commit -a")
</code></pre>

<p>可以看到一个文件被删除了，但是这个改动只发生在工作区，还没有提交。这样我们就可以使用 checkout 命令切换到前一个提交记录来撤销这次改动（其中旗标 -f 意思是覆盖当前的改动）：</p>

<pre><code>$ git checkout -f
$ git status
# On branch master
nothing to commit (working directory clean)
$ ls app/controllers/
application_controller.rb
</code></pre>

<p>删除的文件夹和文件又回来了，这下放心了！</p>

<h3>分支，编辑，提交，合并</h3>

<h4>分支</h4>

<p>Git 中的分支功能很强大，分支是对仓库的复制，在分支中所做的改动（或许是实验性质的）不会影响父级文件。大多数情况下，父级仓库是 master 分支。我们可以使用 checkout 命令，并指定 -b 旗标创建一个新分支：</p>

<pre><code>$ git checkout -b modify-README
Switched to a new branch 'modify-README'
$ git branch
master
* modify-README
</code></pre>

<p>第二个命令， git branch, 会将本地所有的分支列出来，分支名前面的星号（*）指明当前所在的分支。注意，git checkout -b modify-README 会创建一个新分支，然后切换到这个分支，modify-README 前面的星号证明了这一点。</p>

<p>分支的唯一价值是在多个开发人员协同开发一个项目时使开发的过程更明了，不过对只有一个开发者的项目（比如本教程）也有用。一般而言，主分支是和从分支隔离开的，所以即便我们搞砸了也只需切换回到主分支并删除从分支来丢掉改动。在本节末尾我们会看到怎么做。</p>

<p>顺便说一下，对于较小的改动我一般不会动用新分支，这里是对好的习惯做一个演示。</p>

<h4>编辑</h4>

<p>创建了从分支后，我们要编辑文件让其更好的描述我们的项目。较之默认的 RDoc 格式，我更喜欢 Markdown 标记语言，如果文件扩展名是 .md，GitHub 会自动为你排版。首先我们使用 Unix 命令 mv（移动，move）的 Git 版本来修改文件名，然后写入代码 1.8 所示的内容：</p>

<pre><code>$ git mv README.rdoc README.md
$ subl README.md
</code></pre>

<p>代码 1.8 新的 README 文件，README.md</p>

<pre><code># Ruby on Rails Tutorial: first application
This is the first application for
[*Ruby on Rails Tutorial: Learn Rails by Example*](http://railstutorial.org/)
by [Michael Hartl](http://michaelhartl.com/).
</code></pre>

<h4>提交</h4>

<p>编辑后，查看一下该分支的状态：</p>

<pre><code>$ git status
# On branch modify-README
# Changes to be committed:
#   (use "git reset HEAD &lt;file&gt;..." to unstage)
#
#       renamed:    README.rdoc -&gt; README.md
#
# Changed but not updated:
#   (use "git add &lt;file&gt;..." to update what will be committed)
#   (use "git checkout -- &lt;file&gt;..." to discard changes in working directory)
#
#       modified:   README.md
#
</code></pre>

<p>这时，我们可以使用git add .来提交，但是 Git 提供了参数 -a，它的意思是将现有文件的所有改动（包括使用 git mv 创建的文件，对 Git 来说这并不是新的文件）添加进来：</p>

<pre><code>$ git commit -a -m "Improve the README file"
2 files changed, 5 insertions(+), 243 deletions(-)
delete mode 100644 README.rdoc
create mode 100644 README.md
</code></pre>

<p>千万别误用了 -a 。如果在上次提交之后你向项目添加了新文件的话，首先你要使用 git add 告诉 Git 你添加的文件。</p>

<h4>合并</h4>

<p>我们已经修改完了，现在可以将其合并到主分支了：</p>

<pre><code>$ git checkout master
Switched to branch 'master'
$ git merge modify-README
Updating 34f06b7..2c92bef
Fast forward
README.rdoc     |  243 --------------------------------------------------
README.md       |    5 +
2 files changed, 5 insertions(+), 243 deletions(-)
delete mode 100644 README.rdoc
create mode 100644 README.md
</code></pre>

<p>合并完后，我们可以清理一下分支了，使用 git branch -d 删除这个从分支：</p>

<pre><code>$ git branch -d modify-README
Deleted branch modify-README (was 2c92bef).
</code></pre>

<p>这一步是可选的，事实上一般我们都会留着这个从分支，这样你就可以在主、从分支之间来回切换，在合适的时候将改动合并到主分支中。</p>

<p>如前面提到的，你可以使用 git branch -D 放弃对从分支所做的修改：</p>

<pre><code># For illustration only; don't do this unless you mess up a branch
$ git checkout -b topic-branch
$ &lt;really screw up the branch&gt;
$ git add .
$ git commit -a -m "Major screw up"
$ git checkout master
$ git branch -D topic-branch
</code></pre>

<p>和参数 -d 不同，即使还未合并 -D 也会删除分支。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[创业12条建议]]></title>
    <link href="http://ajia.github.com/blog/2013/07/19/chuang-ye-jian-yi/"/>
    <updated>2013-07-19T14:46:00+08:00</updated>
    <id>http://ajia.github.com/blog/2013/07/19/chuang-ye-jian-yi</id>
    <content type="html"><![CDATA[<p>本文来自Squawk Messenger的联合创始人及StreetArtSF.com的创始人Chloë Bregman。</p>

<p>这些不是道听途说来的狗屁东西，而是我自己摸索总结出来的点点滴滴。</p>

<!-- more -->


<h2>1. 你的那些所谓的好点子在被执行前，一文不值。</h2>

<p>没人想要签你的合同，没人在乎你那些好主意。你知道吗？在硅谷，任何一名风投或者拥有些人脉的人都从好几打人那里听过相同的点子，其中有一些正在执行过程中。多找人交流，获得回馈，提升你的想法，当然最关键的还是把它变成现实。一个好点子的价值在于执行。Henry Ford 深知这一点：“梦想不付诸实践，就仅仅是幻想。”</p>

<blockquote><blockquote><p>我虽然不是一名风投，但我认识很多硅谷人，连我都可能听你的那些点子听到耳朵都出茧了，更别提那些每年被骚扰 3000 次的风投了。</p></blockquote></blockquote>

<h2>2. 清晰地定义每一名创始人的角色。</h2>

<p>你公司的每一名创始人除了拥有优秀的能力之外，也要确保他们能胜任不同的分工。如果每个人的强项都是相同的领域，那公司的缺陷就会暴露得更明显。你需要那些只想专心做好自己本职工作的人，也需要值得信任的能做好你所布置的任务的人。你也得确保每个人都是有真本事的，除非你是干业务拓展或者销售的，不然的话，你需要的就必须是能对产品做出实际贡献的人员。</p>

<h2>3. 积极推进。</h2>

<p>我认识很多朋友，他们拥有一个看起来有趣的点子，却一直停留在原地，原因是他们碰到了某个瓶颈，于是他们就不再往前了。几个月后，他们眼睁睁看着其他一些拥有相似产品创意的创业公司得到了投资。在我看来，这些后来者们抢得先机，并不是因为他们的产品有多棒，而是他们推进事情更为积极。迎难而上，创造条件，Make it happen. 在你的团队里，最好有一两个人是擅长干这个的。</p>

<h2>4. 尽快推出你的产品，别拖着。</h2>

<p>完美主义害死人。踌躇不前、犹豫不决会让你得不到关于市场和你的产品的宝贵信息。很少有一个科技产品是“已经完成”状态的，如果真的有，那也可能是一次性服务或者已经过时的产品。别等了，赶紧发布，然后再慢慢地反复地打磨。</p>

<ul>
<li>我曾经打造的产品，从第一周就开始进行用户测试。人们口头上说他们想做的，和他们真正会做的是不同的。你需要尽可能快地去观察用户行为，而不是听他们说。</li>
</ul>


<h2>5. 解决问题的能力。</h2>

<p>你不可能全知全能，在运营公司的过程中难免会碰到一些未知的问题。白手起家创建一个公司，最核心的能力就是发现问题并能快速地解决它们。你就好比是“幸存者”中的参赛者尝试在岛上生存那样，需要始终足智多谋来克服困难。想要有效地解决问题，你需要诚实并开放地面对批评。这也是一个实践建设性批评的艺术的好机会。</p>

<h2>6. 清醒认识自己，对自己绝对诚实。</h2>

<p>白手起家创建公司不是一件容易的事情。充分理解所处的现状、过程中出现的瑕疵、潮起潮落和你身边的战友们。想要成功，你必须要对自己的优缺点保持绝对的、“无情的”诚实。它们（优缺点）会往好的方向也会往坏的方向发展，所以你对它们的认识越是清楚，你就越容易成功。</p>

<h2>7. 拥有愿景。</h2>

<p>人们会向你问起你与竞争者 x、y 或者 z 的差异，而你是唯一了解自己公司前进方向的人。如果你仅仅是一个跟风者，你永远不会明白有些东西是否行得通，你也不会有一个明确的方向。务实一点，明白自己的方向。</p>

<h2>8. 虚心向别人征求意见。</h2>

<p>你不可能会知道所有问题的答案，虚心向你所尊重的朋友们征求他们的意见。你并不孤独，人们会力所能及地帮助你。广义上来讲，我们所做的一切都是在帮助人类进步和发展，不是吗？我向你保证，这世界上总有一个人是知道怎么解决你面临的这个问题的。要知道，你面临的这些难题并不是你想象的那么独一无二。不过话虽如此，意见也只是意见，不能直接当做问题的解决方案。</p>

<h2>9. 你所参与的是马拉松，而不是短跑。</h2>

<p>不断地努力工作，同时也要注意持续性。公司并不是一朝一夕建立的，如果你经常通宵工作，最后累倒了，那最终不会有好结果。</p>

<h2>10. 坚持不懈。</h2>

<p>创业公司需要时间。事情永远不像它们看起来的那么好，也不像它们看起来的那么差。坚持做下去吧，不要停下来。</p>

<h2>11.享受整个过程。</h2>

<p>在我写这篇东西的时候，Miley Cyrus 的那首 The Climb 跃入我的脑海，又有多少创业公司能够做到 Enjoy 他们的创业过程呢？创业的确是为了有朝一日胜利登顶的结果，但同时也是为了整个攀爬的过程。媒体整日喧嚣着一夜暴富的幻梦，但我要提醒你，取得胜利，通常需要年复一年的辛勤工作。</p>

<h2>12. 为胜利而战。</h2>

<p>如果你不全身心投入游戏，你根本没有机会获胜。这世上根本就没有一个由兼职者组成的公司，能够突然膨胀成为一个十亿级别的传奇的。（没错，你可以在大学里编出一个如 SnapChat 的热门应用，但一旦它火起来了，你也就必须全身心投入了。）</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Guava的使用指南之Cache]]></title>
    <link href="http://ajia.github.com/blog/2013/07/05/guavade-shi-yong-zhi-nan-zhi-cache/"/>
    <updated>2013-07-05T17:42:00+08:00</updated>
    <id>http://ajia.github.com/blog/2013/07/05/guavade-shi-yong-zhi-nan-zhi-cache</id>
    <content type="html"><![CDATA[<h3>创建cache</h3>

<p>可以通过两种方式来创建cache：</p>

<pre><code>cacheLoader

callable callback
</code></pre>

<p>通过这两种方法创建的cache，和通常用map来缓存的做法比，不同在于，这两种方法都实现了一种逻辑——从缓存中取key X的值，如果该值已经缓存过了，则返回缓存中的值，如果没有缓存过，可以通过某个方法来获取这个值。</p>

<p>但不同的在于cacheloader的定义比较宽泛，是针对整个cache定义的，可以认为是统一的根据key值load value的方法。</p>

<p>而callable的方式较为灵活，允许你在get的时候指定。</p>

<p>下面是两种方法的例子:</p>

<p>首先是基于cacheloader的方法</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="nd">@Test</span>
</span><span class='line'><span class="kd">public</span> <span class="kt">void</span> <span class="nf">testCacheBuilder</span><span class="o">()</span> <span class="kd">throws</span> <span class="n">ExecutionException</span> <span class="o">{</span>
</span><span class='line'>  <span class="n">LoadingCache</span><span class="o">&lt;</span><span class="n">String</span><span class="o">,</span> <span class="n">String</span><span class="o">&gt;</span> <span class="n">graphs</span> <span class="o">=</span> <span class="n">CacheBuilder</span><span class="o">.</span><span class="na">newBuilder</span><span class="o">().</span><span class="na">maximumSize</span><span class="o">(</span><span class="mi">1000</span><span class="o">)</span>
</span><span class='line'>            <span class="o">.</span><span class="na">build</span><span class="o">(</span><span class="k">new</span> <span class="n">CacheLoader</span><span class="o">&lt;</span><span class="n">String</span><span class="o">,</span> <span class="n">String</span><span class="o">&gt;()</span> <span class="o">{</span>
</span><span class='line'>                <span class="kd">public</span> <span class="n">String</span> <span class="nf">load</span><span class="o">(</span><span class="n">String</span> <span class="n">key</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>                    <span class="c1">// 这里是key根据实际去取值的方法，例如根据这个key去数据库或者properties文件中取值</span>
</span><span class='line'>                    <span class="n">ApplicationContext</span> <span class="n">context</span> <span class="o">=</span> <span class="k">new</span> <span class="n">FileSystemXmlApplicationContext</span><span class="o">(</span><span class="s">&quot;E:/WorkDir/struts2practice/GuavaTest/WebRoot/WEB-INF/xml/springConfig.xml&quot;</span><span class="o">);</span>
</span><span class='line'>                    <span class="n">JdbcCustomerDAO</span> <span class="n">aJdbcCustomerDAO</span> <span class="o">=</span> <span class="n">context</span><span class="o">.</span><span class="na">getBean</span><span class="o">(</span><span class="n">JdbcCustomerDAO</span><span class="o">.</span><span class="na">class</span><span class="o">);</span>
</span><span class='line'>                    <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">&quot;load method has been invoked&quot;</span><span class="o">);</span>
</span><span class='line'>                    <span class="k">return</span> <span class="n">aJdbcCustomerDAO</span><span class="o">.</span><span class="na">findValue</span><span class="o">(</span><span class="n">key</span><span class="o">);</span>
</span><span class='line'>                <span class="o">}</span>
</span><span class='line'>            <span class="o">});</span>
</span><span class='line'>    <span class="n">String</span> <span class="n">resultVal</span> <span class="o">=</span> <span class="n">graphs</span><span class="o">.</span><span class="na">get</span><span class="o">(</span><span class="s">&quot;testKey&quot;</span><span class="o">);</span>
</span><span class='line'>    <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">&quot;first time value is: &quot;</span> <span class="o">+</span> <span class="n">resultVal</span><span class="o">);</span>
</span><span class='line'>    <span class="n">String</span> <span class="n">resultVal1</span> <span class="o">=</span> <span class="n">graphs</span><span class="o">.</span><span class="na">get</span><span class="o">(</span><span class="s">&quot;testKey&quot;</span><span class="o">);</span>
</span><span class='line'>    <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">&quot;second time values is: &quot;</span> <span class="o">+</span> <span class="n">resultVal1</span><span class="o">);</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>其次是基于实现callable的方法：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="nd">@Test</span>
</span><span class='line'>    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">testCallable</span><span class="o">()</span> <span class="kd">throws</span> <span class="n">ExecutionException</span> <span class="o">{</span>
</span><span class='line'>        <span class="c1">// 没有使用CacheLoader</span>
</span><span class='line'>        <span class="n">Cache</span><span class="o">&lt;</span><span class="n">String</span><span class="o">,</span> <span class="n">String</span><span class="o">&gt;</span> <span class="n">cache</span> <span class="o">=</span> <span class="n">CacheBuilder</span><span class="o">.</span><span class="na">newBuilder</span><span class="o">().</span><span class="na">maximumSize</span><span class="o">(</span><span class="mi">1000</span><span class="o">).</span><span class="na">build</span><span class="o">();</span>
</span><span class='line'>      <span class="n">String</span> <span class="n">resultVal</span> <span class="o">=</span> <span class="n">cache</span><span class="o">.</span><span class="na">get</span><span class="o">(</span><span class="s">&quot;testKey&quot;</span><span class="o">,</span> <span class="k">new</span> <span class="n">Callable</span><span class="o">&lt;</span><span class="n">String</span><span class="o">&gt;()</span> <span class="o">{</span>
</span><span class='line'>            <span class="kd">public</span> <span class="n">String</span> <span class="nf">call</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>                <span class="c1">// 这里先根据key实际去取值的方法，例如根据这个key去数据库或者properties文件中取值</span>
</span><span class='line'>                <span class="n">ApplicationContext</span> <span class="n">context</span> <span class="o">=</span> <span class="k">new</span> <span class="n">FileSystemXmlApplicationContext</span><span class="o">(</span><span class="s">&quot;E:/WorkDir/struts2practice/GuavaTest/WebRoot/WEB-INF/xml/springConfig.xml&quot;</span><span class="o">);</span>
</span><span class='line'>                <span class="n">JdbcCustomerDAO</span> <span class="n">aJdbcCustomerDAO</span> <span class="o">=</span> <span class="n">context</span><span class="o">.</span><span class="na">getBean</span><span class="o">(</span><span class="n">JdbcCustomerDAO</span><span class="o">.</span><span class="na">class</span><span class="o">);</span>
</span><span class='line'>                <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">&quot;resultVal call method is invoked&quot;</span><span class="o">);</span>
</span><span class='line'>                <span class="k">return</span> <span class="n">aJdbcCustomerDAO</span><span class="o">.</span><span class="na">findValue</span><span class="o">(</span><span class="s">&quot;testKey&quot;</span><span class="o">);</span>
</span><span class='line'>            <span class="o">}</span>
</span><span class='line'>        <span class="o">});</span>
</span><span class='line'>        <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">&quot;first time value is: &quot;</span> <span class="o">+</span> <span class="n">resultVal</span><span class="o">);</span>
</span><span class='line'>        <span class="n">String</span> <span class="n">resultVal1</span> <span class="o">=</span> <span class="n">cache</span><span class="o">.</span><span class="na">get</span><span class="o">(</span><span class="s">&quot;testKey&quot;</span><span class="o">,</span> <span class="k">new</span> <span class="n">Callable</span><span class="o">&lt;</span><span class="n">String</span><span class="o">&gt;()</span> <span class="o">{</span>
</span><span class='line'>            <span class="kd">public</span> <span class="n">String</span> <span class="nf">call</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>                <span class="c1">// 这里先根据key实际去取值的方法，例如根据这个key去数据库或者properties文件中取值</span>
</span><span class='line'>                <span class="n">ApplicationContext</span> <span class="n">context</span> <span class="o">=</span> <span class="k">new</span> <span class="n">FileSystemXmlApplicationContext</span><span class="o">(</span><span class="s">&quot;E:/WorkDir/struts2practice/GuavaTest/WebRoot/WEB-INF/xml/springConfig.xml&quot;</span><span class="o">);</span>
</span><span class='line'>                <span class="n">JdbcCustomerDAO</span> <span class="n">aJdbcCustomerDAO</span> <span class="o">=</span> <span class="n">context</span><span class="o">.</span><span class="na">getBean</span><span class="o">(</span><span class="n">JdbcCustomerDAO</span><span class="o">.</span><span class="na">class</span><span class="o">);</span>
</span><span class='line'>                <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">&quot;resultVal1 call method is invoked&quot;</span><span class="o">);</span>
</span><span class='line'>                <span class="k">return</span> <span class="n">aJdbcCustomerDAO</span><span class="o">.</span><span class="na">findValue</span><span class="o">(</span><span class="s">&quot;testKey&quot;</span><span class="o">);</span>
</span><span class='line'>            <span class="o">}</span>
</span><span class='line'>        <span class="o">});</span>
</span><span class='line'>        <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">&quot;second time values is: &quot;</span> <span class="o">+</span> <span class="n">resultVal1</span><span class="o">);</span>
</span><span class='line'>    <span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>




<!-- more -->


<h3>缓存数据的移除</h3>

<h5>基于大小的移除</h5>

<p>看字面意思就知道就是按照缓存的大小来移除，如果即将到达指定的大小，那就会把不常用的键值对从cache中移除。</p>

<p>定义的方式一般为 CacheBuilder.maximumSize(long)，官方还介绍了一种可以算权重的方法，个人认为实际使用中不太用到，暂不讨论。</p>

<p>就这个常用的来看有几个注意点，</p>

<p>其一，这个size指的是cache中的条目数，不是内存大小或是其他；</p>

<p>其二，并不是完全到了指定的size系统才开始移除不常用的数据的，而是接近这个size的时候系统就会开始做移除的动作；</p>

<p>其三，如果一个键值对已经从缓存中被移除了，你再次请求访问的时候，如果cachebuild是使用cacheloader方式的，那依然还是会从cacheloader中再取一次值，如果这样还没有，就会抛出异常</p>

<h5>基于时间的移除</h5>

<p>guava提供了两个基于时间移除的方法</p>

<p>expireAfterAccess(long, TimeUnit)  这个方法是根据某个键值对最后一次访问之后多少时间后移除</p>

<p>expireAfterWrite(long, TimeUnit)   这个方法是根据某个键值对被创建或值被替换后多少时间移除</p>

<h5>基于引用的移除</h5>

<p>这种移除方式主要是基于java的垃圾回收机制，根据键或者值的引用关系决定移除，个人对垃圾回收这块不是非常了解，窃以为不太可靠。。也不常用。。所以没有研究，欢迎补充。</p>

<p>主动移除有三种方法：</p>

<p>单独移除用 Cache.invalidate(key)</p>

<p>批量移除用 Cache.invalidateAll(keys)</p>

<p>移除所有用 Cache.invalidateAll()</p>

<p>如果需要在移除数据的时候有所动作还可以定义Removal Listener，但是有点需要注意的是默认Removal Listener中的行为是和移除动作同步执行的，如果需要改成异步形式，可以考虑使用RemovalListeners.asynchronous(RemovalListener, Executor)</p>

<h3>刷新操作</h3>

<p>refresh 操作， 与evict不同， 是给key一个new value， 同时如果在refresh时有访问，那么将会返回old value， 而evict则会等待evict结束返回new value
定义refresh一般使用异步的操作</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="c1">// Some keys don&#39;t need refreshing, and we want refreshes to be done asynchronously.</span>
</span><span class='line'><span class="n">LoadingCache</span><span class="o">&lt;</span><span class="n">Key</span><span class="o">,</span> <span class="n">Graph</span><span class="o">&gt;</span> <span class="n">graphs</span> <span class="o">=</span> <span class="n">CacheBuilder</span><span class="o">.</span><span class="na">newBuilder</span><span class="o">()</span>
</span><span class='line'>       <span class="o">.</span><span class="na">maximumSize</span><span class="o">(</span><span class="mi">1000</span><span class="o">)</span>
</span><span class='line'>       <span class="o">.</span><span class="na">refreshAfterWrite</span><span class="o">(</span><span class="mi">1</span><span class="o">,</span> <span class="n">TimeUnit</span><span class="o">.</span><span class="na">MINUTES</span><span class="o">)</span>
</span><span class='line'>       <span class="o">.</span><span class="na">build</span><span class="o">(</span>
</span><span class='line'>           <span class="k">new</span> <span class="n">CacheLoader</span><span class="o">&lt;</span><span class="n">Key</span><span class="o">,</span> <span class="n">Graph</span><span class="o">&gt;()</span> <span class="o">{</span>
</span><span class='line'>             <span class="kd">public</span> <span class="n">Graph</span> <span class="nf">load</span><span class="o">(</span><span class="n">Key</span> <span class="n">key</span><span class="o">)</span> <span class="o">{</span> <span class="c1">// no checked exception</span>
</span><span class='line'>               <span class="k">return</span> <span class="nf">getGraphFromDatabase</span><span class="o">(</span><span class="n">key</span><span class="o">);</span>
</span><span class='line'>             <span class="o">}</span>
</span><span class='line'>             <span class="kd">public</span> <span class="n">ListenableFuture</span><span class="o">&lt;</span><span class="n">Graph</span><span class="o">&gt;</span> <span class="nf">reload</span><span class="o">(</span><span class="kd">final</span> <span class="n">Key</span> <span class="n">key</span><span class="o">,</span> <span class="n">Graph</span> <span class="n">prevGraph</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>               <span class="k">if</span> <span class="o">(</span><span class="n">neverNeedsRefresh</span><span class="o">(</span><span class="n">key</span><span class="o">))</span> <span class="o">{</span>
</span><span class='line'>                 <span class="k">return</span> <span class="n">Futures</span><span class="o">.</span><span class="na">immediateFuture</span><span class="o">(</span><span class="n">prevGraph</span><span class="o">);</span>
</span><span class='line'>               <span class="o">}</span> <span class="k">else</span> <span class="o">{</span>
</span><span class='line'>                 <span class="c1">// asynchronous!</span>
</span><span class='line'>                 <span class="k">return</span> <span class="n">ListenableFutureTask</span><span class="o">.</span><span class="na">create</span><span class="o">(</span><span class="k">new</span> <span class="n">Callable</span><span class="o">&lt;</span><span class="n">Graph</span><span class="o">&gt;()</span> <span class="o">{</span>
</span><span class='line'>                   <span class="kd">public</span> <span class="n">Graph</span> <span class="nf">call</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>                     <span class="k">return</span> <span class="nf">getGraphFromDatabase</span><span class="o">(</span><span class="n">key</span><span class="o">);</span>
</span><span class='line'>                   <span class="o">}</span>
</span><span class='line'>                 <span class="o">});</span>
</span><span class='line'>               <span class="o">}</span>
</span><span class='line'>             <span class="o">}</span>
</span><span class='line'>           <span class="o">});</span>
</span></code></pre></td></tr></table></div></figure>


<p>在refreshAfterWrite方法，会调用reload</p>

<h3>统计</h3>

<p>提供了一些数据采集的方法</p>

<ul>
<li><p>CacheBuilder.recordStats() 方法启动了 cache的数据收集</p></li>
<li><p>Cache.stats() 返回了一个CacheStats对象， 提供一些数据方法</p></li>
<li><p>hitRate()， 请求点击率</p></li>
<li><p>averageLoadPenalty()， 加载new value，花费的时间， 单位nanosecondes</p></li>
<li><p>evictionCount()， 清除的个数</p></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Sublime Text的一些配置]]></title>
    <link href="http://ajia.github.com/blog/2013/06/27/sublime-textde-%5B%3F%5D-xie-pei-zhi/"/>
    <updated>2013-06-27T10:37:00+08:00</updated>
    <id>http://ajia.github.com/blog/2013/06/27/sublime-textde-[?]-xie-pei-zhi</id>
    <content type="html"><![CDATA[<p>来源：https://github.com/mhartl/rails_tutorial_sublime_text</p>

<h1>Command-line command</h1>

<p>在Mac OSX上这样创建命令subl：</p>

<pre><code>$ sudo ln -s "/Applications/Sublime Text 2.app/Contents/SharedSupport/bin/subl" ~/bin/subl
</code></pre>

<p>如果~/bin/subl不存在:</p>

<pre><code>mkdir ~/bin
</code></pre>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[解决heroku push timeout错误]]></title>
    <link href="http://ajia.github.com/blog/2013/06/27/jie-jue-heroku-push-timeoutcuo-wu/"/>
    <updated>2013-06-27T10:24:00+08:00</updated>
    <id>http://ajia.github.com/blog/2013/06/27/jie-jue-heroku-push-timeoutcuo-wu</id>
    <content type="html"><![CDATA[<p>转自http://ruby-china.org/topics/10813</p>

<p>git push heroku master出现Operation/Connecting timed out错误。</p>

<p>用“ssh -v git@heroku.com”检查后发现原因在于fuck GFW!!!以下节点全部不可用:<br/>
174.129.23.118<br/>
174.129.22.35<br/>
50.16.233.102<br/>
50.19.85.154<br/>
50.19.85.132<br/>
50.16.215.67<br/>
50.19.85.156<br/>
184.73.165.65<br/>
50.16.215.104<br/>
107.21.106.77<br/>
107.21.105.64<br/>
107.22.234.17</p>

<p>仅有以下节点可用：
107.21.95.3</p>

<p>故手动配置vi ~/.ssh/config：</p>

<p>Host heroku.com<br/>
User freemember007<br/>
Hostname 107.21.95.3 #关键设置，替代proxy.heroku.com，直接走IP。<br/>
PreferredAuthentications publickey
IdentityFile ~/.ssh/id_rsa
port 22</p>

<p>用了上面的方法，问题解决。感谢分享。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[常用sql]]></title>
    <link href="http://ajia.github.com/blog/2013/06/08/chang-yong-sql/"/>
    <updated>2013-06-08T11:22:00+08:00</updated>
    <id>http://ajia.github.com/blog/2013/06/08/chang-yong-sql</id>
    <content type="html"><![CDATA[<h1>查询重复的userid</h1>

<pre><code>select * from WebsiteUser where userid in 
(select userid from WebsiteUser group by userid having(count(*)&gt;1))
</code></pre>

<p>作为记录、待续</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[时间格式化插件jquery-dateFormat]]></title>
    <link href="http://ajia.github.com/blog/2013/06/07/shi-jian-ge-shi-hua-cha-jian-jquery-dateformat/"/>
    <updated>2013-06-07T18:01:00+08:00</updated>
    <id>http://ajia.github.com/blog/2013/06/07/shi-jian-ge-shi-hua-cha-jian-jquery-dateformat</id>
    <content type="html"><![CDATA[<p>做项目难免遇上格式化时间，而且可能不是每个地方都显示成一个样子，所以服务器端做这个不太方便。</p>

<p><a href="https://github.com/phstc/jquery-dateFormat#examples">jquery-dateFormat</a></p>

<!-- more -->


<h1>Format patterns</h1>

<ul>
<li><p>Date and time patterns</p></li>
<li><p>yy = short year</p></li>
<li><p>yyyy = long year</p></li>
<li><p>M = month (1-12)</p></li>
<li><p>MM = month (01-12)</p></li>
<li><p>MMM = month abbreviation (Jan, Feb … Dec)</p></li>
<li><p>MMMM = long month (January, February … December)</p></li>
<li><p>d = day (1 - 31)</p></li>
<li><p>dd = day (01 - 31)</p></li>
<li><p>ddd = day of the week in words (Monday, Tuesday … Sunday)</p></li>
<li><p>D - Ordinal day (1st, 2nd, 3rd, 21st, 22nd, 23rd, 31st, 4th…)</p></li>
<li><p>h = hour in am/pm (0-12)</p></li>
<li><p>hh = hour in am/pm (00-12)</p></li>
<li><p>H = hour in day (0-23)</p></li>
<li><p>HH = hour in day (00-23)</p></li>
<li><p>mm = minute</p></li>
<li><p>ss = second</p></li>
<li><p>SSS = milliseconds</p></li>
<li><p>a = AM/PM marker</p></li>
<li><p>p = a.m./p.m. marker</p></li>
</ul>


<h1>支持的时间格式</h1>

<ul>
<li><p>2009-12-18 10:54:50.546 (default java.util.Date.toString output)</p></li>
<li><p>Wed Jan 13 10:43:41 CET 2010 (???)</p></li>
<li><p>2010-10-19T11:40:33.527+02:00 (default JAXB formatting of java.util.Date)</p></li>
<li><p>Sat Mar 05 2011 11:47:35 GMT-0300 (BRT) (default JavaScript new Date().toString() output)</p></li>
<li><p>Unix Timestamp (e.g. new Date().getTime())</p></li>
</ul>


<h1>例子</h1>

<p><em>使用css来格式化</em></p>

<pre><code>&lt;span class="shortDateFormat"&gt;2009-12-18 10:54:50.546&lt;/span&gt;
&lt;span class="longDateFormat"&gt;2009-12-18 10:54:50.546&lt;/span&gt;
</code></pre>

<p>默认的shortDateFormat 和 longDateFormat 这样来定义：</p>

<pre><code>jQuery.format.date.defaultShortDateFormat = "dd/MM/yyyy";
jQuery.format.date.defaultLongDateFormat = "dd/MM/yyyy HH:mm:ss";
</code></pre>

<p>输出</p>

<pre><code>#1 18/12/2009
#2 18/12/2009 10:54:50
</code></pre>

<p><em>用javascript来格式化</em></p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="o">&lt;</span><span class="nx">script</span><span class="o">&gt;</span>
</span><span class='line'>      <span class="nb">document</span><span class="p">.</span><span class="nx">write</span><span class="p">(</span><span class="nx">$</span><span class="p">.</span><span class="nx">format</span><span class="p">.</span><span class="nx">date</span><span class="p">(</span><span class="s2">&quot;2009-12-18 10:54:50.546&quot;</span><span class="p">,</span> <span class="s2">&quot;Test: dd/MM/yyyy&quot;</span><span class="p">));</span>
</span><span class='line'>      <span class="nb">document</span><span class="p">.</span><span class="nx">write</span><span class="p">(</span><span class="nx">$</span><span class="p">.</span><span class="nx">format</span><span class="p">.</span><span class="nx">date</span><span class="p">(</span><span class="s2">&quot;Wed Jan 13 10:43:41 CET 2010&quot;</span><span class="p">,</span> <span class="s2">&quot;dd~MM~yyyy&quot;</span><span class="p">));</span>
</span><span class='line'><span class="o">&lt;</span><span class="err">/script&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<p>输出</p>

<pre><code>#1 Test: 18/12/2009
#2 18~12~2009
</code></pre>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[数字格式化插件Numeral.js]]></title>
    <link href="http://ajia.github.com/blog/2013/06/07/shu-zi-ge-shi-hua-cha-jian-numeral-dot-js/"/>
    <updated>2013-06-07T18:00:00+08:00</updated>
    <id>http://ajia.github.com/blog/2013/06/07/shu-zi-ge-shi-hua-cha-jian-numeral-dot-js</id>
    <content type="html"><![CDATA[<p>需要格式化文件大小，发现这个好用的东西，<a href="http://numeraljs.com/">numeral.js</a></p>

<!-- more -->


<p>首先当然是要引入它</p>

<pre><code>&lt;script src="numeral.min.js"&gt;&lt;/script&gt;
</code></pre>

<p>然后就可以格式化了</p>

<pre><code>var string = numeral(1000).format('0,0');
// '1,000'
</code></pre>

<p>数字的格式化</p>

<pre><code>Number          Format          String
10000           '0,0.0000'      10,000.0000
10000.23        '0,0'           10,000
-10000          '0,0.0'         -10,000.0
10000.1234      '0.000'         10000.123
10000.1234      '0[.]00000'     10000.12340
-10000          '(0,0.0000)'    (10,000.0000)
-0.23           '.00'           -.23
-0.23           '(.00)'         (.23)
0.23            '0.00000'       0.23000
0.23            '0.0[0000]'     0.23
1230974         '0.0a'          1.2m
1460            '0 a'           1 k
-104000         '0a'            -104k
1               '0o'            1st
52              '0o'            52nd
23              '0o'            23rd        
100             '0o'            100th
</code></pre>

<p>货币的格式化</p>

<pre><code>Number          Format          String
1000.234        '$0,0.00'       $1,000.23
1000.2          '0,0[.]00 $'    1,000.20 $
1001            '$ 0,0[.]00'    $ 1,001
-1000.234       '($0,0)'        ($1,000)
-1000.234       '$0.00'         -$1000.23
1230974         '($ 0.00 a)'    $ 1.23 m
</code></pre>

<p>字节的格式化</p>

<pre><code>Number          Format          String
100             '0b'            100B
2048            '0 b'           2 KB
4194304         '0.0b'          2 MB
7884486213      '0.00b'         7.3GB
3467479682787   '0.000 b'       3.154 TB
</code></pre>

<p>百分比</p>

<pre><code>Number          Format          String
1               '0%'            100%
0.974878234     '0.000%'        97.488%
-0.43           '0 %'           -43 %
0.43            '(0.000 %)'     43.000 %
</code></pre>

<p>时间</p>

<pre><code>Number          Format          String
25              '00:00:00'      0:00:25
238             '00:00:00'      0:03:58
63846           '00:00:00'      17:44:06
</code></pre>

<p>还可以反格式化</p>

<pre><code>var string = numeral().unformat('($10,000.00)');
// '-10000'

String          Function                    Number
'10,000.123'    .unformat('10,000.123')     10000.123
'0.12345'       .unformat('0.12345')        0.12345
'1.23m'         .unformat('1.23m')          1230000
'23rd'          .unformat('23rd')           23
'$10,000.00'    .unformat('$10,000.00')     10000
'100B'          .unformat('100B')           100
'3.154TB'       .unformat('3.154TB')        3467859674006
'-76%'          .unformat('-76%')           -0.76
'2:23:57'       .unformat('2:23:57')        8637
</code></pre>

<p>还支持运算</p>

<pre><code>var number = numeral(1000);

var added = number.add(10);
// 1010
Before          Function            After
1000            .add(100)           1100
1100            .subtract(100)      1000
1000            .multiply(100)      100000
100000          .divide(100)        1000
</code></pre>

<p>提供的方法：value 等等&#8230;</p>

<pre><code>var number = numeral(1000);

var string = number.format('0,0');
// '1,000'

var value = number.value();
// 1000
</code></pre>

<p>最重要的是还支持中文</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Guava的使用指南之Collections]]></title>
    <link href="http://ajia.github.com/blog/2013/05/31/guavade-shi-yong-zhi-nan-zhi-collections/"/>
    <updated>2013-05-31T13:45:00+08:00</updated>
    <id>http://ajia.github.com/blog/2013/05/31/guavade-shi-yong-zhi-nan-zhi-collections</id>
    <content type="html"><![CDATA[<p>Guava Collections可以帮助我们写出更简短精炼、可读性强的代码。看看Guava Collections为我们做了哪些很酷的事情：</p>

<ul>
<li>Immutable Collections:还在使用Collections.unmodifiableXXX()? Immutable Collections这才是真正的不可修改的集合</li>
<li>Multiset:看看如何把重复的元素放入一个集合</li>
<li>Multimaps:需要在一个key对应多个value的时候，自己写一个实现比较繁琐，让Multimaps来帮帮</li>
<li>BiMap:java.util.Map只能保证key的不重复，BiMap保证value也不重复</li>
<li>MapMaker:超级强大的Map构造类</li>
<li>Ordering class:大家知道用Comparator作为比较器来对集合排序，但是对于多关键字排序Ordering class可以简化很多的代码</li>
<li>其他特性</li>
</ul>


<!-- more -->


<p>当然，如果没有Guava Collections你也可以用Java Collections Framework完成上面的功能。但是Guava Collections提供的这些API经过精心设计，而且还有2500个单元测试来保障它的质量。所以我们没必要重新发明轮子。接下来我们来详细看看Guava Collections的一些具体功能。</p>

<h2>Immutable Collections：真正的不可修改的集合</h2>

<p>大家都用过Collections.unmodifiableXXX()来做一个不可修改的集合。例如你要构造存储常量的Set,你可以这样做：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="n">Set</span><span class="o">&lt;</span><span class="n">String</span><span class="o">&gt;</span> <span class="n">set</span> <span class="o">=</span> <span class="k">new</span> <span class="n">HashSet</span><span class="o">&lt;</span><span class="n">String</span><span class="o">&gt;(</span><span class="n">Arrays</span><span class="o">.</span><span class="na">asList</span><span class="o">(</span><span class="k">new</span> <span class="n">String</span><span class="o">[]{</span><span class="s">&quot;RED&quot;</span><span class="o">,</span><span class="s">&quot;GREEN&quot;</span><span class="o">}));</span>
</span><span class='line'><span class="n">Set</span><span class="o">&lt;</span><span class="n">String</span><span class="o">&gt;</span> <span class="n">unmodifiableSet</span> <span class="o">=</span> <span class="n">Collections</span><span class="o">.</span><span class="na">unmodifiableSet</span><span class="o">(</span><span class="n">set</span><span class="o">);</span>
</span></code></pre></td></tr></table></div></figure>


<p>这看上去似乎不错，因为每次调unmodifiableSet.add()都会抛出一个UnsupportedOperationException。感觉安全了？慢！如果有人在原来的set上add或者remove元素会怎么样？结果unmodifiableSet也是被add或者remove元素了。而且构造这样一个简单的set写了两句长的代码。下面看看ImmutableSet是怎么来做地更安全和简洁：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="n">ImmutableSet</span><span class="o">&lt;</span><span class="n">String</span><span class="o">&gt;</span> <span class="n">immutableSet</span> <span class="o">=</span> <span class="n">ImmutableSet</span><span class="o">.</span><span class="na">of</span><span class="o">(</span><span class="s">&quot;RED&quot;</span><span class="o">,</span><span class="s">&quot;GREEN&quot;</span><span class="o">);</span>
</span></code></pre></td></tr></table></div></figure>


<p>就这样一句就够了，而且试图调add方法的时候，它一样会抛出UnsupportedOperationException。重要的是代码的可读性增强了不少，非常直观的展现了代码的用意。如果像之前这个代码保护一个set怎么做呢？你可以：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="n">ImmutableSet</span><span class="o">&lt;</span><span class="n">String</span><span class="o">&gt;</span> <span class="n">immutableSet</span> <span class="o">=</span> <span class="n">ImmutableSet</span><span class="o">.</span><span class="na">copyOf</span><span class="o">(</span><span class="n">set</span><span class="o">);</span>
</span></code></pre></td></tr></table></div></figure>


<p>从构造的方式来说，ImmutableSet集合还提供了Builder模式来构造一个集合：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="n">Builder</span><span class="o">&lt;</span><span class="n">String</span><span class="o">&gt;</span> <span class="n">builder</span> <span class="o">=</span> <span class="n">ImmutableSet</span><span class="o">.</span><span class="na">builder</span><span class="o">();</span>
</span><span class='line'><span class="n">ImmutableSet</span><span class="o">&lt;</span><span class="n">String</span><span class="o">&gt;</span> <span class="n">immutableSet</span> <span class="o">=</span> <span class="n">builder</span><span class="o">.</span><span class="na">add</span><span class="o">(</span><span class="s">&quot;RED&quot;</span><span class="o">).</span><span class="na">addAll</span><span class="o">(</span><span class="n">set</span><span class="o">).</span><span class="na">build</span><span class="o">();</span>
</span></code></pre></td></tr></table></div></figure>


<p>在这个例子里面Builder不但能加入单个元素还能加入既有的集合。</p>

<p>除此之外，Guava Collections还提供了各种Immutable集合的实现：ImmutableList, ImmutableMap, ImmutableSortedSet, ImmutableSortedMap。</p>

<h2>Multiset:把重复的元素放入集合</h2>

<p>你可能会说这和Set接口的契约冲突，因为Set接口的javaDoc里面规定不能放入重复元素。事实上，Multiset并没有实现java.util.Set接口，它更像是一个Bag。普通的Set就像这样：[car,ship,bike],而Multiset会是这样：[carx2,shipx6,bikex3]。</p>

<p>譬如一个List里面有各种字符，然后你要统计每个字符串在List里面出现的次数：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="n">Map</span><span class="o">&lt;</span><span class="n">String</span><span class="o">,</span> <span class="n">Integer</span><span class="o">&gt;</span> <span class="n">map</span> <span class="o">=</span> <span class="k">new</span> <span class="n">HashMap</span><span class="o">&lt;</span><span class="n">String</span><span class="o">,</span> <span class="n">Integer</span><span class="o">&gt;();</span>
</span><span class='line'><span class="k">for</span><span class="o">(</span><span class="n">String</span> <span class="nl">word:</span><span class="n">wordList</span><span class="o">){</span>
</span><span class='line'>  <span class="n">Integer</span> <span class="n">count</span> <span class="o">=</span> <span class="n">map</span><span class="o">.</span><span class="na">get</span><span class="o">(</span><span class="n">word</span><span class="o">);</span>
</span><span class='line'>  <span class="n">map</span><span class="o">.</span><span class="na">put</span><span class="o">(</span><span class="n">word</span><span class="o">,</span> <span class="o">(</span><span class="n">count</span><span class="o">==</span><span class="kc">null</span><span class="o">)?</span><span class="mi">1</span><span class="o">:</span><span class="n">count</span><span class="o">+</span><span class="mi">1</span><span class="o">);</span>
</span><span class='line'><span class="o">}</span>
</span><span class='line'><span class="c1">//count word &quot;the&quot;</span>
</span><span class='line'><span class="n">Integer</span> <span class="n">count</span> <span class="o">=</span> <span class="n">map</span><span class="o">.</span><span class="na">get</span><span class="o">(</span><span class="s">&quot;the&quot;</span><span class="o">);</span>
</span></code></pre></td></tr></table></div></figure>


<p>如果用Multiset就可以这样：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="n">HashMultiset</span><span class="o">&lt;</span><span class="n">String</span><span class="o">&gt;</span> <span class="n">multiSet</span> <span class="o">=</span> <span class="n">HashMultiset</span><span class="o">.</span><span class="na">create</span><span class="o">();</span>
</span><span class='line'><span class="n">multiSet</span><span class="o">.</span><span class="na">addAll</span><span class="o">(</span><span class="n">wordList</span><span class="o">);</span>
</span><span class='line'><span class="c1">//count word &quot;the&quot;</span>
</span><span class='line'><span class="n">Integer</span> <span class="n">count</span> <span class="o">=</span> <span class="n">multiSet</span><span class="o">.</span><span class="na">count</span><span class="o">(</span><span class="s">&quot;the&quot;</span><span class="o">);</span>
</span></code></pre></td></tr></table></div></figure>


<p>这样连循环都不用了，而且Multiset用的方法叫count，显然比在Map里面调用get有更好的可读性。Multiset还提供了setCount这样设定元素重复次数的方法，虽然你可以通过使用Map来实现类似的功能，但是程序的可读性比Multiset差了很多。</p>

<p>常用实现Multiset接口的类有：
* HashMultiset:元素存放于HashMap
* LinkedHashMultiset:元素存放于LinkedHashMap,即元素的排列顺序由第一次放入的顺序决定
* TreeMultiset:元素被排序存放于TreeMap
* EnumMultiset:元素必须是enum类型
* ImmutableMultiset:不可修改的Mutiset</p>

<p>看到这里你可能已经发现Guava Collections都是以create或是of这样的静态方法来构造对象。这是因为这些集合类大多有多个参数的私有构造方法，由于参数数目很多，客户代码程序员使用起来就很不方便。而且以这种方式可以返回原类型的子类型对象。另外，对于创建范型对象来讲，这种方式更加简洁。</p>

<h2>Muitimap:在Map的value里面放多个元素</h2>

<p>Muitimap就是一个key对应多个value的数据结构。看上去它很像java.util.Map的结构，但是Muitimap不是Map，没有实现Map的接口。设想你对Map调了2次参数key一样的put方法，结果就是第2次的value覆盖了第一次的value。但是对Muitimap来说这个key同时对应了2个value。所以Map看上去是：{k1=v1,k2=v2,…}，而Muitimap是：{k1=[v1,v2,v3],k2=[v7,v8],…}。</p>

<p>举个记名投票的例子。所有选票都放在一个List<Ticket>里面，List的每个元素包括投票人和选举人的名字。我们可以这样写:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="c1">//Key is cadidate name, its value is his voters</span>
</span><span class='line'><span class="n">HashMap</span><span class="o">&lt;</span><span class="n">String</span><span class="o">,</span> <span class="n">HashSet</span><span class="o">&lt;</span><span class="n">String</span><span class="o">&gt;&gt;</span> <span class="n">hMap</span> <span class="o">=</span> <span class="k">new</span> <span class="n">HashMap</span><span class="o">&lt;</span><span class="n">String</span><span class="o">,</span> <span class="n">HashSet</span><span class="o">&lt;</span><span class="n">String</span><span class="o">&gt;&gt;();</span>
</span><span class='line'><span class="k">for</span><span class="o">(</span><span class="n">Ticket</span> <span class="nl">ticket:</span><span class="n">tickets</span><span class="o">){</span>
</span><span class='line'>  <span class="n">HashSet</span><span class="o">&lt;</span><span class="n">String</span><span class="o">&gt;</span> <span class="n">set</span> <span class="o">=</span> <span class="n">hMap</span><span class="o">.</span><span class="na">get</span><span class="o">(</span><span class="n">ticket</span><span class="o">.</span><span class="na">getCandidate</span><span class="o">());</span>
</span><span class='line'>  <span class="k">if</span><span class="o">(</span><span class="n">set</span><span class="o">==</span><span class="kc">null</span><span class="o">){</span>
</span><span class='line'>      <span class="n">set</span> <span class="o">=</span> <span class="k">new</span> <span class="n">HashSet</span><span class="o">&lt;</span><span class="n">String</span><span class="o">&gt;();</span>
</span><span class='line'>      <span class="n">hMap</span><span class="o">.</span><span class="na">put</span><span class="o">(</span><span class="n">ticket</span><span class="o">.</span><span class="na">getCandidate</span><span class="o">(),</span> <span class="n">set</span><span class="o">);</span>
</span><span class='line'>  <span class="o">}</span>
</span><span class='line'>  <span class="n">set</span><span class="o">.</span><span class="na">add</span><span class="o">(</span><span class="n">ticket</span><span class="o">.</span><span class="na">getVoter</span><span class="o">);</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>我们再来看看Muitimap能做些什么：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="n">HashMultimap</span><span class="o">&lt;</span><span class="n">String</span><span class="o">,</span> <span class="n">String</span><span class="o">&gt;</span> <span class="n">map</span> <span class="o">=</span> <span class="n">HashMultimap</span><span class="o">.</span><span class="na">create</span><span class="o">();</span>
</span><span class='line'><span class="k">for</span><span class="o">(</span><span class="n">Ticket</span> <span class="nl">ticket:</span><span class="n">tickets</span><span class="o">){</span>
</span><span class='line'>  <span class="n">map</span><span class="o">.</span><span class="na">put</span><span class="o">(</span><span class="n">ticket</span><span class="o">.</span><span class="na">getCandidate</span><span class="o">(),</span> <span class="n">ticket</span><span class="o">.</span><span class="na">getVoter</span><span class="o">());</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>就这么简单！</p>

<p>Muitimap接口的主要实现类有：
* HashMultimap:key放在HashMap, 而value放在HashSet, 即一个key对应的value不可重复
* ArrayListMultimap：key放在HashMap,而value放在ArrayList,即一个key对应的value有顺序可重复
* LinkedHashMultimap:key放在LinkedHashMap,而value放在LinkedHashSet,即一个key对应的value有顺序不可重复
* TreeMultimap：key放在TreeMap，而value放在TreeSet，即一个key对应的value有排列顺序
* ImmutableMultimap:不可修改的Multimap</p>

<h2>BiMap:双向Map</h2>

<p>BiMap实现了java.util.Map接口。它的特点是它的value和它key一样也是不可重复的，换句话说它的key和value是等价的。如果你往BiMap的value里面放了重复的元素，就会得到IllegalArgumentException.</p>

<p>举个例子，你可能经常会碰到在Map里面根据value值来反推它的key值的逻辑：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="k">for</span><span class="o">(</span><span class="n">Map</span><span class="o">.</span><span class="na">Entry</span><span class="o">&lt;</span><span class="n">User</span><span class="o">,</span> <span class="n">Address</span><span class="o">&gt;</span> <span class="nl">entry:</span><span class="n">map</span><span class="o">.</span><span class="na">entreSet</span><span class="o">()){</span>
</span><span class='line'>  <span class="k">if</span><span class="o">(</span><span class="n">entry</span><span class="o">.</span><span class="na">getValue</span><span class="o">().</span><span class="na">equals</span><span class="o">(</span><span class="n">anAddress</span><span class="o">)){</span>
</span><span class='line'>      <span class="k">return</span> <span class="n">entry</span><span class="o">.</span><span class="na">getKey</span><span class="o">();</span>
</span><span class='line'>  <span class="o">}</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>如果把User和Address都放在BiMap,那么一句代码就得到结果了：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="k">return</span> <span class="n">biMap</span><span class="o">.</span><span class="na">inverse</span><span class="o">().</span><span class="na">get</span><span class="o">(</span><span class="n">anAddress</span><span class="o">);</span>
</span></code></pre></td></tr></table></div></figure>


<p>这里的inverse方法就是把BiMap的key集合value集合对调，因此biMap==biMap.inverse().inverse()。</p>

<p>BiMap的常用实现有：
* HashBiMap:key集合与value集合都有HashMap实现
* EnumBiMap:key与value都必须是enum类型
* ImmutableBiMap:不可修改的BiMap</p>

<h2>MapMaker:超级强大的Map构造工具</h2>

<p>MapMaker是用来构造ConcurrentMap的工具类。为什么可以把MapMaker叫做超级强大？看了下面的例子你就知道了。首先，它可以用来构造ConcurrentHashMap:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="c1">//ConcurrentHashMap with concurrency level 8</span>
</span><span class='line'><span class="n">ConcurrentMap</span><span class="o">&lt;</span><span class="n">String</span><span class="o">,</span> <span class="n">Object</span><span class="o">&gt;</span> <span class="n">map1</span> <span class="o">=</span> <span class="k">new</span> <span class="n">MapMaker</span><span class="o">().</span><span class="na">concurrencyLevel</span><span class="o">(</span><span class="mi">8</span><span class="o">).</span><span class="na">makeMap</span><span class="o">();</span>
</span></code></pre></td></tr></table></div></figure>


<p>或者构造用各种不同reference作为key和value的Map：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="c1">//ConcurrentMap with soft reference key and weak reference value</span>
</span><span class='line'><span class="n">ConcurrentMap</span><span class="o">&lt;</span><span class="n">String</span><span class="o">,</span> <span class="n">Object</span><span class="o">&gt;</span> <span class="n">map2</span> <span class="o">=</span> <span class="k">new</span> <span class="n">MapMaker</span><span class="o">().</span><span class="na">softKeys</span><span class="o">().</span><span class="na">weakValues</span><span class="o">().</span><span class="na">makeMap</span><span class="o">();</span>
</span></code></pre></td></tr></table></div></figure>


<p>或者构造有自动移除时间过期项的Map:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="c1">//Automatically removed entries from map after 30 seconds since they are created</span>
</span><span class='line'><span class="n">ConcurrentMap</span><span class="o">&lt;</span><span class="n">String</span><span class="o">,</span> <span class="n">Object</span><span class="o">&gt;</span> <span class="n">map3</span> <span class="o">=</span> <span class="k">new</span> <span class="n">MapMaker</span><span class="o">().</span><span class="na">expireAfterWrite</span><span class="o">(</span><span class="mi">30</span><span class="o">,</span> <span class="n">TimeUnit</span><span class="o">.</span><span class="na">SECONDS</span><span class="o">).</span><span class="na">makeMap</span><span class="o">();</span>
</span></code></pre></td></tr></table></div></figure>


<p>或者构造有最大限制数目的Map：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="c1">//Map size grows close to the 100, the map vill evict</span>
</span><span class='line'><span class="c1">//entries that are less likely to be used again</span>
</span><span class='line'><span class="n">ConcurrentMap</span><span class="o">&lt;</span><span class="n">String</span><span class="o">,</span> <span class="n">Object</span><span class="o">&gt;</span> <span class="n">map4</span> <span class="o">=</span> <span class="k">new</span> <span class="n">MapMaker</span><span class="o">().</span><span class="na">maximumSize</span><span class="o">(</span><span class="mi">100</span><span class="o">).</span><span class="na">makeMap</span><span class="o">();</span>
</span></code></pre></td></tr></table></div></figure>


<p>或者提供当Map里面不包含所get的项，而需要自动加入到Map的功能。这个功能当Map作为缓存的时候很有用：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="c1">//Create an Object to the map, when get() is missing in map</span>
</span><span class='line'><span class="n">ConcurrentMap</span><span class="o">&lt;</span><span class="n">String</span><span class="o">,</span> <span class="n">Object</span><span class="o">&gt;</span> <span class="n">map5</span> <span class="o">=</span> <span class="k">new</span> <span class="n">MapMaker</span><span class="o">().</span><span class="na">makeComputingMap</span><span class="o">(</span><span class="k">new</span> <span class="n">Function</span><span class="o">&lt;&gt;(</span><span class="n">String</span><span class="o">,</span> <span class="n">Object</span><span class="o">){</span>
</span><span class='line'>  <span class="kd">public</span> <span class="n">Object</span> <span class="nf">apply</span><span class="o">(</span><span class="n">String</span> <span class="n">key</span><span class="o">){</span>
</span><span class='line'>      <span class="k">return</span> <span class="nf">createObject</span><span class="o">(</span><span class="n">key</span><span class="o">);</span>
</span><span class='line'>  <span class="o">}</span>
</span><span class='line'><span class="o">});</span>
</span></code></pre></td></tr></table></div></figure>


<p>这些还不是最强大的特性，最厉害的是MapMaker可以提供拥有以上所有特性的Map:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="c1">//Put all features together!</span>
</span><span class='line'><span class="n">ConcurrentMap</span><span class="o">&lt;</span><span class="n">String</span><span class="o">,</span> <span class="n">Object</span><span class="o">&gt;</span> <span class="n">mapAll</span> <span class="o">=</span> <span class="k">new</span> <span class="n">MapMaker</span><span class="o">()</span>
</span><span class='line'><span class="o">.</span><span class="na">concurrencyLevel</span><span class="o">(</span><span class="mi">8</span><span class="o">)</span>
</span><span class='line'><span class="o">.</span><span class="na">softKeys</span><span class="o">()</span>
</span><span class='line'><span class="o">.</span><span class="na">weakValues</span><span class="o">()</span>
</span><span class='line'><span class="o">.</span><span class="na">expireAfterWrite</span><span class="o">(</span><span class="mi">30</span><span class="o">,</span> <span class="n">TimeUnit</span><span class="o">.</span><span class="na">SECONDS</span><span class="o">)</span>
</span><span class='line'><span class="o">.</span><span class="na">makeComputingMap</span><span class="o">(</span>
</span><span class='line'>  <span class="k">new</span> <span class="n">Function</span><span class="o">&lt;</span><span class="n">String</span><span class="o">,</span> <span class="n">Object</span><span class="o">&gt;(){</span>
</span><span class='line'>      <span class="kd">public</span> <span class="n">Object</span> <span class="nf">apply</span><span class="o">(</span><span class="n">String</span> <span class="n">key</span><span class="o">){</span>
</span><span class='line'>          <span class="k">return</span> <span class="nf">createObject</span><span class="o">(</span><span class="n">key</span><span class="o">);</span>
</span><span class='line'>      <span class="o">}</span>
</span><span class='line'>  <span class="o">}</span>
</span><span class='line'><span class="o">);</span>
</span></code></pre></td></tr></table></div></figure>


<h2>Ordering class:灵活的多字段排序比较器</h2>

<p>需对集合排序或者求最大值最小值，首推java.util.Collections类，但关键是要提供Comparator接口的实现。假设有个待排序的List<Foo>, 而Foo里面有两个排序关键字int a, int b和int c:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="n">Collections</span><span class="o">.</span><span class="na">sort</span><span class="o">(</span><span class="n">list</span><span class="o">,</span> <span class="k">new</span> <span class="n">Comparator</span><span class="o">&lt;</span><span class="n">Foo</span><span class="o">&gt;(){</span>
</span><span class='line'>  <span class="nd">@Override</span>
</span><span class='line'>  <span class="kd">public</span> <span class="kt">int</span> <span class="nf">compare</span><span class="o">(</span><span class="n">Foo</span> <span class="n">f1</span><span class="o">,</span> <span class="n">Foo</span> <span class="n">f2</span><span class="o">){</span>
</span><span class='line'>      <span class="kt">int</span> <span class="n">resultA</span> <span class="o">=</span> <span class="n">f1</span><span class="o">.</span><span class="na">a</span><span class="o">-</span><span class="n">f2</span><span class="o">.</span><span class="na">a</span><span class="o">;</span>
</span><span class='line'>      <span class="kt">int</span> <span class="n">resultB</span> <span class="o">=</span> <span class="n">f1</span><span class="o">.</span><span class="na">b</span><span class="o">-</span><span class="n">f2</span><span class="o">.</span><span class="na">b</span><span class="o">;</span>
</span><span class='line'>      <span class="k">return</span> <span class="n">resultA</span><span class="o">==</span><span class="mi">0</span><span class="o">?(</span><span class="n">resultB</span><span class="o">==</span><span class="mi">0</span><span class="o">?</span><span class="n">fl</span><span class="o">.</span><span class="na">c</span><span class="o">-</span><span class="n">f2</span><span class="o">.</span><span class="na">c</span><span class="o">:</span><span class="n">resultB</span><span class="o">):</span><span class="n">resultA</span><span class="o">;</span>
</span><span class='line'>  <span class="o">}</span>
</span><span class='line'><span class="o">})</span>
</span></code></pre></td></tr></table></div></figure>


<p>这看上去有点眼晕，如果用一串if-else也好不到哪里去。看看ComparisonChain能做到什么：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="n">Collections</span><span class="o">.</span><span class="na">sort</span><span class="o">*(</span><span class="n">list</span><span class="o">,</span> <span class="k">new</span> <span class="n">Comparator</span><span class="o">&lt;</span><span class="n">Foo</span><span class="o">&gt;(){</span>
</span><span class='line'>  <span class="nd">@Override</span>
</span><span class='line'>  <span class="k">return</span> <span class="n">ComparisonChain</span><span class="o">.</span><span class="na">start</span><span class="o">()</span>
</span><span class='line'>      <span class="o">.</span><span class="na">compare</span><span class="o">(</span><span class="n">f1</span><span class="o">.</span><span class="na">a</span><span class="o">,</span> <span class="n">f2</span><span class="o">.</span><span class="na">a</span><span class="o">)</span>
</span><span class='line'>      <span class="o">.</span><span class="na">compare</span><span class="o">(</span><span class="n">f1</span><span class="o">.</span><span class="na">b</span><span class="o">,</span> <span class="n">f2</span><span class="o">.</span><span class="na">b</span><span class="o">)</span>
</span><span class='line'>      <span class="o">.</span><span class="na">compare</span><span class="o">(</span><span class="n">f1</span><span class="o">.</span><span class="na">c</span><span class="o">,</span> <span class="n">f2</span><span class="o">.</span><span class="na">c</span><span class="o">).</span><span class="na">result</span><span class="o">();</span>
</span><span class='line'><span class="o">});</span>
</span></code></pre></td></tr></table></div></figure>


<p>如果排序关键字要用自定义比较器，compare方法也有接受Comparator的重载版本。譬如Foo里面每个排序关键字都已经有了各自的Comparator,那么利用ComparisonChain可以：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="n">Collections</span><span class="o">.</span><span class="na">sort</span><span class="o">(</span><span class="n">list</span><span class="o">,</span> <span class="k">new</span> <span class="n">Comparator</span><span class="o">&lt;</span><span class="n">Foo</span><span class="o">&gt;(){</span>
</span><span class='line'>  <span class="nd">@Override</span>
</span><span class='line'>  <span class="k">return</span> <span class="n">ComparisonChain</span><span class="o">.</span><span class="na">start</span><span class="o">()</span>
</span><span class='line'>      <span class="o">.</span><span class="na">compare</span><span class="o">(</span><span class="n">f1</span><span class="o">.</span><span class="na">a</span><span class="o">,</span> <span class="n">f2</span><span class="o">.</span><span class="na">a</span><span class="o">,</span> <span class="n">comparatorA</span><span class="o">)</span>
</span><span class='line'>      <span class="o">.</span><span class="na">compare</span><span class="o">(</span><span class="n">f1</span><span class="o">.</span><span class="na">b</span><span class="o">,</span> <span class="n">f2</span><span class="o">.</span><span class="na">b</span><span class="o">,</span> <span class="n">comparatorB</span><span class="o">)</span>
</span><span class='line'>      <span class="o">.</span><span class="na">compare</span><span class="o">(</span><span class="n">f1</span><span class="o">.</span><span class="na">c</span><span class="o">,</span> <span class="n">f2</span><span class="o">.</span><span class="na">c</span><span class="o">,</span> <span class="n">comparatorC</span><span class="o">).</span><span class="na">result</span><span class="o">();</span>
</span><span class='line'><span class="o">});</span>
</span></code></pre></td></tr></table></div></figure>


<p>Ordring类还提供了一个组合Comparator对象的方法。而且Ordring本身实现了Comparator接口所以它能直接作为Comparator使用：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="n">Ordering</span><span class="o">&lt;</span><span class="n">Foo</span><span class="o">&gt;</span> <span class="n">ordering</span> <span class="o">=</span> <span class="n">Ordering</span><span class="o">.</span><span class="na">compound</span><span class="o">(</span>
</span><span class='line'>  <span class="n">Arrays</span><span class="o">.</span><span class="na">asList</span><span class="o">(</span><span class="n">ComparatorA</span><span class="o">,</span> <span class="n">comparatorB</span><span class="o">,</span> <span class="n">comparatorC</span><span class="o">));</span>
</span><span class='line'><span class="n">Collections</span><span class="o">.</span><span class="na">sort</span><span class="o">(</span><span class="n">list</span><span class="o">,</span> <span class="n">ordering</span><span class="o">);</span>
</span></code></pre></td></tr></table></div></figure>


<h2>其他特性</h2>

<h3>过滤器：利用Collection2.filter()方法过滤集合中不符合条件的元素。譬如过滤一个List<Integer>里面小于10的元素：</h3>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="n">Collection</span><span class="o">&lt;</span><span class="n">Integer</span><span class="o">&gt;</span> <span class="n">filterCollection</span> <span class="o">=</span> <span class="n">Collections2</span><span class="o">.</span><span class="na">filter</span><span class="o">(</span><span class="n">list</span><span class="o">,</span> <span class="k">new</span> <span class="n">Predicate</span><span class="o">&lt;</span><span class="n">Integer</span><span class="o">&gt;(){</span>
</span><span class='line'>  <span class="nd">@Override</span>
</span><span class='line'>  <span class="kd">public</span> <span class="kt">boolean</span> <span class="nf">apply</span><span class="o">(</span><span class="n">Integer</span> <span class="n">input</span><span class="o">){</span>
</span><span class='line'>      <span class="k">return</span> <span class="n">input</span> <span class="o">&gt;=</span> <span class="mi">10</span><span class="o">;</span>
</span><span class='line'>  <span class="o">}</span>
</span><span class='line'><span class="o">});</span>
</span></code></pre></td></tr></table></div></figure>


<p>当然，你可以自己写一个循环来实现这个功能，但是这样不能保证之后小于10的元素不被放入集合。filter的强大之处在于返回的filterCollection仍然有排斥小于10的元素的特性，如果调filterCollection.add(9)就会得到一个IllegalArgumentException.</p>

<h3>转换器：利用Collections.transform方法来转换集合中的元素。譬如把一个Set<Integer>里面所有元素都转化成带格式的String来产生新的Collection<String>:</h3>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="n">Collection</span><span class="o">&lt;</span><span class="n">String</span><span class="o">&gt;</span> <span class="n">formatCollection</span> <span class="o">=</span> <span class="n">Collection2</span><span class="o">.</span><span class="na">transform</span><span class="o">(</span><span class="n">set</span><span class="o">,</span> <span class="k">new</span> <span class="n">Function</span><span class="o">&lt;</span><span class="n">Integer</span><span class="o">,</span> <span class="n">String</span><span class="o">&gt;(){</span>
</span><span class='line'>  <span class="nd">@Override</span>
</span><span class='line'>  <span class="kd">public</span> <span class="n">String</span> <span class="nf">apply</span><span class="o">(</span><span class="n">Integer</span> <span class="n">input</span><span class="o">){</span>
</span><span class='line'>      <span class="k">return</span> <span class="k">new</span> <span class="nf">DecimalFormat</span><span class="o">(</span><span class="s">&quot;#,###&quot;</span><span class="o">).</span><span class="na">format</span><span class="o">(</span><span class="n">input</span><span class="o">);</span>
</span><span class='line'>  <span class="o">}</span>
</span><span class='line'><span class="o">})</span>
</span></code></pre></td></tr></table></div></figure>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Guava的使用指南之Basic Utilities]]></title>
    <link href="http://ajia.github.com/blog/2013/05/31/guavade-shi-yong-zhi-nan-zhi-basic-utilities/"/>
    <updated>2013-05-31T13:44:00+08:00</updated>
    <id>http://ajia.github.com/blog/2013/05/31/guavade-shi-yong-zhi-nan-zhi-basic-utilities</id>
    <content type="html"><![CDATA[<h2>从避免使用null开始</h2>

<p>由于null的根本问题在于含糊而不明确，要避免使用null的方式，就是确认过去使用null的时机与目的，并使用明确的语义。在过去使用null的情况中，开发者在方法中传回null，通常代表着客户端必须检查是否为null，并在null的情况下使用预设值，以便程序能够继续执行。举个例子来说，如果原先有getNickName方法可以传回String，调用它如下：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="n">String</span> <span class="n">nickName</span> <span class="o">=</span> <span class="n">getNickName</span><span class="o">(</span><span class="s">&quot;Duke&quot;</span><span class="o">);</span>
</span><span class='line'><span class="k">if</span><span class="o">(</span><span class="n">nickName</span> <span class="o">==</span> <span class="kc">null</span><span class="o">){</span>
</span><span class='line'>  <span class="n">nickName</span> <span class="o">=</span> <span class="s">&quot;Ajia&#39;s User&quot;</span><span class="o">;</span>
</span><span class='line'><span class="o">}</span>
</span><span class='line'><span class="n">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">nickName</span><span class="o">);</span>
</span></code></pre></td></tr></table></div></figure>




<!-- more -->


<p>如果客户端忘了检查null，那么就会直接显示null，在这个简单的例子中并不会怎么样，只是显示的结果令人困惑罢了，但如果后面的执行流程牵涉到至关重要的结果，程序快乐的继续执行下去，错误可能到最后才会呈现发生。</p>

<p>那么可将getNickName修改使一定传回Optional<String>(com.google.common.base)实例，但绝对不要传回null。Optional的语义是它可能包含也可能不包括值，如果你呼叫直接呼叫它的get方法：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="n">String</span> <span class="n">nickName</span> <span class="o">=</span> <span class="n">getNickName</span><span class="o">(</span><span class="s">&quot;Duke&quot;</span><span class="o">).</span><span class="na">get</span><span class="o">();</span>
</span><span class='line'><span class="n">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">nickName</span><span class="o">);</span>
</span></code></pre></td></tr></table></div></figure>


<p>在Optional没有包含值的情况下，就会直接抛出IllegalStateException，这实现了速错的概念，开发者可以立即发现错误，并了解到必须作出些检查，可能的方式之一像是：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="n">Optional</span><span class="o">&lt;</span><span class="n">String</span><span class="o">&gt;</span> <span class="n">nick</span> <span class="o">=</span> <span class="n">getNickName</span><span class="o">(</span><span class="s">&quot;Duke&quot;</span><span class="o">);</span>
</span><span class='line'><span class="n">String</span> <span class="n">nickname</span> <span class="o">=</span> <span class="n">nick</span><span class="o">.</span><span class="na">isPresent</span><span class="o">()?</span><span class="n">nick</span><span class="o">.</span><span class="na">get</span><span class="o">():</span><span class="s">&quot;CodeData User&quot;</span><span class="o">;</span>
</span><span class='line'><span class="n">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">nickName</span><span class="o">);</span>
</span></code></pre></td></tr></table></div></figure>


<p>不过这看来有点啰嗦，一个比较好的方式可以是：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="n">String</span> <span class="n">nickName</span> <span class="o">=</span> <span class="n">getNickName</span><span class="o">(</span><span class="s">&quot;Duke&quot;</span><span class="o">).</span><span class="na">or</span><span class="o">(</span><span class="s">&quot;Ajia&#39;s User&quot;</span><span class="o">);</span>
</span><span class='line'><span class="n">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">nickName</span><span class="o">);</span>
</span></code></pre></td></tr></table></div></figure>


<p>在getNickName方法内部，原先如果是这样传回值：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="k">return</span> <span class="n">rs</span><span class="o">.</span><span class="na">next</span><span class="o">()?</span><span class="n">rs</span><span class="o">.</span><span class="na">getString</span><span class="o">(</span><span class="s">&quot;nickname&quot;</span><span class="o">):</span><span class="kc">null</span><span class="o">;</span>
</span></code></pre></td></tr></table></div></figure>


<p>则可以使用Optional改为：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="k">return</span> <span class="n">rs</span><span class="o">.</span><span class="na">next</span><span class="o">()?</span><span class="n">Optional</span><span class="o">.</span><span class="na">of</span><span class="o">(</span><span class="n">rs</span><span class="o">.</span><span class="na">getString</span><span class="o">(</span><span class="s">&quot;nickname&quot;</span><span class="o">)):</span><span class="n">Optional</span><span class="o">.</span><span class="na">absent</span><span class="o">();</span>
</span></code></pre></td></tr></table></div></figure>


<p>Optional.of方法用来建立Optional对象包含传入的值，而Optional.absent建立的对象不包含任何值，也就是如果你直接调用后者建立的Optional对象上get方法，就会抛出异常。在有值的情况下使用Optional.of,在原本会传回null的情况下使用Optional.absent。</p>

<p>当然，过去许多程序库中使用了不少的null，这些程序无法说改就改，Guava提供了一些衔接程序库中null的方法。例如，如果原先的getNickName是你无法修改的，那么可以这么修改客户端：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="n">String</span> <span class="n">nickName</span> <span class="o">=</span> <span class="n">Optional</span><span class="o">.</span><span class="na">fromNullable</span><span class="o">(</span><span class="n">getNickName</span><span class="o">(</span><span class="s">&quot;Duke&quot;</span><span class="o">)).</span><span class="na">or</span><span class="o">(</span><span class="s">&quot;Ajia&#39;s User&quot;</span><span class="o">);</span>
</span><span class='line'><span class="n">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">nickName</span><span class="o">);</span>
</span></code></pre></td></tr></table></div></figure>


<p>Optional.fromNullable在传入值为null的情况下，传回的Optional实例调用其get方法，就会抛出错误。</p>

<h3>使用Preconditions作参数的与判断</h3>

<p>Guava中提供了一个工作参数检查的工具类-Preconditions,静态导入这个类，可以大大地简化代码中对于参数的预判断和处理。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kn">import</span> <span class="nn">static</span> <span class="n">com</span><span class="o">.</span><span class="na">google</span><span class="o">.</span><span class="na">common</span><span class="o">.</span><span class="na">base</span><span class="o">.</span><span class="na">Preconditions</span><span class="o">.*;</span>
</span></code></pre></td></tr></table></div></figure>


<p>在以前，我们需要判断一个参数不为空需要像下面这样写：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kd">public</span> <span class="kt">void</span> <span class="nf">testMethod</span><span class="o">(</span><span class="n">Object</span> <span class="n">obj</span><span class="o">){</span>
</span><span class='line'>  <span class="k">if</span><span class="o">(</span><span class="n">obj</span> <span class="o">==</span> <span class="kc">null</span><span class="o">){</span>
</span><span class='line'>      <span class="k">throw</span> <span class="k">new</span> <span class="nf">NullPointerException</span><span class="o">();</span>
</span><span class='line'>  <span class="o">}</span>
</span><span class='line'>  <span class="c1">//... other operations</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>每次都要添加if语句来做判断，重复的工作会做好多次，使用Preconditions可以简化成下面这样</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kd">public</span> <span class="kt">void</span> <span class="nf">testMethod</span><span class="o">(</span><span class="n">Object</span> <span class="n">obj</span><span class="o">){</span>
</span><span class='line'>  <span class="n">Object</span> <span class="n">other</span> <span class="o">=</span> <span class="n">checkNotNull</span><span class="o">(</span><span class="n">obj</span><span class="o">);</span>
</span><span class='line'>  <span class="c1">//... other operations</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>checkNotNull会检查参数是否为null，当为null的时候会抛出NullPointerException，否则直接返回参数。</p>

<p>checkNotNull, checkArgument和checkState，都有三种形式的参数：
* public static<T> T checkNotNull(T reference),只包含需要判断的对象，无其他多余的参数，抛出的异常不带有任何异常信息
* public static<T> T checkNotNull(T reference, @Nullable Object errorMessage),只包含一个错误信息的额外参数，抛出的异常带有errorMessage.toString()的异常信息
* public static<T> T checkNotNull(T reference, @Nullable String errorMessageTemplate, @Nullable Object…errorMessageArgs),这种是printf风格的错误信息，后面是变参，errorMessageTemplate可以使用一些占位符，例如可以这样写</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="n">checkArgument</span><span class="o">(</span><span class="n">i</span><span class="o">&gt;=</span><span class="mi">0</span><span class="o">,</span> <span class="s">&quot;Argument was %s but expected nonnegative&quot;</span><span class="o">,</span> <span class="n">i</span><span class="o">);</span>
</span><span class='line'><span class="n">checkArgument</span><span class="o">(</span><span class="n">i</span><span class="o">&lt;</span><span class="n">j</span><span class="o">,</span> <span class="s">&quot;Expected i&lt;j, but %s&gt;%s&quot;</span><span class="o">,</span> <span class="n">i</span><span class="o">,</span> <span class="n">j</span><span class="o">);</span>
</span></code></pre></td></tr></table></div></figure>


<p>捕获异常后可以获取自定义的详细错误信息，对于调试来说很有帮助，而且代码也很简洁。例如，</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="n">Object</span> <span class="n">obj</span> <span class="o">=</span> <span class="kc">null</span><span class="o">;</span>
</span><span class='line'><span class="k">try</span><span class="o">{</span>
</span><span class='line'>  <span class="n">checkNotNull</span><span class="o">(</span><span class="n">obj</span><span class="o">,</span> <span class="s">&quot;cannot be null&quot;</span><span class="o">);</span>
</span><span class='line'><span class="o">}</span><span class="k">catch</span><span class="o">(</span><span class="n">Exception</span> <span class="n">e</span><span class="o">){</span>
</span><span class='line'>  <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">e</span><span class="o">.</span><span class="na">getMessage</span><span class="o">());</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>运行后可以获得自定义的异常信息“cannot be null”</p>

<p>Preconditions里面的方法还有下面几个</p>

<ul>
<li>checkArgument(boolean)  检查boolean是否为真，用作方法中检查参数</li>
<li>checkNotNull(T)检查value不为null，直接返回value</li>
<li>checkState(boolean)检查对象的一些状态，不依赖方法参数。例如，Iterator可以用来next是否在remove之前被调用</li>
<li>checkElementIndex(int index, int size)检查index是否为在一个长度为size的list、string或array合法的范围。index的范围区间是[0,size)(包含0不包含size)。无需直接传入list、string或array，只需传入大小。 返回index</li>
<li>checkPositionIndex(int index, int size)检查位置index是否为在一个长度为size的list、string或array合法的范围。index的范围区间是[0, size)(包含0不包含size). 无需直接传入list, string或array, 只需传入大小</li>
<li>checkPositionIndexes(int start, int end, int size),检查[start, end)是一个长度为size的list, string或array合法的范围子集.伴随着错误信息.</li>
</ul>


<p>Guava的preconditions有这样几个有点：
* 在静态导入后，方法很明确无歧义，checkNotNull可以清楚地告诉你他是干什么的，它会抛出怎样的异常
* checkNotNull在验证通过后直接返回，可以这样方便地写代码：this.field = checkNotNull(field).
* 简单而又强大的可变参数printf风格的自定义错误信息。</p>

<p>建议将preconditions放置在单独的行上，这样可以在调试的时候清楚地指明哪个precondition出现错误。另外，提供有帮助的错误信息也非常有用。</p>

<h2>Ordering简介</h2>

<p>Ordering是Guava最常用的Comparator类，可以用来操作、扩展和使用comparators。自定义比较器，进行排序判断，进行排序，获取最大值最小值，获取最大最小的前几个值等方法。</p>

<p>几个常用的static方法，提供了三种常用的比较器</p>

<ul>
<li>natural()     使用Comparable类型的自然排序，例如，整数从小到大，字符串是按字典顺序</li>
<li>usingToString()       使用toString()返回的字符串按字典顺序进行排序</li>
</ul>


<p>使用Ordering.from(Comparator)从一个已经存在的Comparator来构建Ordering实例</p>

<p>自定义Ordering</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kn">import</span> <span class="nn">java.util.Arrays</span><span class="o">;</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">java.util.List</span><span class="o">;</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">com.google.common.collect.Ordering</span><span class="o">;</span>
</span><span class='line'> <span class="kn">import</span> <span class="nn">com.google.common.primitives.Ints</span><span class="o">;</span>
</span><span class='line'><span class="kd">public</span> <span class="kd">class</span> <span class="nc">Demo</span> <span class="o">{</span>
</span><span class='line'>     <span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">main</span><span class="o">(</span><span class="n">String</span><span class="o">[]</span> <span class="n">args</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>         <span class="n">Ordering</span><span class="o">&lt;</span><span class="n">String</span><span class="o">&gt;</span> <span class="n">byLengthOrdering</span> <span class="o">=</span> <span class="k">new</span> <span class="n">Ordering</span><span class="o">&lt;</span><span class="n">String</span><span class="o">&gt;()</span> <span class="o">{</span>
</span><span class='line'>             <span class="kd">public</span> <span class="kt">int</span> <span class="nf">compare</span><span class="o">(</span><span class="n">String</span> <span class="n">left</span><span class="o">,</span> <span class="n">String</span> <span class="n">right</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>                 <span class="k">return</span> <span class="n">Ints</span><span class="o">.</span><span class="na">compare</span><span class="o">(</span><span class="n">left</span><span class="o">.</span><span class="na">length</span><span class="o">(),</span> <span class="n">right</span><span class="o">.</span><span class="na">length</span><span class="o">());</span>
</span><span class='line'>             <span class="o">}</span>
</span><span class='line'>         <span class="o">};</span>
</span><span class='line'>         <span class="n">List</span><span class="o">&lt;</span><span class="n">String</span><span class="o">&gt;</span> <span class="n">strList</span> <span class="o">=</span> <span class="n">Arrays</span><span class="o">.</span><span class="na">asList</span><span class="o">(</span><span class="s">&quot;abc&quot;</span><span class="o">,</span> <span class="s">&quot;a&quot;</span><span class="o">,</span> <span class="s">&quot;bcd&quot;</span><span class="o">);</span>
</span><span class='line'><span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">byLengthOrdering</span><span class="o">.</span><span class="na">reverse</span><span class="o">().</span><span class="na">isOrdered</span><span class="o">(</span><span class="n">strList</span><span class="o">));</span>
</span><span class='line'>         <span class="n">List</span><span class="o">&lt;</span><span class="n">String</span><span class="o">&gt;</span> <span class="n">strList1</span> <span class="o">=</span> <span class="n">Arrays</span><span class="o">.</span><span class="na">asList</span><span class="o">(</span><span class="s">&quot;a&quot;</span><span class="o">,</span> <span class="s">&quot;ab&quot;</span><span class="o">,</span> <span class="s">&quot;bcd&quot;</span><span class="o">);</span>
</span><span class='line'>         <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">byLengthOrdering</span><span class="o">.</span><span class="na">isOrdered</span><span class="o">(</span><span class="n">strList1</span><span class="o">));</span>
</span><span class='line'>     <span class="o">}</span>
</span><span class='line'> <span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>操作方法</p>

<p>reverse()方法，获取了Ordering的反排序。使用自定义的Ordering判断collection是否符合自定义顺序。</p>

<ul>
<li>reverse()     返回与当前Ordering相反的排序</li>
<li>nullsFirst()      返回一个将null放在non-null元素之前的Ordering,其他的和原始的Ordering一样</li>
<li>compound(Comparator)返回一个使用Comparator的Ordering, Comparator作为第二排序元素，例如对bug列表进行排序，先根据bug的级别，再根据优先级进行排序。</li>
<li>lexicographical()    Returns an Ordering that orders iterables lexicographically by their elements.</li>
<li>onResultOf(Function)将function应用在各个元素上之后，再使用原始ordering进行排序。</li>
</ul>


<p>假如我们希望按sortedBy字段进行排序,</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kd">class</span> <span class="nc">Foo</span> <span class="o">{</span>
</span><span class='line'>  <span class="nd">@Nullable</span> <span class="n">String</span> <span class="n">sortedBy</span><span class="o">;</span>
</span><span class='line'>  <span class="kt">int</span> <span class="n">notSortedBy</span><span class="o">;</span>
</span><span class='line'><span class="o">}</span>
</span><span class='line'><span class="n">Ordering</span><span class="o">&lt;</span><span class="n">Foo</span><span class="o">&gt;</span> <span class="n">ordering</span> <span class="o">=</span> <span class="n">Ordering</span><span class="o">.</span><span class="na">natural</span><span class="o">().</span><span class="na">nullsFirst</span><span class="o">().</span><span class="na">onResultOf</span><span class="o">(</span><span class="k">new</span> <span class="n">Function</span><span class="o">&lt;</span><span class="n">Foo</span><span class="o">,</span> <span class="n">String</span><span class="o">&gt;()</span> <span class="o">{</span>
</span><span class='line'>    <span class="kd">public</span> <span class="n">String</span> <span class="nf">apply</span><span class="o">(</span><span class="n">Foo</span> <span class="n">foo</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>      <span class="k">return</span> <span class="n">foo</span><span class="o">.</span><span class="na">sortedBy</span><span class="o">;</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>  <span class="o">});</span>
</span></code></pre></td></tr></table></div></figure>


<p>还有一些很有用的方法
* greatestOf(Iterable iterable, int k)      Returns the k greatest elements of the specified iterable, according to this ordering, in order from greatest to least. Not necessarily stable.
* isOrdered(Iterable)       Tests if the specified Iterable is in nondecreasing order according to this ordering.
* sortedCopy(Iterable)      Returns a sorted copy of the specified elements as a List.
* min(E, E)     Returns the minimum of its two arguments according to this ordering. If the values compare as equal, the first argument is returned.
* min(E, E, E, E&#8230;)        Returns the minimum of its arguments according to this ordering. If there are multiple least values, the first is returned.
* min(Iterable)     Returns the minimum element of the specified Iterable. Throws a NoSuchElementException if the Iterable is empty.</p>

<h3>复写Object的常用方法</h3>

<p>在Java中Object类是所有类的父类，其中有几个需要override的方法比如equals,hashCode和toString等方法。每次写这几个方法都要做很多重复性的判断，很多类库提供了复写这几个方法的工具类，Guava也提供了类似的方式。下面我们来看看Guava中这几个方法简单使用。</p>

<h3>equals</h3>

<p>equals是一个经常需要覆写的方法，可以查看Object的equals方法注释，对equals有几个性质的要求：
* 1.自反性reflexive: 任何非空引用x,x.equals(x)返回为true；
* 2.对称性symmetric: 任何非空引用x和y,x.equals(y)返回true当且仅当y.equals(x)返回true；
* 传递性transitive：任何非空引用x和y，如果x.equals(y)返回true，并且y.equals(z)返回true，那么x.equals(z)返回true；
* 一致性consistent：两个非空引用x和y，x.equals(y)的多次调用应该保持一致的结果，（前提条件是在多次比较之前没有修改x和y用于比较的相关信息）；
* 对于所有非null的值x，x.equals(null)都要返回false</p>

<p>当我们要覆写的类中某些值可能为null的时候，就需要对null做很多判断和分支处理。使用Guava的Object.equal方法可以避免这个问题，使得equals的方法的覆写变得更加容易，而且可读性强，简洁优雅。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kn">import</span> <span class="nn">org.junit.Test</span><span class="o">;</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">com.google.common.base.Objects</span><span class="o">;</span>
</span><span class='line'><span class="kd">public</span> <span class="kd">class</span> <span class="nc">ObjectTest</span> <span class="o">{</span>
</span><span class='line'>    <span class="nd">@Test</span>
</span><span class='line'>    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">equalTest</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'><span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">Objects</span><span class="o">.</span><span class="na">equal</span><span class="o">(</span><span class="s">&quot;a&quot;</span><span class="o">,</span> <span class="s">&quot;a&quot;</span><span class="o">));</span>
</span><span class='line'><span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">Objects</span><span class="o">.</span><span class="na">equal</span><span class="o">(</span><span class="kc">null</span><span class="o">,</span> <span class="s">&quot;a&quot;</span><span class="o">));</span>
</span><span class='line'><span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">Objects</span><span class="o">.</span><span class="na">equal</span><span class="o">(</span><span class="s">&quot;a&quot;</span><span class="o">,</span> <span class="kc">null</span><span class="o">));</span>
</span><span class='line'><span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">Objects</span><span class="o">.</span><span class="na">equal</span><span class="o">(</span><span class="kc">null</span><span class="o">,</span> <span class="kc">null</span><span class="o">));</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>    <span class="nd">@Test</span>
</span><span class='line'>    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">equalPersonTest</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'> <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">Objects</span><span class="o">.</span><span class="na">equal</span><span class="o">(</span><span class="k">new</span> <span class="n">Person</span><span class="o">(</span><span class="s">&quot;peida&quot;</span><span class="o">,</span><span class="mi">23</span><span class="o">),</span> <span class="k">new</span> <span class="n">Person</span><span class="o">(</span><span class="s">&quot;peida&quot;</span><span class="o">,</span><span class="mi">23</span><span class="o">)));</span>
</span><span class='line'>        <span class="n">Person</span> <span class="n">person</span><span class="o">=</span><span class="k">new</span> <span class="n">Person</span><span class="o">(</span><span class="s">&quot;peida&quot;</span><span class="o">,</span><span class="mi">23</span><span class="o">);</span>
</span><span class='line'><span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">Objects</span><span class="o">.</span><span class="na">equal</span><span class="o">(</span><span class="n">person</span><span class="o">,</span><span class="n">person</span><span class="o">));</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'><span class="o">}</span>
</span><span class='line'><span class="kd">class</span> <span class="nc">Person</span> <span class="o">{</span>
</span><span class='line'>    <span class="kd">public</span> <span class="n">String</span> <span class="n">name</span><span class="o">;</span>
</span><span class='line'>    <span class="kd">public</span> <span class="kt">int</span> <span class="n">age</span><span class="o">;</span>
</span><span class='line'>  <span class="n">Person</span><span class="o">(</span><span class="n">String</span> <span class="n">name</span><span class="o">,</span> <span class="kt">int</span> <span class="n">age</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>        <span class="k">this</span><span class="o">.</span><span class="na">name</span> <span class="o">=</span> <span class="n">name</span><span class="o">;</span>
</span><span class='line'>        <span class="k">this</span><span class="o">.</span><span class="na">age</span> <span class="o">=</span> <span class="n">age</span><span class="o">;</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>运行输出：</p>

<pre><code>true
false
false
true
false
true
</code></pre>

<h3>hashCode</h3>

<p>当覆写(override)了equals()方法之后，必须也覆写hashCode()方法，反之亦然。这个方法返回一个整型值，如果两个对象被equals()方法判断为相等，那么它们就应该拥有同样的hash code。Object类的hashCode()方法为不同的对象返回不同的值，Object类的hashCode值表示的是对象的地址。</p>

<p>hashCode的一般性契约（需要满足的条件）如下：
* 1.在Java应用的一次执行过程中，如果对象用于equals比较的信息没有被修改，那么同一个对象多次调用hashCode()方法应该返回同一个整型值。应用的多次执行中，这个值不需要保持一致，即每次执行都是保持着各自不同的值。
* 2.如果equals()判断两个对象相等，那么它们的hashCode()方法应该返回同样的值。
* 3.并没有强制要求如果equals()判断两个对象不相等，那么它们的hashCode()方法就应该返回不同的值。即，两个对象用equals()方法比较返回false，它们的hashCode可以相同也可以不同。但是，应该意识到，为两个不相等的对象产生两个不同的hashCode可以改善哈希表的性能。</p>

<p>写一个hashCode本来也不是很难，但是Guava提供给我们一个更加简单的方法&#8211;Objects.hashCode(Object …)，这是个可变参数的方法，参数列表可以是任意数量，所以可以像这样使用Object.hashCode(field1, field2, … ,fieldn)。非常方便和简洁。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kn">import</span> <span class="nn">org.junit.Test</span><span class="o">;</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">com.google.common.base.Objects</span><span class="o">;</span>
</span><span class='line'><span class="kd">public</span> <span class="kd">class</span> <span class="nc">ObjectTest</span> <span class="o">{</span>
</span><span class='line'>    <span class="nd">@Test</span>
</span><span class='line'>    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">hashcodeTest</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'><span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">Objects</span><span class="o">.</span><span class="na">hashCode</span><span class="o">(</span><span class="s">&quot;a&quot;</span><span class="o">));</span>
</span><span class='line'><span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">Objects</span><span class="o">.</span><span class="na">hashCode</span><span class="o">(</span><span class="s">&quot;a&quot;</span><span class="o">));</span>
</span><span class='line'><span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">Objects</span><span class="o">.</span><span class="na">hashCode</span><span class="o">(</span><span class="s">&quot;a&quot;</span><span class="o">,</span><span class="s">&quot;b&quot;</span><span class="o">));</span>
</span><span class='line'><span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">Objects</span><span class="o">.</span><span class="na">hashCode</span><span class="o">(</span><span class="s">&quot;b&quot;</span><span class="o">,</span><span class="s">&quot;a&quot;</span><span class="o">));</span>
</span><span class='line'><span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">Objects</span><span class="o">.</span><span class="na">hashCode</span><span class="o">(</span><span class="s">&quot;a&quot;</span><span class="o">,</span><span class="s">&quot;b&quot;</span><span class="o">,</span><span class="s">&quot;c&quot;</span><span class="o">));</span>
</span><span class='line'><span class="n">Person</span> <span class="n">person</span><span class="o">=</span><span class="k">new</span> <span class="n">Person</span><span class="o">(</span><span class="s">&quot;peida&quot;</span><span class="o">,</span><span class="mi">23</span><span class="o">);</span>
</span><span class='line'><span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">Objects</span><span class="o">.</span><span class="na">hashCode</span><span class="o">(</span><span class="n">person</span><span class="o">));</span>
</span><span class='line'><span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">Objects</span><span class="o">.</span><span class="na">hashCode</span><span class="o">(</span><span class="n">person</span><span class="o">));</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'><span class="o">}</span>
</span><span class='line'><span class="kd">class</span> <span class="nc">Person</span> <span class="o">{</span>
</span><span class='line'>    <span class="kd">public</span> <span class="n">String</span> <span class="n">name</span><span class="o">;</span>
</span><span class='line'>    <span class="kd">public</span> <span class="kt">int</span> <span class="n">age</span><span class="o">;</span>
</span><span class='line'>  <span class="n">Person</span><span class="o">(</span><span class="n">String</span> <span class="n">name</span><span class="o">,</span> <span class="kt">int</span> <span class="n">age</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>        <span class="k">this</span><span class="o">.</span><span class="na">name</span> <span class="o">=</span> <span class="n">name</span><span class="o">;</span>
</span><span class='line'>        <span class="k">this</span><span class="o">.</span><span class="na">age</span> <span class="o">=</span> <span class="n">age</span><span class="o">;</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<h3>toString()</h3>

<p>因为每个类都直接或间接地继承自Object,因此每个类都有toString()方法。这个方法是用得最多的，覆写得最多，一个好的toString方法对于调试来说是非常重要的，但是写起来确实很不爽。Guava也提供了toString()方法。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kn">import</span> <span class="nn">org.junit.Test</span><span class="o">;</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">com.google.common.base.Objects</span><span class="o">;</span>
</span><span class='line'><span class="kd">public</span> <span class="kd">class</span> <span class="nc">ObjectTest</span> <span class="o">{</span>
</span><span class='line'>    <span class="nd">@Test</span>
</span><span class='line'>    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">toStringTest</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'><span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">Objects</span><span class="o">.</span><span class="na">toStringHelper</span><span class="o">(</span><span class="k">this</span><span class="o">).</span><span class="na">add</span><span class="o">(</span><span class="s">&quot;x&quot;</span><span class="o">,</span> <span class="mi">1</span><span class="o">).</span><span class="na">toString</span><span class="o">());</span>
</span><span class='line'><span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">Objects</span><span class="o">.</span><span class="na">toStringHelper</span><span class="o">(</span><span class="n">Person</span><span class="o">.</span><span class="na">class</span><span class="o">).</span><span class="na">add</span><span class="o">(</span><span class="s">&quot;x&quot;</span><span class="o">,</span> <span class="mi">1</span><span class="o">).</span><span class="na">toString</span><span class="o">());</span>
</span><span class='line'>        <span class="n">Person</span> <span class="n">person</span><span class="o">=</span><span class="k">new</span> <span class="n">Person</span><span class="o">(</span><span class="s">&quot;peida&quot;</span><span class="o">,</span><span class="mi">23</span><span class="o">);</span>
</span><span class='line'>        <span class="n">String</span> <span class="n">result</span> <span class="o">=</span> <span class="n">Objects</span><span class="o">.</span><span class="na">toStringHelper</span><span class="o">(</span><span class="n">Person</span><span class="o">.</span><span class="na">class</span><span class="o">)</span>
</span><span class='line'>        <span class="o">.</span><span class="na">add</span><span class="o">(</span><span class="s">&quot;name&quot;</span><span class="o">,</span> <span class="n">person</span><span class="o">.</span><span class="na">name</span><span class="o">)</span>
</span><span class='line'>        <span class="o">.</span><span class="na">add</span><span class="o">(</span><span class="s">&quot;age&quot;</span><span class="o">,</span> <span class="n">person</span><span class="o">.</span><span class="na">age</span><span class="o">).</span><span class="na">toString</span><span class="o">();</span>
</span><span class='line'>        <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">print</span><span class="o">(</span><span class="n">result</span><span class="o">);</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'><span class="o">}</span>
</span><span class='line'><span class="kd">class</span> <span class="nc">Person</span> <span class="o">{</span>
</span><span class='line'>    <span class="kd">public</span> <span class="n">String</span> <span class="n">name</span><span class="o">;</span>
</span><span class='line'>    <span class="kd">public</span> <span class="kt">int</span> <span class="n">age</span><span class="o">;</span>
</span><span class='line'>  <span class="n">Person</span><span class="o">(</span><span class="n">String</span> <span class="n">name</span><span class="o">,</span> <span class="kt">int</span> <span class="n">age</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>        <span class="k">this</span><span class="o">.</span><span class="na">name</span> <span class="o">=</span> <span class="n">name</span><span class="o">;</span>
</span><span class='line'>        <span class="k">this</span><span class="o">.</span><span class="na">age</span> <span class="o">=</span> <span class="n">age</span><span class="o">;</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'><span class="o">}</span>
</span><span class='line'><span class="c1">//============输出===============</span>
</span><span class='line'><span class="n">ObjectTest</span><span class="o">{</span><span class="n">x</span><span class="o">=</span><span class="mi">1</span><span class="o">}</span>
</span><span class='line'><span class="n">Person</span><span class="o">{</span><span class="n">x</span><span class="o">=</span><span class="mi">1</span><span class="o">}</span>
</span><span class='line'><span class="n">Person</span><span class="o">{</span><span class="n">name</span><span class="o">=</span><span class="n">peida</span><span class="o">,</span> <span class="n">age</span><span class="o">=</span><span class="mi">23</span><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<h3>compare/compareTo</h3>

<p>compareTo(Object o)方法是java.lang.Comparable<T>接口中的方法，当需要对某个类的对象进行排序时，该类需要实现Comparable<T>接口的，必须重写public int compareTo(T o)方法。java规定，若a,b是两个对象，当a.compareTo(b)>0时，则a大于b，a.compareTo(b)&lt;0时，a&lt;b，即规定对象的比较大小的规则；</p>

<p>compare（Object o1, Object o2）方法是java.util.Comparator<T>接口的方法，compare方法内主要靠定义的compareTo规定的对象大小关系规则来确定对象的大小。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kn">import</span> <span class="nn">org.junit.Test</span><span class="o">;</span>
</span><span class='line'><span class="kd">public</span> <span class="kd">class</span> <span class="nc">ObjectTest</span> <span class="o">{</span>
</span><span class='line'><span class="nd">@Test</span>
</span><span class='line'>    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">compareTest</span><span class="o">(){</span>
</span><span class='line'>        <span class="n">Person</span> <span class="n">person</span><span class="o">=</span><span class="k">new</span> <span class="n">Person</span><span class="o">(</span><span class="s">&quot;peida&quot;</span><span class="o">,</span><span class="mi">23</span><span class="o">);</span>
</span><span class='line'>        <span class="n">Person</span> <span class="n">person1</span><span class="o">=</span><span class="k">new</span> <span class="n">Person</span><span class="o">(</span><span class="s">&quot;aida&quot;</span><span class="o">,</span><span class="mi">25</span><span class="o">);</span>
</span><span class='line'>        <span class="n">Person</span> <span class="n">person2</span><span class="o">=</span><span class="k">new</span> <span class="n">Person</span><span class="o">(</span><span class="s">&quot;aida&quot;</span><span class="o">,</span><span class="mi">25</span><span class="o">);</span>
</span><span class='line'>        <span class="n">Person</span> <span class="n">person3</span><span class="o">=</span><span class="k">new</span> <span class="n">Person</span><span class="o">(</span><span class="s">&quot;aida&quot;</span><span class="o">,</span><span class="mi">26</span><span class="o">);</span>
</span><span class='line'>        <span class="n">Person</span> <span class="n">person4</span><span class="o">=</span><span class="k">new</span> <span class="n">Person</span><span class="o">(</span><span class="s">&quot;peida&quot;</span><span class="o">,</span><span class="mi">26</span><span class="o">);</span>
</span><span class='line'><span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">person</span><span class="o">.</span><span class="na">compareTo</span><span class="o">(</span><span class="n">person1</span><span class="o">));</span>
</span><span class='line'><span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">person1</span><span class="o">.</span><span class="na">compareTo</span><span class="o">(</span><span class="n">person2</span><span class="o">));</span>
</span><span class='line'><span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">person1</span><span class="o">.</span><span class="na">compareTo</span><span class="o">(</span><span class="n">person3</span><span class="o">));</span>
</span><span class='line'><span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">person</span><span class="o">.</span><span class="na">compareTo</span><span class="o">(</span><span class="n">person4</span><span class="o">));</span>
</span><span class='line'><span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">person4</span><span class="o">.</span><span class="na">compareTo</span><span class="o">(</span><span class="n">person</span><span class="o">));</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'><span class="o">}</span>
</span><span class='line'><span class="kd">class</span> <span class="nc">Person</span> <span class="kd">implements</span> <span class="n">Comparable</span><span class="o">&lt;</span><span class="n">Person</span><span class="o">&gt;{</span>
</span><span class='line'>    <span class="kd">public</span> <span class="n">String</span> <span class="n">name</span><span class="o">;</span>
</span><span class='line'>    <span class="kd">public</span> <span class="kt">int</span> <span class="n">age</span><span class="o">;</span>
</span><span class='line'>  <span class="n">Person</span><span class="o">(</span><span class="n">String</span> <span class="n">name</span><span class="o">,</span> <span class="kt">int</span> <span class="n">age</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>        <span class="k">this</span><span class="o">.</span><span class="na">name</span> <span class="o">=</span> <span class="n">name</span><span class="o">;</span>
</span><span class='line'>        <span class="k">this</span><span class="o">.</span><span class="na">age</span> <span class="o">=</span> <span class="n">age</span><span class="o">;</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>    <span class="nd">@Override</span>
</span><span class='line'>    <span class="kd">public</span> <span class="kt">int</span> <span class="nf">compareTo</span><span class="o">(</span><span class="n">Person</span> <span class="n">other</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>        <span class="kt">int</span> <span class="n">cmpName</span> <span class="o">=</span> <span class="n">name</span><span class="o">.</span><span class="na">compareTo</span><span class="o">(</span><span class="n">other</span><span class="o">.</span><span class="na">name</span><span class="o">);</span>
</span><span class='line'>        <span class="k">if</span> <span class="o">(</span><span class="n">cmpName</span> <span class="o">!=</span> <span class="mi">0</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>            <span class="k">return</span> <span class="n">cmpName</span><span class="o">;</span>
</span><span class='line'>        <span class="o">}</span>
</span><span class='line'>        <span class="k">if</span><span class="o">(</span><span class="n">age</span><span class="o">&gt;</span><span class="n">other</span><span class="o">.</span><span class="na">age</span><span class="o">){</span>
</span><span class='line'>            <span class="k">return</span> <span class="mi">1</span><span class="o">;</span>
</span><span class='line'>        <span class="o">}</span>
</span><span class='line'>        <span class="k">else</span> <span class="nf">if</span><span class="o">(</span><span class="n">age</span><span class="o">&lt;</span><span class="n">other</span><span class="o">.</span><span class="na">age</span><span class="o">){</span>
</span><span class='line'>            <span class="k">return</span> <span class="o">-</span><span class="mi">1</span><span class="o">;</span>
</span><span class='line'>        <span class="o">}</span>
</span><span class='line'>        <span class="k">return</span> <span class="mi">0</span><span class="o">;</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>：</p>

<p>上面的compareTo方法，代码看上去并不是十分优雅，如果实体属性很多，数据类型丰富，代码可读性将会很差。在guava里, 对所有原始类型都提供了比较的工具函数来避免这个麻烦. 比如对Integer, 可以用Ints.compare()。利用guava的原始类型的compare，我们对上面的方法做一个简化，实现compare方法：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kd">class</span> <span class="nc">PersonComparator</span> <span class="kd">implements</span> <span class="n">Comparator</span><span class="o">&lt;</span><span class="n">Person</span><span class="o">&gt;</span> <span class="o">{</span>
</span><span class='line'>    <span class="nd">@Override</span>
</span><span class='line'>    <span class="kd">public</span> <span class="kt">int</span> <span class="nf">compare</span><span class="o">(</span><span class="n">Person</span> <span class="n">p1</span><span class="o">,</span> <span class="n">Person</span> <span class="n">p2</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>      <span class="kt">int</span> <span class="n">result</span> <span class="o">=</span> <span class="n">p1</span><span class="o">.</span><span class="na">name</span><span class="o">.</span><span class="na">compareTo</span><span class="o">(</span><span class="n">p2</span><span class="o">.</span><span class="na">name</span><span class="o">);</span>
</span><span class='line'>      <span class="k">if</span> <span class="o">(</span><span class="n">result</span> <span class="o">!=</span> <span class="mi">0</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>        <span class="k">return</span> <span class="n">result</span><span class="o">;</span>
</span><span class='line'>      <span class="o">}</span>
</span><span class='line'>      <span class="k">return</span> <span class="n">Ints</span><span class="o">.</span><span class="na">compare</span><span class="o">(</span><span class="n">p1</span><span class="o">.</span><span class="na">age</span><span class="o">,</span> <span class="n">p2</span><span class="o">.</span><span class="na">age</span><span class="o">);</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>  <span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>上面的代码看上去简单了一点，但还是不那么优雅简单，对此, guava有一个相当聪明的解决办法, 提供了ComparisonChain:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kd">class</span> <span class="nc">Student</span> <span class="kd">implements</span> <span class="n">Comparable</span><span class="o">&lt;</span><span class="n">Student</span><span class="o">&gt;{</span>
</span><span class='line'>    <span class="kd">public</span> <span class="n">String</span> <span class="n">name</span><span class="o">;</span>
</span><span class='line'>    <span class="kd">public</span> <span class="kt">int</span> <span class="n">age</span><span class="o">;</span>
</span><span class='line'>    <span class="kd">public</span> <span class="kt">int</span> <span class="n">score</span><span class="o">;</span>
</span><span class='line'>    <span class="n">Student</span><span class="o">(</span><span class="n">String</span> <span class="n">name</span><span class="o">,</span> <span class="kt">int</span> <span class="n">age</span><span class="o">,</span><span class="kt">int</span> <span class="n">score</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>        <span class="k">this</span><span class="o">.</span><span class="na">name</span> <span class="o">=</span> <span class="n">name</span><span class="o">;</span>
</span><span class='line'>        <span class="k">this</span><span class="o">.</span><span class="na">age</span> <span class="o">=</span> <span class="n">age</span><span class="o">;</span>
</span><span class='line'>        <span class="k">this</span><span class="o">.</span><span class="na">score</span><span class="o">=</span><span class="n">score</span><span class="o">;</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>    <span class="nd">@Override</span>
</span><span class='line'>    <span class="kd">public</span> <span class="kt">int</span> <span class="nf">compareTo</span><span class="o">(</span><span class="n">Student</span> <span class="n">other</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>        <span class="k">return</span> <span class="n">ComparisonChain</span><span class="o">.</span><span class="na">start</span><span class="o">()</span>
</span><span class='line'>        <span class="o">.</span><span class="na">compare</span><span class="o">(</span><span class="n">name</span><span class="o">,</span> <span class="n">other</span><span class="o">.</span><span class="na">name</span><span class="o">)</span>
</span><span class='line'>        <span class="o">.</span><span class="na">compare</span><span class="o">(</span><span class="n">age</span><span class="o">,</span> <span class="n">other</span><span class="o">.</span><span class="na">age</span><span class="o">)</span>
</span><span class='line'>        <span class="o">.</span><span class="na">compare</span><span class="o">(</span><span class="n">score</span><span class="o">,</span> <span class="n">other</span><span class="o">.</span><span class="na">score</span><span class="o">,</span> <span class="n">Ordering</span><span class="o">.</span><span class="na">natural</span><span class="o">().</span><span class="na">nullsLast</span><span class="o">())</span>
</span><span class='line'>        <span class="o">.</span><span class="na">result</span><span class="o">();</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'><span class="o">}</span>
</span><span class='line'><span class="kd">class</span> <span class="nc">StudentComparator</span> <span class="kd">implements</span> <span class="n">Comparator</span><span class="o">&lt;</span><span class="n">Student</span><span class="o">&gt;</span> <span class="o">{</span>
</span><span class='line'>    <span class="nd">@Override</span> <span class="kd">public</span> <span class="kt">int</span> <span class="n">compare</span><span class="o">(</span><span class="n">Student</span> <span class="n">s1</span><span class="o">,</span> <span class="n">Student</span> <span class="n">s2</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>      <span class="k">return</span> <span class="n">ComparisonChain</span><span class="o">.</span><span class="na">start</span><span class="o">()</span>
</span><span class='line'>          <span class="o">.</span><span class="na">compare</span><span class="o">(</span><span class="n">s1</span><span class="o">.</span><span class="na">name</span><span class="o">,</span> <span class="n">s2</span><span class="o">.</span><span class="na">name</span><span class="o">)</span>
</span><span class='line'>          <span class="o">.</span><span class="na">compare</span><span class="o">(</span><span class="n">s1</span><span class="o">.</span><span class="na">age</span><span class="o">,</span> <span class="n">s2</span><span class="o">.</span><span class="na">age</span><span class="o">)</span>
</span><span class='line'>          <span class="o">.</span><span class="na">compare</span><span class="o">(</span><span class="n">s1</span><span class="o">.</span><span class="na">score</span><span class="o">,</span> <span class="n">s2</span><span class="o">.</span><span class="na">score</span><span class="o">)</span>
</span><span class='line'>          <span class="o">.</span><span class="na">result</span><span class="o">();</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>  <span class="o">}</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>ComparisonChain是一个lazy的比较过程， 当比较结果为0的时候， 即相等的时候， 会继续比较下去， 出现非0的情况， 就会忽略后面的比较。ComparisonChain实现的compare和compareTo在代码可读性和性能上都有很大的提高。</p>

<p>下面是个综合应用的实例：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
<span class='line-number'>60</span>
<span class='line-number'>61</span>
<span class='line-number'>62</span>
<span class='line-number'>63</span>
<span class='line-number'>64</span>
<span class='line-number'>65</span>
<span class='line-number'>66</span>
<span class='line-number'>67</span>
<span class='line-number'>68</span>
<span class='line-number'>69</span>
<span class='line-number'>70</span>
<span class='line-number'>71</span>
<span class='line-number'>72</span>
<span class='line-number'>73</span>
<span class='line-number'>74</span>
<span class='line-number'>75</span>
<span class='line-number'>76</span>
<span class='line-number'>77</span>
<span class='line-number'>78</span>
<span class='line-number'>79</span>
<span class='line-number'>80</span>
<span class='line-number'>81</span>
<span class='line-number'>82</span>
<span class='line-number'>83</span>
<span class='line-number'>84</span>
<span class='line-number'>85</span>
<span class='line-number'>86</span>
<span class='line-number'>87</span>
<span class='line-number'>88</span>
<span class='line-number'>89</span>
<span class='line-number'>90</span>
<span class='line-number'>91</span>
<span class='line-number'>92</span>
<span class='line-number'>93</span>
<span class='line-number'>94</span>
<span class='line-number'>95</span>
<span class='line-number'>96</span>
<span class='line-number'>97</span>
<span class='line-number'>98</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kn">import</span> <span class="nn">java.util.Comparator</span><span class="o">;</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">org.junit.Test</span><span class="o">;</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">com.google.common.base.Objects</span><span class="o">;</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">com.google.common.collect.ComparisonChain</span><span class="o">;</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">com.google.common.collect.Ordering</span><span class="o">;</span>
</span><span class='line'><span class="kd">public</span> <span class="kd">class</span> <span class="nc">ObjectTest</span> <span class="o">{</span>
</span><span class='line'><span class="nd">@Test</span>
</span><span class='line'><span class="kd">public</span> <span class="kt">void</span> <span class="nf">StudentTest</span><span class="o">(){</span>
</span><span class='line'>        <span class="n">Student</span> <span class="n">student</span><span class="o">=</span><span class="k">new</span> <span class="n">Student</span><span class="o">(</span><span class="s">&quot;peida&quot;</span><span class="o">,</span><span class="mi">23</span><span class="o">,</span><span class="mi">80</span><span class="o">);</span>
</span><span class='line'>        <span class="n">Student</span> <span class="n">student1</span><span class="o">=</span><span class="k">new</span> <span class="n">Student</span><span class="o">(</span><span class="s">&quot;aida&quot;</span><span class="o">,</span><span class="mi">23</span><span class="o">,</span><span class="mi">36</span><span class="o">);</span>
</span><span class='line'>        <span class="n">Student</span> <span class="n">student2</span><span class="o">=</span><span class="k">new</span> <span class="n">Student</span><span class="o">(</span><span class="s">&quot;jerry&quot;</span><span class="o">,</span><span class="mi">24</span><span class="o">,</span><span class="mi">90</span><span class="o">);</span>
</span><span class='line'>        <span class="n">Student</span> <span class="n">student3</span><span class="o">=</span><span class="k">new</span> <span class="n">Student</span><span class="o">(</span><span class="s">&quot;peida&quot;</span><span class="o">,</span><span class="mi">23</span><span class="o">,</span><span class="mi">80</span><span class="o">);</span>
</span><span class='line'>        <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">&quot;==========equals===========&quot;</span><span class="o">);</span>
</span><span class='line'>        <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">student</span><span class="o">.</span><span class="na">equals</span><span class="o">(</span><span class="n">student2</span><span class="o">));</span>
</span><span class='line'>        <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">student</span><span class="o">.</span><span class="na">equals</span><span class="o">(</span><span class="n">student1</span><span class="o">));</span>
</span><span class='line'>        <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">student</span><span class="o">.</span><span class="na">equals</span><span class="o">(</span><span class="n">student3</span><span class="o">));</span>
</span><span class='line'>        <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">&quot;==========hashCode===========&quot;</span><span class="o">);</span>
</span><span class='line'>        <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">student</span><span class="o">.</span><span class="na">hashCode</span><span class="o">());</span>
</span><span class='line'>        <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">student1</span><span class="o">.</span><span class="na">hashCode</span><span class="o">());</span>
</span><span class='line'>        <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">student3</span><span class="o">.</span><span class="na">hashCode</span><span class="o">());</span>
</span><span class='line'>        <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">student2</span><span class="o">.</span><span class="na">hashCode</span><span class="o">());</span>
</span><span class='line'>          <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">&quot;==========toString===========&quot;</span><span class="o">);</span>
</span><span class='line'>        <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">student</span><span class="o">.</span><span class="na">toString</span><span class="o">());</span>
</span><span class='line'>        <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">student1</span><span class="o">.</span><span class="na">toString</span><span class="o">());</span>
</span><span class='line'>        <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">student2</span><span class="o">.</span><span class="na">toString</span><span class="o">());</span>
</span><span class='line'>        <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">student3</span><span class="o">.</span><span class="na">toString</span><span class="o">());</span>
</span><span class='line'>        <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">&quot;==========compareTo===========&quot;</span><span class="o">);</span>
</span><span class='line'>        <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">student</span><span class="o">.</span><span class="na">compareTo</span><span class="o">(</span><span class="n">student1</span><span class="o">));</span>
</span><span class='line'>        <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">student</span><span class="o">.</span><span class="na">compareTo</span><span class="o">(</span><span class="n">student2</span><span class="o">));</span>
</span><span class='line'>        <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">student2</span><span class="o">.</span><span class="na">compareTo</span><span class="o">(</span><span class="n">student1</span><span class="o">));</span>
</span><span class='line'>        <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">student2</span><span class="o">.</span><span class="na">compareTo</span><span class="o">(</span><span class="n">student</span><span class="o">));</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'><span class="o">}</span>
</span><span class='line'><span class="kd">class</span> <span class="nc">Student</span> <span class="kd">implements</span> <span class="n">Comparable</span><span class="o">&lt;</span><span class="n">Student</span><span class="o">&gt;{</span>
</span><span class='line'>    <span class="kd">public</span> <span class="n">String</span> <span class="n">name</span><span class="o">;</span>
</span><span class='line'>    <span class="kd">public</span> <span class="kt">int</span> <span class="n">age</span><span class="o">;</span>
</span><span class='line'>    <span class="kd">public</span> <span class="kt">int</span> <span class="n">score</span><span class="o">;</span>
</span><span class='line'>    <span class="n">Student</span><span class="o">(</span><span class="n">String</span> <span class="n">name</span><span class="o">,</span> <span class="kt">int</span> <span class="n">age</span><span class="o">,</span><span class="kt">int</span> <span class="n">score</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>        <span class="k">this</span><span class="o">.</span><span class="na">name</span> <span class="o">=</span> <span class="n">name</span><span class="o">;</span>
</span><span class='line'>        <span class="k">this</span><span class="o">.</span><span class="na">age</span> <span class="o">=</span> <span class="n">age</span><span class="o">;</span>
</span><span class='line'>        <span class="k">this</span><span class="o">.</span><span class="na">score</span><span class="o">=</span><span class="n">score</span><span class="o">;</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>    <span class="nd">@Override</span>
</span><span class='line'>    <span class="kd">public</span> <span class="kt">int</span> <span class="nf">hashCode</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>        <span class="k">return</span> <span class="n">Objects</span><span class="o">.</span><span class="na">hashCode</span><span class="o">(</span><span class="n">name</span><span class="o">,</span> <span class="n">age</span><span class="o">);</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>    <span class="nd">@Override</span>
</span><span class='line'>    <span class="kd">public</span> <span class="kt">boolean</span> <span class="nf">equals</span><span class="o">(</span><span class="n">Object</span> <span class="n">obj</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>        <span class="k">if</span> <span class="o">(</span><span class="n">obj</span> <span class="k">instanceof</span> <span class="n">Student</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>            <span class="n">Student</span> <span class="n">that</span> <span class="o">=</span> <span class="o">(</span><span class="n">Student</span><span class="o">)</span> <span class="n">obj</span><span class="o">;</span>
</span><span class='line'>            <span class="k">return</span> <span class="n">Objects</span><span class="o">.</span><span class="na">equal</span><span class="o">(</span><span class="n">name</span><span class="o">,</span> <span class="n">that</span><span class="o">.</span><span class="na">name</span><span class="o">)</span>
</span><span class='line'>                    <span class="o">&amp;&amp;</span> <span class="n">Objects</span><span class="o">.</span><span class="na">equal</span><span class="o">(</span><span class="n">age</span><span class="o">,</span> <span class="n">that</span><span class="o">.</span><span class="na">age</span><span class="o">)</span>
</span><span class='line'>                    <span class="o">&amp;&amp;</span> <span class="n">Objects</span><span class="o">.</span><span class="na">equal</span><span class="o">(</span><span class="n">score</span><span class="o">,</span> <span class="n">that</span><span class="o">.</span><span class="na">score</span><span class="o">);</span>
</span><span class='line'>        <span class="o">}</span>
</span><span class='line'>        <span class="k">return</span> <span class="kc">false</span><span class="o">;</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>    <span class="nd">@Override</span>
</span><span class='line'>    <span class="kd">public</span> <span class="n">String</span> <span class="nf">toString</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>        <span class="k">return</span> <span class="n">Objects</span><span class="o">.</span><span class="na">toStringHelper</span><span class="o">(</span><span class="k">this</span><span class="o">)</span>
</span><span class='line'>                <span class="o">.</span><span class="na">addValue</span><span class="o">(</span><span class="n">name</span><span class="o">)</span>
</span><span class='line'>                <span class="o">.</span><span class="na">addValue</span><span class="o">(</span><span class="n">age</span><span class="o">)</span>
</span><span class='line'>                <span class="o">.</span><span class="na">addValue</span><span class="o">(</span><span class="n">score</span><span class="o">)</span>
</span><span class='line'>                <span class="o">.</span><span class="na">toString</span><span class="o">();</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>    <span class="nd">@Override</span>
</span><span class='line'>    <span class="kd">public</span> <span class="kt">int</span> <span class="nf">compareTo</span><span class="o">(</span><span class="n">Student</span> <span class="n">other</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>        <span class="k">return</span> <span class="n">ComparisonChain</span><span class="o">.</span><span class="na">start</span><span class="o">()</span>
</span><span class='line'>        <span class="o">.</span><span class="na">compare</span><span class="o">(</span><span class="n">name</span><span class="o">,</span> <span class="n">other</span><span class="o">.</span><span class="na">name</span><span class="o">)</span>
</span><span class='line'>        <span class="o">.</span><span class="na">compare</span><span class="o">(</span><span class="n">age</span><span class="o">,</span> <span class="n">other</span><span class="o">.</span><span class="na">age</span><span class="o">)</span>
</span><span class='line'>        <span class="o">.</span><span class="na">compare</span><span class="o">(</span><span class="n">score</span><span class="o">,</span> <span class="n">other</span><span class="o">.</span><span class="na">score</span><span class="o">,</span> <span class="n">Ordering</span><span class="o">.</span><span class="na">natural</span><span class="o">().</span><span class="na">nullsLast</span><span class="o">())</span>
</span><span class='line'>        <span class="o">.</span><span class="na">result</span><span class="o">();</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'><span class="o">}</span>
</span><span class='line'><span class="kd">class</span> <span class="nc">StudentComparator</span> <span class="kd">implements</span> <span class="n">Comparator</span><span class="o">&lt;</span><span class="n">Student</span><span class="o">&gt;</span> <span class="o">{</span>
</span><span class='line'>    <span class="nd">@Override</span> <span class="kd">public</span> <span class="kt">int</span> <span class="n">compare</span><span class="o">(</span><span class="n">Student</span> <span class="n">s1</span><span class="o">,</span> <span class="n">Student</span> <span class="n">s2</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>      <span class="k">return</span> <span class="n">ComparisonChain</span><span class="o">.</span><span class="na">start</span><span class="o">()</span>
</span><span class='line'>          <span class="o">.</span><span class="na">compare</span><span class="o">(</span><span class="n">s1</span><span class="o">.</span><span class="na">name</span><span class="o">,</span> <span class="n">s2</span><span class="o">.</span><span class="na">name</span><span class="o">)</span>
</span><span class='line'>          <span class="o">.</span><span class="na">compare</span><span class="o">(</span><span class="n">s1</span><span class="o">.</span><span class="na">age</span><span class="o">,</span> <span class="n">s2</span><span class="o">.</span><span class="na">age</span><span class="o">)</span>
</span><span class='line'>          <span class="o">.</span><span class="na">compare</span><span class="o">(</span><span class="n">s1</span><span class="o">.</span><span class="na">score</span><span class="o">,</span> <span class="n">s2</span><span class="o">.</span><span class="na">score</span><span class="o">)</span>
</span><span class='line'>          <span class="o">.</span><span class="na">result</span><span class="o">();</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>  <span class="o">}</span>
</span><span class='line'><span class="c1">//=============运行输出===========================</span>
</span><span class='line'><span class="o">==========</span><span class="n">equals</span><span class="o">===========</span>
</span><span class='line'><span class="kc">false</span>
</span><span class='line'><span class="kc">false</span>
</span><span class='line'><span class="kc">true</span>
</span><span class='line'><span class="o">==========</span><span class="n">hashCode</span><span class="o">===========</span>
</span><span class='line'><span class="o">-</span><span class="mi">991998617</span>
</span><span class='line'><span class="o">-</span><span class="mi">991998617</span>
</span><span class='line'><span class="o">-</span><span class="mi">1163491205</span>
</span><span class='line'><span class="o">==========</span><span class="n">toString</span><span class="o">===========</span>
</span><span class='line'><span class="n">Student</span><span class="o">{</span><span class="n">peida</span><span class="o">,</span> <span class="mi">23</span><span class="o">,</span> <span class="mi">80</span><span class="o">}</span>
</span><span class='line'><span class="n">Student</span><span class="o">{</span><span class="n">aida</span><span class="o">,</span> <span class="mi">23</span><span class="o">,</span> <span class="mi">36</span><span class="o">}</span>
</span><span class='line'><span class="n">Student</span><span class="o">{</span><span class="n">jerry</span><span class="o">,</span> <span class="mi">24</span><span class="o">,</span> <span class="mi">90</span><span class="o">}</span>
</span><span class='line'><span class="n">Student</span><span class="o">{</span><span class="n">peida</span><span class="o">,</span> <span class="mi">23</span><span class="o">,</span> <span class="mi">80</span><span class="o">}</span>
</span><span class='line'><span class="o">==========</span><span class="n">compareTo</span><span class="o">===========</span>
</span><span class='line'><span class="o">-</span><span class="mi">1</span>
</span></code></pre></td></tr></table></div></figure>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Gson的使用指南]]></title>
    <link href="http://ajia.github.com/blog/2013/05/31/gsonde-shi-yong-zhi-nan/"/>
    <updated>2013-05-31T13:42:00+08:00</updated>
    <id>http://ajia.github.com/blog/2013/05/31/gsonde-shi-yong-zhi-nan</id>
    <content type="html"><![CDATA[<h1>介绍</h1>

<p>Gson是一个可以把Java对象转化成JSON格式的字符串，也可以从一个JSON字符串转换为一个Java对象。Gson是一个开源项目，<a href="http://code.google.com/p/google-gson">这里是地址</a></p>

<!-- more -->


<h1>开始使用</h1>

<p>可以使用</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="k">new</span> <span class="nf">Gson</span><span class="o">()</span>
</span></code></pre></td></tr></table></div></figure>


<p>来创建主要的类Gson的实例。也可以使用GsonBuilder来定制你需要的Gson实例，比如版本控制等等。</p>

<h3>基本的例子</h3>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="o">(</span><span class="n">Serialization</span><span class="o">)</span>
</span><span class='line'><span class="n">Gson</span> <span class="n">gson</span> <span class="o">=</span> <span class="k">new</span> <span class="n">Gson</span><span class="o">();</span>
</span><span class='line'><span class="n">gson</span><span class="o">.</span><span class="na">toJson</span><span class="o">(</span><span class="mi">1</span><span class="o">);</span>            <span class="o">==&gt;</span> <span class="n">prints</span> <span class="mi">1</span>
</span><span class='line'><span class="n">gson</span><span class="o">.</span><span class="na">toJson</span><span class="o">(</span><span class="s">&quot;abcd&quot;</span><span class="o">);</span>       <span class="o">==&gt;</span> <span class="n">prints</span> <span class="s">&quot;abcd&quot;</span>
</span><span class='line'><span class="n">gson</span><span class="o">.</span><span class="na">toJson</span><span class="o">(</span><span class="k">new</span> <span class="n">Long</span><span class="o">(</span><span class="mi">10</span><span class="o">));</span> <span class="o">==&gt;</span> <span class="n">prints</span> <span class="mi">10</span>
</span><span class='line'><span class="kt">int</span><span class="o">[]</span> <span class="n">values</span> <span class="o">=</span> <span class="o">{</span> <span class="mi">1</span> <span class="o">};</span>
</span><span class='line'><span class="n">gson</span><span class="o">.</span><span class="na">toJson</span><span class="o">(</span><span class="n">values</span><span class="o">);</span>       <span class="o">==&gt;</span> <span class="n">prints</span> <span class="o">[</span><span class="mi">1</span><span class="o">]</span>
</span><span class='line'><span class="o">(</span><span class="n">Deserialization</span><span class="o">)</span>
</span><span class='line'><span class="kt">int</span> <span class="n">one</span> <span class="o">=</span> <span class="n">gson</span><span class="o">.</span><span class="na">fromJson</span><span class="o">(</span><span class="s">&quot;1&quot;</span><span class="o">,</span> <span class="kt">int</span><span class="o">.</span><span class="na">class</span><span class="o">);</span>
</span><span class='line'><span class="n">Integer</span> <span class="n">one</span> <span class="o">=</span> <span class="n">gson</span><span class="o">.</span><span class="na">fromJson</span><span class="o">(</span><span class="s">&quot;1&quot;</span><span class="o">,</span> <span class="n">Integer</span><span class="o">.</span><span class="na">class</span><span class="o">);</span>
</span><span class='line'><span class="n">Long</span> <span class="n">one</span> <span class="o">=</span> <span class="n">gson</span><span class="o">.</span><span class="na">fromJson</span><span class="o">(</span><span class="s">&quot;1&quot;</span><span class="o">,</span> <span class="n">Long</span><span class="o">.</span><span class="na">class</span><span class="o">);</span>
</span><span class='line'><span class="n">Boolean</span> <span class="kc">false</span> <span class="o">=</span> <span class="n">gson</span><span class="o">.</span><span class="na">fromJson</span><span class="o">(</span><span class="s">&quot;false&quot;</span><span class="o">,</span> <span class="n">Boolean</span><span class="o">.</span><span class="na">class</span><span class="o">);</span>
</span><span class='line'><span class="n">String</span> <span class="n">str</span> <span class="o">=</span> <span class="n">gson</span><span class="o">.</span><span class="na">fromJson</span><span class="o">(</span><span class="s">&quot;\&quot;abc\&quot;&quot;</span><span class="o">,</span> <span class="n">String</span><span class="o">.</span><span class="na">class</span><span class="o">);</span>
</span><span class='line'><span class="n">String</span> <span class="n">anotherStr</span> <span class="o">=</span> <span class="n">gson</span><span class="o">.</span><span class="na">fromJson</span><span class="o">(</span><span class="s">&quot;[\&quot;abc\&quot;]&quot;</span><span class="o">,</span> <span class="n">String</span><span class="o">.</span><span class="na">class</span><span class="o">);</span>
</span></code></pre></td></tr></table></div></figure>


<p></p>

<h3>关于对象的例子</h3>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kd">class</span> <span class="nc">BagOfPrimitives</span> <span class="o">{</span>
</span><span class='line'>  <span class="kd">private</span> <span class="kt">int</span> <span class="n">value1</span> <span class="o">=</span> <span class="mi">1</span><span class="o">;</span>
</span><span class='line'>  <span class="kd">private</span> <span class="n">String</span> <span class="n">value2</span> <span class="o">=</span> <span class="s">&quot;abc&quot;</span><span class="o">;</span>
</span><span class='line'>  <span class="kd">private</span> <span class="kd">transient</span> <span class="kt">int</span> <span class="n">value3</span> <span class="o">=</span> <span class="mi">3</span><span class="o">;</span>
</span><span class='line'>  <span class="n">BagOfPrimitives</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>    <span class="c1">// no-args constructor</span>
</span><span class='line'>  <span class="o">}</span>
</span><span class='line'><span class="o">}</span>
</span><span class='line'><span class="o">(</span><span class="n">Serialization</span><span class="o">)</span>
</span><span class='line'><span class="n">BagOfPrimitives</span> <span class="n">obj</span> <span class="o">=</span> <span class="k">new</span> <span class="n">BagOfPrimitives</span><span class="o">();</span>
</span><span class='line'><span class="n">Gson</span> <span class="n">gson</span> <span class="o">=</span> <span class="k">new</span> <span class="n">Gson</span><span class="o">();</span>
</span><span class='line'><span class="n">String</span> <span class="n">json</span> <span class="o">=</span> <span class="n">gson</span><span class="o">.</span><span class="na">toJson</span><span class="o">(</span><span class="n">obj</span><span class="o">);</span>
</span><span class='line'><span class="o">==&gt;</span> <span class="n">json</span> <span class="n">is</span> <span class="o">{</span><span class="s">&quot;value1&quot;</span><span class="o">:</span><span class="mi">1</span><span class="o">,</span><span class="s">&quot;value2&quot;</span><span class="o">:</span><span class="s">&quot;abc&quot;</span><span class="o">}</span>
</span><span class='line'><span class="n">Note</span> <span class="n">that</span> <span class="n">you</span> <span class="n">can</span> <span class="n">not</span> <span class="n">serialize</span> <span class="n">objects</span> <span class="n">with</span> <span class="n">circular</span> <span class="n">references</span> <span class="n">since</span> <span class="n">that</span> <span class="n">will</span> <span class="n">result</span> <span class="n">in</span> <span class="n">infinite</span> <span class="n">recursion</span><span class="o">.</span>
</span><span class='line'><span class="o">(</span><span class="n">Deserialization</span><span class="o">)</span>
</span><span class='line'><span class="n">BagOfPrimitives</span> <span class="n">obj2</span> <span class="o">=</span> <span class="n">gson</span><span class="o">.</span><span class="na">fromJson</span><span class="o">(</span><span class="n">json</span><span class="o">,</span> <span class="n">BagOfPrimitives</span><span class="o">.</span><span class="na">class</span><span class="o">);</span>
</span><span class='line'><span class="o">==&gt;</span> <span class="n">obj2</span> <span class="n">is</span> <span class="n">just</span> <span class="n">like</span> <span class="n">obj</span>
</span></code></pre></td></tr></table></div></figure>


<p>
以下是转换对象的时候几点事项：
* 建议使用private的成员变量
* 没有必要对所有的成员变量使用任何的注解来表示这个变量需要被序列化或反序列化
* 如果一个成员变量被关键字transient修饰，（默认）那么它将在序列化和反序列化的时候被忽略
* 这样处理nulls是正确的
<strong> 序列化的时候，一个null变量在输出的时候将被跳过
</strong> 反序列化的时候，JSON中一个丢失的实体会被设置为null
* 如果一个成员变量被synthetic修饰，在序列化和反序列化的时候会被忽略
* 内部类、匿名类、局部类会被忽略掉。</p>

<h3>数组的例子</h3>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="n">Gson</span> <span class="n">gson</span> <span class="o">=</span> <span class="k">new</span> <span class="n">Gson</span><span class="o">();</span>
</span><span class='line'><span class="kt">int</span><span class="o">[]</span> <span class="n">ints</span> <span class="o">=</span> <span class="o">{</span><span class="mi">1</span><span class="o">,</span> <span class="mi">2</span><span class="o">,</span> <span class="mi">3</span><span class="o">,</span> <span class="mi">4</span><span class="o">,</span> <span class="mi">5</span><span class="o">};</span>
</span><span class='line'><span class="n">String</span><span class="o">[]</span> <span class="n">strings</span> <span class="o">=</span> <span class="o">{</span><span class="s">&quot;abc&quot;</span><span class="o">,</span> <span class="s">&quot;def&quot;</span><span class="o">,</span> <span class="s">&quot;ghi&quot;</span><span class="o">};</span>
</span><span class='line'><span class="o">(</span><span class="n">Serialization</span><span class="o">)</span>
</span><span class='line'><span class="n">gson</span><span class="o">.</span><span class="na">toJson</span><span class="o">(</span><span class="n">ints</span><span class="o">);</span>     <span class="o">==&gt;</span> <span class="n">prints</span> <span class="o">[</span><span class="mi">1</span><span class="o">,</span><span class="mi">2</span><span class="o">,</span><span class="mi">3</span><span class="o">,</span><span class="mi">4</span><span class="o">,</span><span class="mi">5</span><span class="o">]</span>
</span><span class='line'><span class="n">gson</span><span class="o">.</span><span class="na">toJson</span><span class="o">(</span><span class="n">strings</span><span class="o">);</span>  <span class="o">==&gt;</span> <span class="n">prints</span> <span class="o">[</span><span class="s">&quot;abc&quot;</span><span class="o">,</span> <span class="s">&quot;def&quot;</span><span class="o">,</span> <span class="s">&quot;ghi&quot;</span><span class="o">]</span>
</span><span class='line'><span class="o">(</span><span class="n">Deserialization</span><span class="o">)</span>
</span><span class='line'><span class="kt">int</span><span class="o">[]</span> <span class="n">ints2</span> <span class="o">=</span> <span class="n">gson</span><span class="o">.</span><span class="na">fromJson</span><span class="o">(</span><span class="s">&quot;[1,2,3,4,5]&quot;</span><span class="o">,</span> <span class="kt">int</span><span class="o">[].</span><span class="na">class</span><span class="o">);</span>
</span><span class='line'><span class="o">==&gt;</span> <span class="n">ints2</span> <span class="n">will</span> <span class="n">be</span> <span class="n">same</span> <span class="n">as</span> <span class="n">ints</span>
</span></code></pre></td></tr></table></div></figure>


<p></p>

<h3>集合的例子</h3>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="n">Gson</span> <span class="n">gson</span> <span class="o">=</span> <span class="k">new</span> <span class="n">Gson</span><span class="o">();</span>
</span><span class='line'><span class="n">Collection</span><span class="o">&lt;</span><span class="n">Integer</span><span class="o">&gt;</span> <span class="n">ints</span> <span class="o">=</span> <span class="n">Lists</span><span class="o">.</span><span class="na">immutableList</span><span class="o">(</span><span class="mi">1</span><span class="o">,</span><span class="mi">2</span><span class="o">,</span><span class="mi">3</span><span class="o">,</span><span class="mi">4</span><span class="o">,</span><span class="mi">5</span><span class="o">);</span>
</span><span class='line'><span class="o">(</span><span class="n">Serialization</span><span class="o">)</span>
</span><span class='line'><span class="n">String</span> <span class="n">json</span> <span class="o">=</span> <span class="n">gson</span><span class="o">.</span><span class="na">toJson</span><span class="o">(</span><span class="n">ints</span><span class="o">);</span> <span class="o">==&gt;</span> <span class="n">json</span> <span class="n">is</span> <span class="o">[</span><span class="mi">1</span><span class="o">,</span><span class="mi">2</span><span class="o">,</span><span class="mi">3</span><span class="o">,</span><span class="mi">4</span><span class="o">,</span><span class="mi">5</span><span class="o">]</span>
</span><span class='line'><span class="o">(</span><span class="n">Deserialization</span><span class="o">)</span>
</span><span class='line'><span class="n">Type</span> <span class="n">collectionType</span> <span class="o">=</span> <span class="k">new</span> <span class="n">TypeToken</span><span class="o">&lt;</span><span class="n">Collection</span><span class="o">&lt;</span><span class="n">Integer</span><span class="o">&gt;&gt;(){}.</span><span class="na">getType</span><span class="o">();</span>
</span><span class='line'><span class="n">Collection</span><span class="o">&lt;</span><span class="n">Integer</span><span class="o">&gt;</span> <span class="n">ints2</span> <span class="o">=</span> <span class="n">gson</span><span class="o">.</span><span class="na">fromJson</span><span class="o">(</span><span class="n">json</span><span class="o">,</span> <span class="n">collectionType</span><span class="o">);</span>
</span><span class='line'><span class="n">ints2</span> <span class="n">is</span> <span class="n">same</span> <span class="n">as</span> <span class="n">ints</span>
</span></code></pre></td></tr></table></div></figure>


<h4>序列化和反序列化通用的类型</h4>

<p>当你在调用toJson(obj)的时候，Gson会调用obj.getClass()来获得即将被序列化的对象的成员变量。然后调用fromJson(json, MyClass.class)方法来得到MyClass的对象。如果这个类没有使用范性的情况下是正常的。但是，如果是使用范型的，由于java的类型擦除机制，就不能正常工作了。如：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kd">class</span> <span class="nc">Foo</span><span class="o">&lt;</span><span class="n">T</span><span class="o">&gt;</span> <span class="o">{</span>
</span><span class='line'>  <span class="n">T</span> <span class="n">value</span><span class="o">;</span>
</span><span class='line'><span class="o">}</span>
</span><span class='line'><span class="n">Gson</span> <span class="n">gson</span> <span class="o">=</span> <span class="k">new</span> <span class="n">Gson</span><span class="o">();</span>
</span><span class='line'><span class="n">Foo</span><span class="o">&lt;</span><span class="n">Bar</span><span class="o">&gt;</span> <span class="n">foo</span> <span class="o">=</span> <span class="k">new</span> <span class="n">Foo</span><span class="o">&lt;</span><span class="n">Bar</span><span class="o">&gt;();</span>
</span><span class='line'><span class="n">gson</span><span class="o">.</span><span class="na">toJson</span><span class="o">(</span><span class="n">foo</span><span class="o">);</span> <span class="c1">// May not serialize foo.value correctly</span>
</span><span class='line'><span class="n">gson</span><span class="o">.</span><span class="na">fromJson</span><span class="o">(</span><span class="n">json</span><span class="o">,</span> <span class="n">foo</span><span class="o">.</span><span class="na">getClass</span><span class="o">());</span> <span class="c1">// Fails to deserialize foo.value as Bar</span>
</span></code></pre></td></tr></table></div></figure>


<p></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[java插件之timer]]></title>
    <link href="http://ajia.github.com/blog/2013/05/24/javacha-jian-zhi-timer/"/>
    <updated>2013-05-24T14:20:00+08:00</updated>
    <id>http://ajia.github.com/blog/2013/05/24/javacha-jian-zhi-timer</id>
    <content type="html"><![CDATA[<p>JQuery Timers应用知识<br/>
提供了三个函式<br/>
1. everyTime(时间间隔, [计时器名称], 函式名称, [次数限制], [等待函式程序完成])</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="cm">/*************************************************************</span>
</span><span class='line'><span class="cm">*   everyTime(时间间隔, [计时器名称], 函式名称, [次数限制], [等待函式程序完成])</span>
</span><span class='line'><span class="cm">*************************************************************/</span>
</span><span class='line'><span class="c1">//每1秒执行函式test()</span>
</span><span class='line'><span class="kd">function</span> <span class="nx">test</span><span class="p">(){</span>
</span><span class='line'>   <span class="c1">//do something...</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'><span class="nx">$</span><span class="p">(</span><span class="s1">&#39;body&#39;</span><span class="p">).</span><span class="nx">everyTime</span><span class="p">(</span><span class="s1">&#39;1s&#39;</span><span class="p">,</span><span class="nx">test</span><span class="p">);</span>
</span><span class='line'><span class="c1">//每1秒执行</span>
</span><span class='line'><span class="nx">$</span><span class="p">(</span><span class="s1">&#39;body&#39;</span><span class="p">).</span><span class="nx">everyTime</span><span class="p">(</span><span class="s1">&#39;1s&#39;</span><span class="p">,</span><span class="kd">function</span><span class="p">(){</span>
</span><span class='line'><span class="c1">//do something...</span>
</span><span class='line'><span class="p">});</span>
</span><span class='line'><span class="c1">//每1秒执行，并命名计时器名称为A</span>
</span><span class='line'><span class="nx">$</span><span class="p">(</span><span class="s1">&#39;body&#39;</span><span class="p">).</span><span class="nx">everyTime</span><span class="p">(</span><span class="s1">&#39;1s&#39;</span><span class="p">,</span><span class="s1">&#39;A&#39;</span><span class="p">,</span><span class="kd">function</span><span class="p">(){</span>
</span><span class='line'><span class="c1">//do something...</span>
</span><span class='line'><span class="p">});</span>
</span><span class='line'><span class="c1">//每20秒执行，最多5次，并命名计时器名称为B</span>
</span><span class='line'><span class="nx">$</span><span class="p">(</span><span class="s1">&#39;body&#39;</span><span class="p">).</span><span class="nx">everyTime</span><span class="p">(</span><span class="s1">&#39;2das&#39;</span><span class="p">,</span><span class="s1">&#39;B&#39;</span><span class="p">,</span><span class="kd">function</span><span class="p">(){</span>
</span><span class='line'><span class="c1">//do something...</span>
</span><span class='line'><span class="p">},</span><span class="mi">5</span><span class="p">);</span>
</span><span class='line'><span class="c1">//每20秒执行，无限次，并命名计时器名称为C</span>
</span><span class='line'><span class="c1">//若时间间隔抵到，但函式程序仍未完成则需等待执行函式完成后再继续计时</span>
</span><span class='line'><span class="nx">$</span><span class="p">(</span><span class="s1">&#39;body&#39;</span><span class="p">).</span><span class="nx">everyTime</span><span class="p">(</span><span class="s1">&#39;2das&#39;</span><span class="p">,</span><span class="s1">&#39;C&#39;</span><span class="p">,</span><span class="kd">function</span><span class="p">(){</span>
</span><span class='line'>    <span class="c1">//执行一个会超过20秒以上的程式</span>
</span><span class='line'><span class="p">},</span><span class="mi">0</span><span class="p">,</span><span class="kc">true</span><span class="p">);</span>
</span></code></pre></td></tr></table></div></figure>


<!-- more -->


<ol>
<li>oneTime(时间间隔, [计时器名称], 呼叫的函式)</li>
</ol>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="cm">/***********************************************************</span>
</span><span class='line'><span class="cm">*   oneTime(时间间隔, [计时器名称], 呼叫的函式)</span>
</span><span class='line'><span class="cm">***********************************************************/</span>
</span><span class='line'><span class="c1">//倒数10秒后执行</span>
</span><span class='line'><span class="nx">$</span><span class="p">(</span><span class="s1">&#39;body&#39;</span><span class="p">).</span><span class="nx">oneTime</span><span class="p">(</span><span class="s1">&#39;1das&#39;</span><span class="p">,</span><span class="kd">function</span><span class="p">(){</span>
</span><span class='line'><span class="c1">//do something...</span>
</span><span class='line'><span class="p">});</span>
</span><span class='line'><span class="c1">//倒数100秒后执行，并命名计时器名称为D</span>
</span><span class='line'><span class="nx">$</span><span class="p">(</span><span class="s1">&#39;body&#39;</span><span class="p">).</span><span class="nx">oneTime</span><span class="p">(</span><span class="s1">&#39;1hs&#39;</span><span class="p">,</span><span class="s1">&#39;D&#39;</span><span class="p">,</span><span class="kd">function</span><span class="p">(){</span>
</span><span class='line'><span class="c1">//do something...</span>
</span><span class='line'><span class="p">});</span>
</span></code></pre></td></tr></table></div></figure>


<ol>
<li>stopTime ([计时器名称], [函式名称])</li>
</ol>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="cm">/************************************************************</span>
</span><span class='line'><span class="cm">*  stopTime ([计时器名称], [函式名称])</span>
</span><span class='line'><span class="cm">************************************************************/</span>
</span><span class='line'><span class="c1">//停止所有的在$(&#39;body&#39;)上计时器</span>
</span><span class='line'><span class="nx">$</span><span class="p">(</span><span class="s1">&#39;body&#39;</span><span class="p">).</span><span class="nx">stopTime</span> <span class="p">();</span>
</span><span class='line'><span class="c1">//停止$(&#39;body&#39;)上名称为A的计时器</span>
</span><span class='line'><span class="nx">$</span><span class="p">(</span><span class="s1">&#39;body&#39;</span><span class="p">).</span><span class="nx">stopTime</span> <span class="p">(</span><span class="s1">&#39;A&#39;</span><span class="p">);</span>
</span><span class='line'><span class="c1">//停止$(&#39;body&#39;)上所有呼叫test()的计时器</span>
</span><span class='line'><span class="nx">$</span><span class="p">(</span><span class="s1">&#39;body&#39;</span><span class="p">).</span><span class="nx">stopTime</span> <span class="p">(</span><span class="nx">test</span><span class="p">);</span>
</span></code></pre></td></tr></table></div></figure>


<p></p>

<p>自定义时间单位
打开源代码
找到</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="nx">powers</span><span class="o">:</span> <span class="p">{</span>
</span><span class='line'>   <span class="c1">// Yeah this is major overkill...</span>
</span><span class='line'>   <span class="s1">&#39;ms&#39;</span><span class="o">:</span> <span class="mi">1</span><span class="p">,</span>
</span><span class='line'>   <span class="s1">&#39;cs&#39;</span><span class="o">:</span> <span class="mi">10</span><span class="p">,</span>
</span><span class='line'>   <span class="s1">&#39;ds&#39;</span><span class="o">:</span> <span class="mi">100</span><span class="p">,</span>
</span><span class='line'>   <span class="s1">&#39;s&#39;</span><span class="o">:</span> <span class="mi">1000</span><span class="p">,</span>
</span><span class='line'>   <span class="s1">&#39;das&#39;</span><span class="o">:</span> <span class="mi">10000</span><span class="p">,</span>
</span><span class='line'>   <span class="s1">&#39;hs&#39;</span><span class="o">:</span> <span class="mi">100000</span><span class="p">,</span>
</span><span class='line'>   <span class="s1">&#39;ks&#39;</span><span class="o">:</span> <span class="mi">1000000</span>
</span><span class='line'>  <span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[joda日期计算]]></title>
    <link href="http://ajia.github.com/blog/2013/05/24/jodari-qi-ji-suan/"/>
    <updated>2013-05-24T10:19:00+08:00</updated>
    <id>http://ajia.github.com/blog/2013/05/24/jodari-qi-ji-suan</id>
    <content type="html"><![CDATA[<p>Joda-Time提供了一组Java类包用于处理包括ISO8601标准在内的date和time。可以利用它把JDK Date和Calendar类完全替换掉，而且仍然能够提供很好的集成。<a href="http://joda-time.sourceforge.net/">项目地址</a></p>

<!-- more -->


<p>获取DateTime:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="c1">//方法一：取系统点间  </span>
</span><span class='line'><span class="n">DateTime</span> <span class="n">dt1</span> <span class="o">=</span> <span class="k">new</span> <span class="n">DateTime</span><span class="o">();</span>
</span><span class='line'><span class="c1">//方法二：通过java.util.Date对象生成  </span>
</span><span class='line'><span class="n">DateTime</span> <span class="n">dt2</span> <span class="o">=</span> <span class="k">new</span> <span class="n">DateTime</span><span class="o">(</span><span class="k">new</span> <span class="n">Date</span><span class="o">());</span>
</span><span class='line'><span class="c1">//方法三：指定年月日点分秒生成(参数依次是：年,月,日,时,分,秒,毫秒)  </span>
</span><span class='line'><span class="n">DateTime</span> <span class="n">dt3</span> <span class="o">=</span> <span class="k">new</span> <span class="n">DateTime</span><span class="o">(</span><span class="mi">2012</span><span class="o">,</span> <span class="mi">5</span><span class="o">,</span> <span class="mi">20</span><span class="o">,</span> <span class="mi">13</span><span class="o">,</span> <span class="mi">14</span><span class="o">,</span> <span class="mi">0</span><span class="o">,</span> <span class="mi">0</span><span class="o">);</span>
</span><span class='line'><span class="c1">//方法四：ISO8601形式生成  </span>
</span><span class='line'><span class="n">DateTime</span> <span class="n">dt4</span> <span class="o">=</span> <span class="k">new</span> <span class="n">DateTime</span><span class="o">(</span><span class="s">&quot;2012-05-20&quot;</span><span class="o">);</span>
</span><span class='line'><span class="n">DateTime</span> <span class="n">dt5</span> <span class="o">=</span> <span class="k">new</span> <span class="n">DateTime</span><span class="o">(</span><span class="s">&quot;2012-05-20T13:14:00&quot;</span><span class="o">);</span>
</span><span class='line'><span class="c1">//只需要年月日的时候  </span>
</span><span class='line'><span class="n">LocalDate</span> <span class="n">localDate</span> <span class="o">=</span> <span class="k">new</span> <span class="n">LocalDate</span><span class="o">(</span><span class="mi">2009</span><span class="o">,</span> <span class="mi">9</span><span class="o">,</span> <span class="mi">6</span><span class="o">);</span><span class="c1">// September 6, 2009  </span>
</span><span class='line'><span class="c1">//只需要时分秒毫秒的时候  </span>
</span><span class='line'><span class="n">LocalTime</span> <span class="n">localTime</span> <span class="o">=</span> <span class="k">new</span> <span class="n">LocalTime</span><span class="o">(</span><span class="mi">13</span><span class="o">,</span> <span class="mi">30</span><span class="o">,</span> <span class="mi">26</span><span class="o">,</span> <span class="mi">0</span><span class="o">);</span><span class="c1">// 1:30:26PM</span>
</span></code></pre></td></tr></table></div></figure>


<p>获取年月日点分秒</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="n">DateTime</span> <span class="n">dt</span> <span class="o">=</span> <span class="k">new</span> <span class="n">DateTime</span><span class="o">();</span>
</span><span class='line'><span class="c1">//年  </span>
</span><span class='line'><span class="kt">int</span> <span class="n">year</span> <span class="o">=</span> <span class="n">dt</span><span class="o">.</span><span class="na">getYear</span><span class="o">();</span>
</span><span class='line'><span class="c1">//月  </span>
</span><span class='line'><span class="kt">int</span> <span class="n">month</span> <span class="o">=</span> <span class="n">dt</span><span class="o">.</span><span class="na">getMonthOfYear</span><span class="o">();</span>
</span><span class='line'><span class="c1">//日  </span>
</span><span class='line'><span class="kt">int</span> <span class="n">day</span> <span class="o">=</span> <span class="n">dt</span><span class="o">.</span><span class="na">getDayOfMonth</span><span class="o">();</span>
</span><span class='line'><span class="c1">//星期  </span>
</span><span class='line'><span class="kt">int</span> <span class="n">week</span> <span class="o">=</span> <span class="n">dt</span><span class="o">.</span><span class="na">getDayOfWeek</span><span class="o">();</span>
</span><span class='line'><span class="c1">//点  </span>
</span><span class='line'><span class="kt">int</span> <span class="n">hour</span> <span class="o">=</span> <span class="n">dt</span><span class="o">.</span><span class="na">getHourOfDay</span><span class="o">();</span>
</span><span class='line'><span class="c1">//分  </span>
</span><span class='line'><span class="kt">int</span> <span class="n">min</span> <span class="o">=</span> <span class="n">dt</span><span class="o">.</span><span class="na">getMinuteOfHour</span><span class="o">();</span>
</span><span class='line'><span class="c1">//秒  </span>
</span><span class='line'><span class="kt">int</span> <span class="n">sec</span> <span class="o">=</span> <span class="n">dt</span><span class="o">.</span><span class="na">getSecondOfMinute</span><span class="o">();</span>
</span><span class='line'><span class="c1">//毫秒  </span>
</span><span class='line'><span class="kt">int</span> <span class="n">msec</span> <span class="o">=</span> <span class="n">dt</span><span class="o">.</span><span class="na">getMillisOfSecond</span><span class="o">();</span>
</span></code></pre></td></tr></table></div></figure>


<p>星期的特殊处理</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="n">DateTime</span> <span class="n">dt</span> <span class="o">=</span> <span class="k">new</span> <span class="n">DateTime</span><span class="o">();</span>
</span><span class='line'><span class="c1">//星期  </span>
</span><span class='line'><span class="k">switch</span><span class="o">(</span><span class="n">dt</span><span class="o">.</span><span class="na">getDayOfWeek</span><span class="o">())</span> <span class="o">{</span>
</span><span class='line'><span class="k">case</span> <span class="n">DateTimeConstants</span><span class="o">.</span><span class="na">SUNDAY</span><span class="o">:</span>
</span><span class='line'>    <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">&quot;星期日&quot;</span><span class="o">);</span>
</span><span class='line'>    <span class="k">break</span><span class="o">;</span>
</span><span class='line'><span class="k">case</span> <span class="n">DateTimeConstants</span><span class="o">.</span><span class="na">MONDAY</span><span class="o">:</span>
</span><span class='line'>    <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">&quot;星期一&quot;</span><span class="o">);</span>
</span><span class='line'>    <span class="k">break</span><span class="o">;</span>
</span><span class='line'><span class="k">case</span> <span class="n">DateTimeConstants</span><span class="o">.</span><span class="na">TUESDAY</span><span class="o">:</span>
</span><span class='line'>    <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">&quot;星期二&quot;</span><span class="o">);</span>
</span><span class='line'>    <span class="k">break</span><span class="o">;</span>
</span><span class='line'><span class="k">case</span> <span class="n">DateTimeConstants</span><span class="o">.</span><span class="na">WEDNESDAY</span><span class="o">:</span>
</span><span class='line'>    <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">&quot;星期三&quot;</span><span class="o">);</span>
</span><span class='line'>    <span class="k">break</span><span class="o">;</span>
</span><span class='line'><span class="k">case</span> <span class="n">DateTimeConstants</span><span class="o">.</span><span class="na">THURSDAY</span><span class="o">:</span>
</span><span class='line'>    <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">&quot;星期四&quot;</span><span class="o">);</span>
</span><span class='line'>    <span class="k">break</span><span class="o">;</span>
</span><span class='line'><span class="k">case</span> <span class="n">DateTimeConstants</span><span class="o">.</span><span class="na">FRIDAY</span><span class="o">:</span>
</span><span class='line'>    <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">&quot;星期五&quot;</span><span class="o">);</span>
</span><span class='line'>    <span class="k">break</span><span class="o">;</span>
</span><span class='line'><span class="k">case</span> <span class="n">DateTimeConstants</span><span class="o">.</span><span class="na">SATURDAY</span><span class="o">:</span>
</span><span class='line'>    <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">&quot;星期六&quot;</span><span class="o">);</span>
</span><span class='line'>    <span class="k">break</span><span class="o">;</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>与JDK日期对象转换</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="n">DateTime</span> <span class="n">dt</span> <span class="o">=</span> <span class="k">new</span> <span class="n">DateTime</span><span class="o">();</span>
</span><span class='line'><span class="c1">//转换成java.util.Date对象  </span>
</span><span class='line'><span class="n">Date</span> <span class="n">d1</span> <span class="o">=</span> <span class="k">new</span> <span class="n">Date</span><span class="o">(</span><span class="n">dt</span><span class="o">.</span><span class="na">getMillis</span><span class="o">());</span>
</span><span class='line'><span class="n">Date</span> <span class="n">d2</span> <span class="o">=</span> <span class="n">dt</span><span class="o">.</span><span class="na">toDate</span><span class="o">();</span>
</span><span class='line'><span class="c1">//转换成java.util.Calendar对象  </span>
</span><span class='line'><span class="n">Calendar</span> <span class="n">c1</span> <span class="o">=</span> <span class="n">Calendar</span><span class="o">.</span><span class="na">getInstance</span><span class="o">();</span>
</span><span class='line'><span class="n">c1</span><span class="o">.</span><span class="na">setTimeInMillis</span><span class="o">(</span><span class="n">dt</span><span class="o">.</span><span class="na">getMillis</span><span class="o">());</span>
</span><span class='line'><span class="n">Calendar</span> <span class="n">c2</span> <span class="o">=</span> <span class="n">dt</span><span class="o">.</span><span class="na">toCalendar</span><span class="o">(</span><span class="n">Locale</span><span class="o">.</span><span class="na">getDefault</span><span class="o">());</span>
</span></code></pre></td></tr></table></div></figure>


<p></p>

<p>日期前后推算</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="n">DateTime</span> <span class="n">dt</span> <span class="o">=</span> <span class="k">new</span> <span class="n">DateTime</span><span class="o">();</span>
</span><span class='line'><span class="c1">//昨天  </span>
</span><span class='line'><span class="n">DateTime</span> <span class="n">yesterday</span> <span class="o">=</span> <span class="n">dt</span><span class="o">.</span><span class="na">minusDays</span><span class="o">(</span><span class="mi">1</span><span class="o">);</span>
</span><span class='line'><span class="c1">//明天  </span>
</span><span class='line'><span class="n">DateTime</span> <span class="n">tomorrow</span> <span class="o">=</span> <span class="n">dt</span><span class="o">.</span><span class="na">plusDays</span><span class="o">(</span><span class="mi">1</span><span class="o">);</span>
</span><span class='line'><span class="c1">//1个月前  </span>
</span><span class='line'><span class="n">DateTime</span> <span class="n">before1month</span> <span class="o">=</span> <span class="n">dt</span><span class="o">.</span><span class="na">minusMonths</span><span class="o">(</span><span class="mi">1</span><span class="o">);</span>
</span><span class='line'><span class="c1">//3个月后  </span>
</span><span class='line'><span class="n">DateTime</span> <span class="n">after3month</span> <span class="o">=</span> <span class="n">dt</span><span class="o">.</span><span class="na">plusMonths</span><span class="o">(</span><span class="mi">3</span><span class="o">);</span>
</span><span class='line'><span class="c1">//2年前  </span>
</span><span class='line'><span class="n">DateTime</span> <span class="n">before2year</span> <span class="o">=</span> <span class="n">dt</span><span class="o">.</span><span class="na">minusYears</span><span class="o">(</span><span class="mi">2</span><span class="o">);</span>
</span><span class='line'><span class="c1">//5年后  </span>
</span><span class='line'><span class="n">DateTime</span> <span class="n">after5year</span> <span class="o">=</span> <span class="n">dt</span><span class="o">.</span><span class="na">plusYears</span><span class="o">(</span><span class="mi">5</span><span class="o">);</span>
</span></code></pre></td></tr></table></div></figure>


<p>取特殊日期</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="n">DateTime</span> <span class="n">dt</span> <span class="o">=</span> <span class="k">new</span> <span class="n">DateTime</span><span class="o">();</span>
</span><span class='line'><span class="c1">//月末日期    </span>
</span><span class='line'><span class="n">DateTime</span> <span class="n">lastday</span> <span class="o">=</span> <span class="n">dt</span><span class="o">.</span><span class="na">dayOfMonth</span><span class="o">().</span><span class="na">withMaximumValue</span><span class="o">();</span>
</span><span class='line'><span class="c1">//90天后那周的周一  </span>
</span><span class='line'><span class="n">DateTime</span> <span class="n">firstday</span> <span class="o">=</span> <span class="n">dt</span><span class="o">.</span><span class="na">plusDays</span><span class="o">(</span><span class="mi">90</span><span class="o">).</span><span class="na">dayOfWeek</span><span class="o">().</span><span class="na">withMinimumValue</span><span class="o">();</span>
</span></code></pre></td></tr></table></div></figure>


<p>计算区间</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="n">DateTime</span> <span class="n">begin</span> <span class="o">=</span> <span class="k">new</span> <span class="n">DateTime</span><span class="o">(</span><span class="s">&quot;2012-02-01&quot;</span><span class="o">);</span>
</span><span class='line'><span class="n">DateTime</span> <span class="n">end</span> <span class="o">=</span> <span class="k">new</span> <span class="n">DateTime</span><span class="o">(</span><span class="s">&quot;2012-05-01&quot;</span><span class="o">);</span>
</span><span class='line'><span class="c1">//计算区间毫秒数  </span>
</span><span class='line'><span class="n">Duration</span> <span class="n">d</span> <span class="o">=</span> <span class="k">new</span> <span class="n">Duration</span><span class="o">(</span><span class="n">begin</span><span class="o">,</span> <span class="n">end</span><span class="o">);</span>
</span><span class='line'><span class="kt">long</span> <span class="n">time</span> <span class="o">=</span> <span class="n">d</span><span class="o">.</span><span class="na">getMillis</span><span class="o">();</span>
</span><span class='line'><span class="c1">//计算区间天数  </span>
</span><span class='line'><span class="n">Period</span> <span class="n">p</span> <span class="o">=</span> <span class="k">new</span> <span class="n">Period</span><span class="o">(</span><span class="n">begin</span><span class="o">,</span> <span class="n">end</span><span class="o">,</span> <span class="n">PeriodType</span><span class="o">.</span><span class="na">days</span><span class="o">());</span>
</span><span class='line'><span class="kt">int</span> <span class="n">days</span> <span class="o">=</span> <span class="n">p</span><span class="o">.</span><span class="na">getDays</span><span class="o">();</span>
</span><span class='line'><span class="c1">//计算特定日期是否在该区间内  </span>
</span><span class='line'><span class="n">Interval</span> <span class="n">i</span> <span class="o">=</span> <span class="k">new</span> <span class="n">Interval</span><span class="o">(</span><span class="n">begin</span><span class="o">,</span> <span class="n">end</span><span class="o">);</span>
</span><span class='line'><span class="kt">boolean</span> <span class="n">contained</span> <span class="o">=</span> <span class="n">i</span><span class="o">.</span><span class="na">contains</span><span class="o">(</span><span class="k">new</span> <span class="n">DateTime</span><span class="o">(</span><span class="s">&quot;2012-03-01&quot;</span><span class="o">));</span>
</span></code></pre></td></tr></table></div></figure>


<p>日期比较</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="n">DateTime</span> <span class="n">d1</span> <span class="o">=</span> <span class="k">new</span> <span class="n">DateTime</span><span class="o">(</span><span class="s">&quot;2012-02-01&quot;</span><span class="o">);</span>
</span><span class='line'><span class="n">DateTime</span> <span class="n">d2</span> <span class="o">=</span> <span class="k">new</span> <span class="n">DateTime</span><span class="o">(</span><span class="s">&quot;2012-05-01&quot;</span><span class="o">);</span>
</span><span class='line'><span class="c1">//和系统时间比  </span>
</span><span class='line'><span class="kt">boolean</span> <span class="n">b1</span> <span class="o">=</span> <span class="n">d1</span><span class="o">.</span><span class="na">isAfterNow</span><span class="o">();</span>
</span><span class='line'><span class="kt">boolean</span> <span class="n">b2</span> <span class="o">=</span> <span class="n">d1</span><span class="o">.</span><span class="na">isBeforeNow</span><span class="o">();</span>
</span><span class='line'><span class="kt">boolean</span> <span class="n">b3</span> <span class="o">=</span> <span class="n">d1</span><span class="o">.</span><span class="na">isEqualNow</span><span class="o">();</span>
</span><span class='line'><span class="c1">//和其他日期比  </span>
</span><span class='line'><span class="kt">boolean</span> <span class="n">f1</span> <span class="o">=</span> <span class="n">d1</span><span class="o">.</span><span class="na">isAfter</span><span class="o">(</span><span class="n">d2</span><span class="o">);</span>
</span><span class='line'><span class="kt">boolean</span> <span class="n">f2</span> <span class="o">=</span> <span class="n">d1</span><span class="o">.</span><span class="na">isBefore</span><span class="o">(</span><span class="n">d2</span><span class="o">);</span>
</span><span class='line'><span class="kt">boolean</span> <span class="n">f3</span> <span class="o">=</span> <span class="n">d1</span><span class="o">.</span><span class="na">isEqual</span><span class="o">(</span><span class="n">d2</span><span class="o">);</span>
</span></code></pre></td></tr></table></div></figure>


<p>格式化输出</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="n">DateTime</span> <span class="n">dateTime</span> <span class="o">=</span> <span class="k">new</span> <span class="n">DateTime</span><span class="o">();</span>
</span><span class='line'><span class="n">String</span> <span class="n">s1</span> <span class="o">=</span> <span class="n">dateTime</span><span class="o">.</span><span class="na">toString</span><span class="o">(</span><span class="s">&quot;yyyy/MM/dd hh:mm:ss.SSSa&quot;</span><span class="o">);</span>
</span><span class='line'><span class="n">String</span> <span class="n">s2</span> <span class="o">=</span> <span class="n">dateTime</span><span class="o">.</span><span class="na">toString</span><span class="o">(</span><span class="s">&quot;yyyy-MM-dd HH:mm:ss&quot;</span><span class="o">);</span>
</span><span class='line'><span class="n">String</span> <span class="n">s3</span> <span class="o">=</span> <span class="n">dateTime</span><span class="o">.</span><span class="na">toString</span><span class="o">(</span><span class="s">&quot;EEEE dd MMMM, yyyy HH:mm:ssa&quot;</span><span class="o">);</span>
</span><span class='line'><span class="n">String</span> <span class="n">s4</span> <span class="o">=</span> <span class="n">dateTime</span><span class="o">.</span><span class="na">toString</span><span class="o">(</span><span class="s">&quot;yyyy/MM/dd HH:mm ZZZZ&quot;</span><span class="o">);</span>
</span><span class='line'><span class="n">String</span> <span class="n">s5</span> <span class="o">=</span> <span class="n">dateTime</span><span class="o">.</span><span class="na">toString</span><span class="o">(</span><span class="s">&quot;yyyy/MM/dd HH:mm Z&quot;</span><span class="o">);</span>
</span></code></pre></td></tr></table></div></figure>


<p>时区</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="c1">//默认设置为日本时间  </span>
</span><span class='line'><span class="n">DateTimeZone</span><span class="o">.</span><span class="na">setDefault</span><span class="o">(</span><span class="n">DateTimeZone</span><span class="o">.</span><span class="na">forID</span><span class="o">(</span><span class="s">&quot;Asia/Tokyo&quot;</span><span class="o">));</span>
</span><span class='line'><span class="n">DateTime</span> <span class="n">dt1</span> <span class="o">=</span> <span class="k">new</span> <span class="n">DateTime</span><span class="o">();</span>
</span><span class='line'><span class="c1">//伦敦时间  </span>
</span><span class='line'><span class="n">DateTime</span> <span class="n">dt2</span> <span class="o">=</span> <span class="k">new</span> <span class="n">DateTime</span><span class="o">(</span><span class="n">DateTimeZone</span><span class="o">.</span><span class="na">forID</span><span class="o">(</span><span class="s">&quot;Europe/London&quot;</span><span class="o">));</span>
</span></code></pre></td></tr></table></div></figure>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[读取音频文件的信息]]></title>
    <link href="http://ajia.github.com/blog/2013/05/06/du-qu-yin-pin-wen-jian-de-xin-xi/"/>
    <updated>2013-05-06T18:33:00+08:00</updated>
    <id>http://ajia.github.com/blog/2013/05/06/du-qu-yin-pin-wen-jian-de-xin-xi</id>
    <content type="html"><![CDATA[<p>项目里需要读取音频的播放时间，找了一个下午发现这个：jaudiotagger(http://www.jthink.net/jaudiotagger/)，它是一个音频标签JAVA库，目前支持 Mp3, Mp4 (Mp4 audio, M4a and M4p audio) Ogg Vorbis, Flac and Wma, 但是对Wav 和 Real 的支持有限。</p>

<!-- more -->


<p>读取m4a格式的播放时间</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="cm">/**</span>
</span><span class='line'><span class="cm"> * 获取m4a格式文件的播放时间</span>
</span><span class='line'><span class="cm"> * @param filePath</span>
</span><span class='line'><span class="cm"> * @return</span>
</span><span class='line'><span class="cm"> */</span>
</span><span class='line'><span class="kd">public</span> <span class="kd">static</span> <span class="kt">int</span> <span class="nf">getMp4AudioLength</span> <span class="o">(</span><span class="n">String</span> <span class="n">filePath</span><span class="o">){</span>
</span><span class='line'>  <span class="n">File</span> <span class="n">file</span> <span class="o">=</span> <span class="k">new</span> <span class="n">File</span><span class="o">(</span><span class="n">filePath</span><span class="o">);</span>
</span><span class='line'>  <span class="n">Mp4FileReader</span> <span class="n">reader</span> <span class="o">=</span> <span class="k">new</span> <span class="n">Mp4FileReader</span><span class="o">();</span>
</span><span class='line'>  <span class="kt">int</span> <span class="n">length</span> <span class="o">=</span> <span class="o">-</span><span class="mi">1</span><span class="o">;</span>
</span><span class='line'>    <span class="n">AudioFile</span> <span class="n">f</span><span class="o">;</span>
</span><span class='line'>  <span class="k">try</span> <span class="o">{</span>
</span><span class='line'>      <span class="n">f</span> <span class="o">=</span> <span class="n">reader</span><span class="o">.</span><span class="na">read</span><span class="o">(</span><span class="n">file</span><span class="o">);</span>
</span><span class='line'>      <span class="n">AudioHeader</span> <span class="n">head</span> <span class="o">=</span> <span class="n">f</span><span class="o">.</span><span class="na">getAudioHeader</span><span class="o">();</span>
</span><span class='line'>      <span class="n">length</span> <span class="o">=</span> <span class="n">head</span><span class="o">.</span><span class="na">getTrackLength</span><span class="o">();</span>
</span><span class='line'>  <span class="o">}</span> <span class="k">catch</span> <span class="o">(</span><span class="n">CannotReadException</span> <span class="n">e</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>      <span class="n">log</span><span class="o">.</span><span class="na">error</span><span class="o">(</span><span class="n">e</span><span class="o">.</span><span class="na">getMessage</span><span class="o">(),</span> <span class="n">e</span><span class="o">);</span>
</span><span class='line'>  <span class="o">}</span> <span class="k">catch</span> <span class="o">(</span><span class="n">IOException</span> <span class="n">e</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>      <span class="n">log</span><span class="o">.</span><span class="na">error</span><span class="o">(</span><span class="n">e</span><span class="o">.</span><span class="na">getMessage</span><span class="o">(),</span> <span class="n">e</span><span class="o">);</span>
</span><span class='line'>  <span class="o">}</span> <span class="k">catch</span> <span class="o">(</span><span class="n">TagException</span> <span class="n">e</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>      <span class="n">log</span><span class="o">.</span><span class="na">error</span><span class="o">(</span><span class="n">e</span><span class="o">.</span><span class="na">getMessage</span><span class="o">(),</span> <span class="n">e</span><span class="o">);</span>
</span><span class='line'>  <span class="o">}</span> <span class="k">catch</span> <span class="o">(</span><span class="n">ReadOnlyFileException</span> <span class="n">e</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>      <span class="n">log</span><span class="o">.</span><span class="na">error</span><span class="o">(</span><span class="n">e</span><span class="o">.</span><span class="na">getMessage</span><span class="o">(),</span> <span class="n">e</span><span class="o">);</span>
</span><span class='line'>  <span class="o">}</span> <span class="k">catch</span> <span class="o">(</span><span class="n">InvalidAudioFrameException</span> <span class="n">e</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>      <span class="n">log</span><span class="o">.</span><span class="na">error</span><span class="o">(</span><span class="n">e</span><span class="o">.</span><span class="na">getMessage</span><span class="o">(),</span> <span class="n">e</span><span class="o">);</span>
</span><span class='line'>  <span class="o">}</span>
</span><span class='line'>  <span class="k">return</span> <span class="n">length</span><span class="o">;</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>读取mp3格式的播放时间</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="cm">/**</span>
</span><span class='line'><span class="cm"> * 获取mp3格式文件的播放时间</span>
</span><span class='line'><span class="cm"> * @param filePath</span>
</span><span class='line'><span class="cm"> * @return</span>
</span><span class='line'><span class="cm"> */</span>
</span><span class='line'><span class="kd">public</span> <span class="kd">static</span> <span class="kt">int</span> <span class="nf">getMp3AudioLength</span> <span class="o">(</span><span class="n">String</span> <span class="n">filePath</span><span class="o">){</span>
</span><span class='line'>  <span class="n">File</span> <span class="n">file</span> <span class="o">=</span> <span class="k">new</span> <span class="n">File</span><span class="o">(</span><span class="n">filePath</span><span class="o">);</span>
</span><span class='line'>  <span class="kt">int</span> <span class="n">length</span> <span class="o">=</span> <span class="o">-</span><span class="mi">1</span><span class="o">;</span>
</span><span class='line'>  <span class="k">try</span> <span class="o">{</span>
</span><span class='line'>      <span class="n">MP3File</span> <span class="n">f</span> <span class="o">=</span> <span class="o">(</span><span class="n">MP3File</span><span class="o">)</span><span class="n">AudioFileIO</span><span class="o">.</span><span class="na">read</span><span class="o">(</span><span class="n">file</span><span class="o">);</span>
</span><span class='line'>      <span class="n">MP3AudioHeader</span> <span class="n">audioHeader</span> <span class="o">=</span> <span class="n">f</span><span class="o">.</span><span class="na">getMP3AudioHeader</span><span class="o">();</span>
</span><span class='line'>      <span class="n">length</span> <span class="o">=</span> <span class="n">audioHeader</span><span class="o">.</span><span class="na">getTrackLength</span><span class="o">();</span>
</span><span class='line'>  <span class="o">}</span> <span class="k">catch</span> <span class="o">(</span><span class="n">CannotReadException</span> <span class="n">e</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>      <span class="n">log</span><span class="o">.</span><span class="na">error</span><span class="o">(</span><span class="n">e</span><span class="o">.</span><span class="na">getMessage</span><span class="o">(),</span> <span class="n">e</span><span class="o">);</span>
</span><span class='line'>  <span class="o">}</span> <span class="k">catch</span> <span class="o">(</span><span class="n">IOException</span> <span class="n">e</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>      <span class="n">log</span><span class="o">.</span><span class="na">error</span><span class="o">(</span><span class="n">e</span><span class="o">.</span><span class="na">getMessage</span><span class="o">(),</span> <span class="n">e</span><span class="o">);</span>
</span><span class='line'>  <span class="o">}</span> <span class="k">catch</span> <span class="o">(</span><span class="n">TagException</span> <span class="n">e</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>      <span class="n">log</span><span class="o">.</span><span class="na">error</span><span class="o">(</span><span class="n">e</span><span class="o">.</span><span class="na">getMessage</span><span class="o">(),</span> <span class="n">e</span><span class="o">);</span>
</span><span class='line'>  <span class="o">}</span> <span class="k">catch</span> <span class="o">(</span><span class="n">ReadOnlyFileException</span> <span class="n">e</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>      <span class="n">log</span><span class="o">.</span><span class="na">error</span><span class="o">(</span><span class="n">e</span><span class="o">.</span><span class="na">getMessage</span><span class="o">(),</span> <span class="n">e</span><span class="o">);</span>
</span><span class='line'>  <span class="o">}</span> <span class="k">catch</span> <span class="o">(</span><span class="n">InvalidAudioFrameException</span> <span class="n">e</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>      <span class="n">log</span><span class="o">.</span><span class="na">error</span><span class="o">(</span><span class="n">e</span><span class="o">.</span><span class="na">getMessage</span><span class="o">(),</span> <span class="n">e</span><span class="o">);</span>
</span><span class='line'>  <span class="o">}</span>
</span><span class='line'>  <span class="k">return</span> <span class="n">length</span><span class="o">;</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[使用jave转换音视频格式]]></title>
    <link href="http://ajia.github.com/blog/2013/05/04/shi-yong-javezhuan-huan-yin-shi-pin-ge-shi/"/>
    <updated>2013-05-04T15:54:00+08:00</updated>
    <id>http://ajia.github.com/blog/2013/05/04/shi-yong-javezhuan-huan-yin-shi-pin-ge-shi</id>
    <content type="html"><![CDATA[<p>JAVE是用java包装ffmpeg的一个类库，可以自由的在各种音视频格式之间转换，它的jar包里就包含了ffmpeg的可执行文件，有linux和windows的，我为了在本机上调试，去ffmpeg的官网下了一个Mac OSX版本的。</p>

<p>官网地址：http://www.sauronsoftware.it/projects/jave/。养成去看官网的习惯很重要，英语差点的话可以先看中文的介绍，有个概念再去看官网的说明。</p>

<!-- more -->


<p>
我是直接用源代码跑的，方便调试问题。下面是mp3转换为m4a格式的一个例子，更多的例子和请去官网查看</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="cm">/**</span>
</span><span class='line'><span class="cm">     * 转化音频格式</span>
</span><span class='line'><span class="cm">     * @param s</span>
</span><span class='line'><span class="cm">     * @param t</span>
</span><span class='line'><span class="cm">     * @throws IllegalArgumentException</span>
</span><span class='line'><span class="cm">     * @throws InputFormatException</span>
</span><span class='line'><span class="cm">     * @throws EncoderException</span>
</span><span class='line'><span class="cm">     */</span>
</span><span class='line'>    <span class="kd">private</span> <span class="kt">void</span> <span class="nf">convertAudio</span><span class="o">(</span><span class="n">String</span> <span class="n">s</span><span class="o">,</span> <span class="n">String</span> <span class="n">t</span><span class="o">){</span>
</span><span class='line'>      <span class="n">File</span> <span class="n">source</span> <span class="o">=</span> <span class="k">new</span> <span class="n">File</span><span class="o">(</span><span class="n">s</span><span class="o">);</span>
</span><span class='line'>      <span class="n">File</span> <span class="n">target</span> <span class="o">=</span> <span class="k">new</span> <span class="n">File</span><span class="o">(</span><span class="n">t</span><span class="o">);</span>
</span><span class='line'>      <span class="n">AudioAttributes</span> <span class="n">audio</span> <span class="o">=</span> <span class="k">new</span> <span class="n">AudioAttributes</span><span class="o">();</span>
</span><span class='line'>      <span class="n">audio</span><span class="o">.</span><span class="na">setCodec</span><span class="o">(</span><span class="s">&quot;libmp3lame&quot;</span><span class="o">);</span>
</span><span class='line'>      <span class="n">audio</span><span class="o">.</span><span class="na">setBitRate</span><span class="o">(</span><span class="k">new</span> <span class="n">Integer</span><span class="o">(</span><span class="mi">128000</span><span class="o">));</span>
</span><span class='line'>      <span class="n">audio</span><span class="o">.</span><span class="na">setChannels</span><span class="o">(</span><span class="k">new</span> <span class="n">Integer</span><span class="o">(</span><span class="mi">2</span><span class="o">));</span>
</span><span class='line'>      <span class="n">audio</span><span class="o">.</span><span class="na">setSamplingRate</span><span class="o">(</span><span class="k">new</span> <span class="n">Integer</span><span class="o">(</span><span class="mi">44100</span><span class="o">));</span>
</span><span class='line'>      <span class="n">EncodingAttributes</span> <span class="n">attrs</span> <span class="o">=</span> <span class="k">new</span> <span class="n">EncodingAttributes</span><span class="o">();</span>
</span><span class='line'>      <span class="n">attrs</span><span class="o">.</span><span class="na">setFormat</span><span class="o">(</span><span class="s">&quot;mp4&quot;</span><span class="o">);</span>
</span><span class='line'>      <span class="n">attrs</span><span class="o">.</span><span class="na">setAudioAttributes</span><span class="o">(</span><span class="n">audio</span><span class="o">);</span>
</span><span class='line'>      <span class="n">Encoder</span> <span class="n">encoder</span> <span class="o">=</span> <span class="k">new</span> <span class="n">Encoder</span><span class="o">();</span>
</span><span class='line'>      <span class="k">try</span> <span class="o">{</span>
</span><span class='line'>          <span class="n">encoder</span><span class="o">.</span><span class="na">encode</span><span class="o">(</span><span class="n">source</span><span class="o">,</span> <span class="n">target</span><span class="o">,</span> <span class="n">attrs</span><span class="o">);</span>
</span><span class='line'>      <span class="o">}</span> <span class="k">catch</span> <span class="o">(</span><span class="n">IllegalArgumentException</span> <span class="n">e</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>          <span class="n">log</span><span class="o">.</span><span class="na">error</span><span class="o">(</span><span class="n">e</span><span class="o">.</span><span class="na">getMessage</span><span class="o">(),</span> <span class="n">e</span><span class="o">);</span>
</span><span class='line'>      <span class="o">}</span> <span class="k">catch</span> <span class="o">(</span><span class="n">InputFormatException</span> <span class="n">e</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>          <span class="n">log</span><span class="o">.</span><span class="na">error</span><span class="o">(</span><span class="n">e</span><span class="o">.</span><span class="na">getMessage</span><span class="o">(),</span> <span class="n">e</span><span class="o">);</span>
</span><span class='line'>      <span class="o">}</span> <span class="k">catch</span> <span class="o">(</span><span class="n">EncoderException</span> <span class="n">e</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>          <span class="n">log</span><span class="o">.</span><span class="na">error</span><span class="o">(</span><span class="n">e</span><span class="o">.</span><span class="na">getMessage</span><span class="o">(),</span> <span class="n">e</span><span class="o">);</span>
</span><span class='line'>      <span class="o">}</span>
</span><span class='line'>  <span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>转换的时候老是报错，抛出EncoderException异常，我查了一下源码，注释掉Encoder.java的864行</p>

<blockquote><blockquote><p>throw new EncoderException(line);</p></blockquote></blockquote>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[音乐播放器dewplayer的使用]]></title>
    <link href="http://ajia.github.com/blog/2013/05/04/yin-le-bo-fang-qi-dewplayerde-shi-yong/"/>
    <updated>2013-05-04T15:53:00+08:00</updated>
    <id>http://ajia.github.com/blog/2013/05/04/yin-le-bo-fang-qi-dewplayerde-shi-yong</id>
    <content type="html"><![CDATA[<p>介绍一个flash音乐播放器：dewplayer(法国的)<br/>
官网地址：http://www.alsacreations.fr/dewplayer.html。它提供几种风格，根据自己的需要选择一种风格。下面说一下用javascript来操作dewplayer</p>

<!-- more -->


<p>引入swfobject.js</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="o">&lt;</span><span class="nx">script</span> <span class="nx">type</span><span class="o">=</span><span class="s2">&quot;text/javascript&quot;</span> <span class="nx">src</span><span class="o">=</span><span class="s2">&quot;swfobject.js&quot;</span><span class="o">&gt;&lt;</span><span class="err">/script&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<p>然后是js代码</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="kd">var</span> <span class="nx">dewp</span> <span class="o">=</span> <span class="nb">document</span><span class="p">.</span><span class="nx">getElementById</span><span class="p">(</span><span class="s2">&quot;dewplayerjs&quot;</span><span class="p">);</span>
</span><span class='line'><span class="kd">function</span> <span class="nx">play</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>            <span class="k">if</span><span class="p">(</span><span class="nx">dewp</span><span class="o">!=</span><span class="kc">null</span><span class="p">)</span> <span class="nx">dewp</span><span class="p">.</span><span class="nx">dewplay</span><span class="p">();</span>
</span><span class='line'>          <span class="p">}</span>
</span><span class='line'>          <span class="kd">function</span> <span class="nx">stop</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>            <span class="k">if</span><span class="p">(</span><span class="nx">dewp</span><span class="o">!=</span><span class="kc">null</span><span class="p">)</span> <span class="nx">dewp</span><span class="p">.</span><span class="nx">dewstop</span><span class="p">();</span>
</span><span class='line'>          <span class="p">}</span>
</span><span class='line'>          <span class="kd">function</span> <span class="nx">pause</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>            <span class="k">if</span><span class="p">(</span><span class="nx">dewp</span><span class="o">!=</span><span class="kc">null</span><span class="p">)</span> <span class="nx">dewp</span><span class="p">.</span><span class="nx">dewpause</span><span class="p">();</span>
</span><span class='line'>          <span class="p">}</span>
</span><span class='line'>          <span class="kd">function</span> <span class="nx">next</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>            <span class="k">if</span><span class="p">(</span><span class="nx">dewp</span><span class="o">!=</span><span class="kc">null</span><span class="p">)</span> <span class="nx">dewp</span><span class="p">.</span><span class="nx">dewnext</span><span class="p">();</span>
</span><span class='line'>          <span class="p">}</span>
</span><span class='line'>          <span class="kd">function</span> <span class="nx">prev</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>            <span class="k">if</span><span class="p">(</span><span class="nx">dewp</span><span class="o">!=</span><span class="kc">null</span><span class="p">)</span> <span class="nx">dewp</span><span class="p">.</span><span class="nx">dewprev</span><span class="p">();</span>
</span><span class='line'>          <span class="p">}</span>
</span><span class='line'>          <span class="kd">function</span> <span class="nx">set</span><span class="p">(</span><span class="nx">file</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>            <span class="k">if</span><span class="p">(</span><span class="nx">dewp</span><span class="o">!=</span><span class="kc">null</span><span class="p">)</span> <span class="nx">dewp</span><span class="p">.</span><span class="nx">dewset</span><span class="p">(</span><span class="nx">file</span><span class="p">);</span>
</span><span class='line'>          <span class="p">}</span>
</span><span class='line'>          <span class="kd">function</span> <span class="nx">go</span><span class="p">(</span><span class="nx">index</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>            <span class="k">if</span><span class="p">(</span><span class="nx">dewp</span><span class="o">!=</span><span class="kc">null</span><span class="p">)</span> <span class="nx">dewp</span><span class="p">.</span><span class="nx">dewgo</span><span class="p">(</span><span class="nx">index</span><span class="p">);</span>
</span><span class='line'>          <span class="p">}</span>
</span><span class='line'>          <span class="kd">function</span> <span class="nx">setpos</span><span class="p">(</span><span class="nx">ms</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>            <span class="k">if</span><span class="p">(</span><span class="nx">dewp</span><span class="o">!=</span><span class="kc">null</span><span class="p">)</span> <span class="nx">dewp</span><span class="p">.</span><span class="nx">dewsetpos</span><span class="p">(</span><span class="nx">ms</span><span class="p">);</span>
</span><span class='line'>          <span class="p">}</span>
</span><span class='line'>          <span class="kd">function</span> <span class="nx">getpos</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>            <span class="k">if</span><span class="p">(</span><span class="nx">dewp</span><span class="o">!=</span><span class="kc">null</span><span class="p">)</span> <span class="nx">alert</span><span class="p">(</span><span class="nx">dewp</span><span class="p">.</span><span class="nx">dewgetpos</span><span class="p">());</span>
</span><span class='line'>          <span class="p">}</span>
</span><span class='line'>          <span class="kd">function</span> <span class="nx">volume</span><span class="p">(</span><span class="nx">val</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>            <span class="k">if</span><span class="p">(</span><span class="nx">dewp</span><span class="o">!=</span><span class="kc">null</span><span class="p">)</span> <span class="nx">alert</span><span class="p">(</span><span class="nx">dewp</span><span class="p">.</span><span class="nx">dewvolume</span><span class="p">(</span><span class="nx">val</span><span class="p">));</span>
</span><span class='line'>          <span class="p">}</span>            
</span></code></pre></td></tr></table></div></figure>


<p></p>

<p>html代码</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
</pre></td><td class='code'><pre><code class='html'><span class='line'>     <span class="nt">&lt;div</span> <span class="na">id=</span><span class="s">&quot;dewplayer_content_js&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>      <span class="nt">&lt;object</span> <span class="na">data=</span><span class="s">&quot;dewplayer.swf&quot;</span> <span class="na">width=</span><span class="s">&quot;200&quot;</span> <span class="na">height=</span><span class="s">&quot;20&quot;</span> <span class="na">name=</span><span class="s">&quot;dewplayer&quot;</span> <span class="na">id=</span><span class="s">&quot;dewplayerjs&quot;</span> <span class="na">type=</span><span class="s">&quot;application/x-shockwave-flash&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>      <span class="nt">&lt;param</span> <span class="na">name=</span><span class="s">&quot;movie&quot;</span> <span class="na">value=</span><span class="s">&quot;dewplayer.swf&quot;</span> <span class="nt">/&gt;</span>
</span><span class='line'>      <span class="nt">&lt;param</span> <span class="na">name=</span><span class="s">&quot;flashvars&quot;</span> <span class="na">value=</span><span class="s">&quot;mp3=mp3/test1.mp3|mp3/test2.mp3|mp3/test3.mp3&amp;javascript=on&quot;</span> <span class="nt">/&gt;</span>
</span><span class='line'>      <span class="nt">&lt;param</span> <span class="na">name=</span><span class="s">&quot;wmode&quot;</span> <span class="na">value=</span><span class="s">&quot;transparent&quot;</span> <span class="nt">/&gt;</span>
</span><span class='line'>      <span class="nt">&lt;/object&gt;</span>
</span><span class='line'>      <span class="nt">&lt;/div&gt;</span>
</span><span class='line'>      <span class="nt">&lt;p&gt;</span>
</span><span class='line'>      <span class="nt">&lt;input</span> <span class="na">type=</span><span class="s">&quot;button&quot;</span> <span class="na">onclick=</span><span class="s">&quot;play();&quot;</span> <span class="na">value=</span><span class="s">&quot;Play&quot;</span> <span class="nt">/&gt;</span>
</span><span class='line'>      <span class="nt">&lt;input</span> <span class="na">type=</span><span class="s">&quot;button&quot;</span> <span class="na">onclick=</span><span class="s">&quot;stop();&quot;</span> <span class="na">value=</span><span class="s">&quot;Stop&quot;</span> <span class="nt">/&gt;</span>
</span><span class='line'>      <span class="nt">&lt;input</span> <span class="na">type=</span><span class="s">&quot;button&quot;</span> <span class="na">onclick=</span><span class="s">&quot;pause();&quot;</span> <span class="na">value=</span><span class="s">&quot;Pause&quot;</span> <span class="nt">/&gt;</span>
</span><span class='line'>      <span class="nt">&lt;input</span> <span class="na">type=</span><span class="s">&quot;button&quot;</span> <span class="na">onclick=</span><span class="s">&quot;next();&quot;</span> <span class="na">value=</span><span class="s">&quot;Next&quot;</span> <span class="nt">/&gt;</span>
</span><span class='line'>      <span class="nt">&lt;input</span> <span class="na">type=</span><span class="s">&quot;button&quot;</span> <span class="na">onclick=</span><span class="s">&quot;prev();&quot;</span> <span class="na">value=</span><span class="s">&quot;Prev&quot;</span> <span class="nt">/&gt;</span>
</span><span class='line'>      <span class="nt">&lt;input</span> <span class="na">type=</span><span class="s">&quot;button&quot;</span> <span class="na">onclick=</span><span class="s">&quot;go(2);&quot;</span> <span class="na">value=</span><span class="s">&quot;Go(2)&quot;</span> <span class="nt">/&gt;</span>
</span><span class='line'>      <span class="nt">&lt;input</span> <span class="na">type=</span><span class="s">&quot;button&quot;</span> <span class="na">onclick=</span><span class="s">&quot;set(&#39;mp3/test2.mp3&#39;);&quot;</span> <span class="na">value=</span><span class="s">&quot;Set mp3&quot;</span> <span class="nt">/&gt;</span>
</span><span class='line'>      <span class="nt">&lt;input</span> <span class="na">type=</span><span class="s">&quot;button&quot;</span> <span class="na">onclick=</span><span class="s">&quot;set(&#39;mp3/test3.mp3&#39;);&quot;</span> <span class="na">value=</span><span class="s">&quot;Set another mp3&quot;</span> <span class="nt">/&gt;</span>
</span><span class='line'>      <span class="nt">&lt;input</span> <span class="na">type=</span><span class="s">&quot;button&quot;</span> <span class="na">onclick=</span><span class="s">&quot;setpos(10000);&quot;</span> <span class="na">value=</span><span class="s">&quot;Set position 10 sec&quot;</span> <span class="nt">/&gt;</span>
</span><span class='line'>      <span class="nt">&lt;input</span> <span class="na">type=</span><span class="s">&quot;button&quot;</span> <span class="na">onclick=</span><span class="s">&quot;getpos();&quot;</span> <span class="na">value=</span><span class="s">&quot;Get position&quot;</span> <span class="nt">/&gt;</span>
</span><span class='line'>      <span class="nt">&lt;input</span> <span class="na">type=</span><span class="s">&quot;button&quot;</span> <span class="na">onclick=</span><span class="s">&quot;volume(50);&quot;</span> <span class="na">value=</span><span class="s">&quot;Set volume 50%&quot;</span> <span class="nt">/&gt;</span>
</span><span class='line'>      <span class="nt">&lt;/p&gt;</span>
</span></code></pre></td></tr></table></div></figure>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[seo优化]]></title>
    <link href="http://ajia.github.com/blog/2013/04/27/seoyou-hua/"/>
    <updated>2013-04-27T17:10:00+08:00</updated>
    <id>http://ajia.github.com/blog/2013/04/27/seoyou-hua</id>
    <content type="html"><![CDATA[<p>添加 meta data description</p>

<p>文章生产时默认会生成 layout, title, date, comments, categories 这几项，如果多添加2个选项 ‘keywords’, ‘description’，会在 generate 文章的时候自动生成相应的 meta 标签
如果文章 header 写成这样</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>layout: post
</span><span class='line'>title: "SEO for Octopress"
</span><span class='line'>date: 2012-04-22 09:55
</span><span class='line'>comments: true
</span><span class='line'>categories: [seo,octopress]
</span><span class='line'>keywords: seo,octopress
</span><span class='line'>description: How to optimize Octopress for SEO</span></code></pre></td></tr></table></div></figure>


<p></p>

<!-- more -->


<p>生成的post head标签中会生成</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>&lt;title&gt;SEO for Octopress &lt;/title&gt;
</span><span class='line'>&lt;meta name="author" content="Yatish Mehta"&gt;
</span><span class='line'>&lt;meta name="description" content="How to optimize Octopress for SEO"&gt;
</span><span class='line'>&lt;meta name="keywords" content="seo,octopress"&gt;</span></code></pre></td></tr></table></div></figure>


<p>如果不想每次都得手动添加，可以修改 Rakefile文件</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>open(filename, 'w') do |post|
</span><span class='line'>  post.puts "---"
</span><span class='line'>  post.puts "layout: post"
</span><span class='line'>  post.puts "title: \"#{title.gsub(/&/,'&amp;')}\""
</span><span class='line'>  post.puts "date: #{Time.now.strftime('%Y-%m-%d %H:%M')}"
</span><span class='line'>  post.puts "comments: true"
</span><span class='line'>  post.puts "categories: "
</span><span class='line'>  post.puts "keywords: "
</span><span class='line'>  post.puts "description: "
</span><span class='line'>  post.puts "---"
</span><span class='line'>end</span></code></pre></td></tr></table></div></figure>


<p>上面的方法只能给每个 post 生成对应的 meta标签，如果要给主页添加 meta 标签，修改 source/_includes/head.html，添加以下内容</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>&lt;meta name="author" content="Ajia"&gt;
</span><span class='line'>
</span><span class='line'>&lt;meta name="description" content="Swim in the code, Ajia's blog"&gt;
</span><span class='line'>&lt;meta name="keywords" content="seo优化, octopress"&gt;</span></code></pre></td></tr></table></div></figure>


<p>在 _config.yml 文件中填充全局的 keywords 和 description, 比如这样</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>description: Ajia's blog
</span><span class='line'>keywords: java,算法,数据结构,web development,Ajax</span></code></pre></td></tr></table></div></figure>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Sending 'ccColor4B' (aka 'struct _ccColor4B') to parameter of incompatible type 'CIColor *']]></title>
    <link href="http://ajia.github.com/blog/2013/04/22/sending-cccolor4b-aka-struct-cccolor4b-to-parameter-of-incompatible-type-cicolor-star/"/>
    <updated>2013-04-22T15:25:00+08:00</updated>
    <id>http://ajia.github.com/blog/2013/04/22/sending-cccolor4b-aka-struct-cccolor4b-to-parameter-of-incompatible-type-cicolor-star</id>
    <content type="html"><![CDATA[<p>升级cocos2d以后，编译项目，CCLayer.m的layerWithColor:(ccColor4B)color报错</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='objective-c'><span class='line'><span class="n">Sending</span> <span class="err">&#39;</span><span class="n">ccColor4B</span><span class="err">&#39;</span> <span class="p">(</span><span class="n">aka</span> <span class="err">&#39;</span><span class="k">struct</span> <span class="n">_ccColor4B</span><span class="err">&#39;</span><span class="p">)</span> <span class="n">to</span> <span class="n">parameter</span>
</span><span class='line'> <span class="n">of</span> <span class="n">incompatible</span> <span class="n">type</span> <span class="err">&#39;</span><span class="n">CIColor</span> <span class="o">*</span><span class="err">&#39;</span>
</span></code></pre></td></tr></table></div></figure>


<p>把</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='objective-c'><span class='line'><span class="k">return</span> <span class="p">[[[</span><span class="n">self</span> <span class="n">alloc</span><span class="p">]</span> <span class="nl">initWithColor:</span><span class="n">color</span><span class="p">]</span> <span class="n">autorelease</span><span class="p">];</span>
</span></code></pre></td></tr></table></div></figure>


<p>改成</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='objective-c'><span class='line'><span class="k">return</span> <span class="p">[[(</span><span class="n">CCColorLayer</span><span class="o">*</span><span class="p">)[</span><span class="n">self</span> <span class="n">alloc</span><span class="p">]</span> <span class="nl">initWithColor:</span><span class="n">color</span><span class="p">]</span> <span class="n">autorelease</span><span class="p">];</span>
</span></code></pre></td></tr></table></div></figure>


<p>就可以了</p>
]]></content>
  </entry>
  
</feed>
