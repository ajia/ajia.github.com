<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Ajia's Blog]]></title>
  <link href="http://ajia.github.com/atom.xml" rel="self"/>
  <link href="http://ajia.github.com/"/>
  <updated>2014-05-23T09:53:16+08:00</updated>
  <id>http://ajia.github.com/</id>
  <author>
    <name><![CDATA[Ajia]]></name>
    <email><![CDATA[DerekLunt@163.com]]></email>
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[rework-挠自己的痒处]]></title>
    <link href="http://ajia.github.com/blog/2014/05/22/nao-zi-ji-de-yang-chu/"/>
    <updated>2014-05-22T22:52:00+08:00</updated>
    <id>http://ajia.github.com/blog/2014/05/22/nao-zi-ji-de-yang-chu</id>
    <content type="html"><![CDATA[<!--more-->


<p>想要创造一个伟大的产品或某项卓越的服务，最简单直接的办法就是做你自己想用的东西。设计你了解的产品——你就能很快发现它到底好不好用。</p>

<p>在37signals，我们为自己的业务需要来开发产品。例如，我们需要一个软件来跟踪记录我们和谁交流过、说了什么以及何时需要下一步的跟进。于是我们开发了自己的联络管理软件——Highrise。不需要核心团队、市场调研，也不需要经纪人。就像自己觉得身上痒痒了，就自己挠挠。</p>

<p>一旦发明一种产品或服务，你每天就得为上百个微不足道的决策去劳神费力。如果是帮别人解决问题，就会像瞎子一样在黑暗中不断摸索。但如果你解决的是自己的问题，希望之光就出现了。你非常清楚怎样做才是正确的。</p>

<p>詹姆斯.戴森（James Dyson）就是一位自产自销的发明家。当他打扫房间时，发现袋式真空吸尘器总是失灵——灰尘总把袋子里的气孔堵塞，阻断气流。这不是随便什么人凭空想象出来的问题，恰恰就是他本人的亲身经历。为了解决自己的问题，世界上第一个免纸袋涡卷式真空吸尘器诞生了。</p>

<p>维克.福尔兹（Vic Firth）在波士顿交响乐团演奏定音鼓时，突发奇想要做一只更好的鼓槌。当时市面上卖的鼓槌都不能达到预期的效果，于是他就开始在自家的地下室制作鼓槌并进行销售。然后，有一天，他把一把鼓槌掉在了地上，听到每一只鼓槌的声音都不一样，从那时起，他就开始按照含水量、重量、密度以及音高来配对鼓槌，确保每一对鼓槌都能达到最佳适配水平。结果就有了他如今的产品口号：“绝配的一对。”维克.福尔兹的工厂每天至少要生产85000只鼓槌，市场占有份额达到62%。</p>

<p>田径教练比尔.鲍尔曼（Bill Bowerman）认为他的队员需要更好、更轻的跑鞋。于是他走出训练场，在工作室里尝试着往家用蛋奶烘饼模具里注入橡胶，于是耐克最著名的鉄模鞋底便应运而生了。</p>

<p>这些人解决了自己的燃眉之急，同时也发现了他们的需求背后隐藏着一片巨大的市场，这就是你应该去做的。</p>

<p>自产自销的好处还在于，你可以快速直接的评估产品的质量，而不需要去了解别人的反馈意见。</p>

<p>玫琳凯化妆品的创始人玫琳凯.瓦格纳（Mary Kay Wagner）就是通过亲身使用才确定她的护肤品的质量是一流的。她是从一家本地的美容师那里得到这个产品的，这位美容师在家调制秘方，专为患者、亲属和朋友服务。当这位美容师过世后，瓦格纳从这家人手里买下了秘方。她不必组织测试团队来试用产品，也无须做任何市场调研，只要看看自己的皮肤就好了。</p>

<p>这种“解决自己实际问题”的方法最大的优势就在于能让你爱上自己的产品。你十分了解其中存在的问题以及其价值所在。除此之外别无他途。毕竟你（很有可能）会为这件事奋斗很多年，甚至付出余生，所以，最好还是做自己真正关心的东西。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[rework-在宇宙中留下你的足迹]]></title>
    <link href="http://ajia.github.com/blog/2014/05/21/rework-zai-yu-zhou-zhong-liu-ni-de-zu-ji/"/>
    <updated>2014-05-21T07:23:00+08:00</updated>
    <id>http://ajia.github.com/blog/2014/05/21/rework-zai-yu-zhou-zhong-liu-ni-de-zu-ji</id>
    <content type="html"><![CDATA[<!-- more -->


<p>欲成大事，就要让自己与众不同，要在宇宙中留下有意义的一笔，要让世人知道你在做的是一件重要的事情。</p>

<p>你不必去攻克癌症，只要冲着有价值的方向去努力，要让你的客户说：“这个东西让我的生活变得更美好了。”如果你不做这件事了，人们就会觉得不对劲。</p>

<p>同时，做这件事，你还要有紧迫感。人的一生是有限的，而这件事就应该是你愿意毕生而为的工作。难道你愿意终生复制别人的产品或者只是搭配、组合别人发明的东西吗？你应该创造你独有的传承。不要只是坐在原地等着别人来为你作出改变，不要以为你得需要一个大团队才能做出一番别样的事业来。</p>

<p>看看著名网站Craigslist吧，这家颠覆了传统的分类广告业务的著名网站，其员工人数只有区区几十人而已，而公司每年的收入却达到了几千万美元，是互联网上最受欢迎的网站之一，给整个报刊行业带来了重大打击。</p>

<p>马特.德拉吉打造的德拉吉报道（The Drudge Report），只是他自己一个人运营的一个简单网页而已，然而这个简单的网页却对新闻行业带来了深远的影响——电视从业者、电台脱口秀主持人以及报社记者都将其视为发掘新故事的“必去之地”。</p>

<p>要做就做举足轻重的事情，这些小人物发迹于草莽，却破坏了已经存在了数十年的传统模式。你也能在自己的行业里做出同样的壮举。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[rework-受够了“企业家“]]></title>
    <link href="http://ajia.github.com/blog/2014/05/19/rework-shou-gou-liao-qi-ye-jia/"/>
    <updated>2014-05-19T22:41:00+08:00</updated>
    <id>http://ajia.github.com/blog/2014/05/19/rework-shou-gou-liao-qi-ye-jia</id>
    <content type="html"><![CDATA[<!--more-->


<p>让“企业家”这个过气的称谓退出历史舞台吧，它已经背负了太多沉重的负担。它给人的感觉就像是一个实行会员准入制度的私人俱乐部，不是谁都能进的。我们应该鼓励每一个人都去开创自己的事业，不要让这等好事只落在那些凤毛麟角、自认为自己才是企业家的人头上。</p>

<p>有这样一群新生代开始走出来创业了。尽管他们获利，但谁也不认为自己是企业家。他们当中的很多人甚至不认为自己是企业主。他们只是在用自己的方式做自己喜欢做的事情，并从中获得回报。</p>

<p>那么，让我们把这个听起来很好的称谓替换成一个更加脚踏实地的说法吧，不要再叫别人企业家了，管他们叫创始人吧。每个创立了自己事业的人都是创始人。你不需要拥有MBA头衔、资质证书、西装革履以及公文包，甚至无须承担常人所不能承受的风险。你所需要的只是一个创意，加一点点自信，以及一点勇气，就可以启程了。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[rework-工作狂]]></title>
    <link href="http://ajia.github.com/blog/2014/05/18/rework-gong-zuo-kuang/"/>
    <updated>2014-05-18T22:23:00+08:00</updated>
    <id>http://ajia.github.com/blog/2014/05/18/rework-gong-zuo-kuang</id>
    <content type="html"><![CDATA[<!--more-->


<p>沉迷工作是企业文化中广受赞颂的一种“优良做派”。我们知道工作狂热衷于通宵达旦、加班加点，甚至在办公室打地铺。这些人以累死在项目中为荣，对他们来说，再大的工作量也不在话下。</p>

<p>工作狂的行为不但没有必要，而且愚蠢至极。过多的工作并不代表你对项目更关注，也不代表你作了更多贡献，这仅仅意味着你干了更多活而已。</p>

<p>工作狂能够解决一些问题，但他们制造的麻烦却更多。首先，这种工作状态经不起时间的考验。当职业倦怠感袭来时——这一点基本不可避免——你根本没法“软着陆”。</p>

<p>工作狂往往不得要领。他们花费大把的时间去解决问题，他们以为能靠蛮力来弥补思维上的惰性，其结果就是折腾出一堆粗略无用的解决方案。</p>

<p>不仅如此，他们还凭空制造出危机来。这些人从不寻求高效解决之道，因为他们恰恰就“钟情于”加班加点。这让他们感觉自己像个英雄，并沉迷其中。他们（通常是无意识地）制造问题，看似这样就能享受更多的工作了。</p>

<p>工作狂的存在使那些不以加班为乐的员工感到无所适从。在工作狂扎堆的企业环境里，就连“按时上下班”都让人觉得是一种无理要求了。这种文化令正常工作的员工心怀愧疚、士气低落。不仅如此，人们还会因此陷入一种“跟风”状态——每个人都在义务加班，根本就不管到底有没有生产力。</p>

<p>如果你只是为了工作而工作，那么你就会丧失判断力。你的价值观和决策方式都是扭曲的。你没有能力去判断哪些工作值得做、哪些工作该放弃，最后搞得自己筋疲力尽，而一个筋疲力尽的人是无法作出明智的决定的。</p>

<p>最后，工作狂实际取得的成就并不比正常人高。他们自诩为完美主义者，但这仅仅代表他们浪费了大量时间去关注次要的细节，而不是推动下一项任务。</p>

<p>工作狂不是英雄。他们没有力挽狂澜，不过是浪费时间而已。真正的英雄早已想出办法、搞定一切，然后回家了。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[rework-何必壮大？]]></title>
    <link href="http://ajia.github.com/blog/2014/05/16/rework-he-bi-zhuang-da-%3F/"/>
    <updated>2014-05-16T21:30:00+08:00</updated>
    <id>http://ajia.github.com/blog/2014/05/16/rework-he-bi-zhuang-da-?</id>
    <content type="html"><![CDATA[<!--more-->


<p>人们往往会问：“你的公司有多大？”话题虽小，可人们期待的答案却不是越小越好。这个数字越大，你给人留下的印象就越深刻、越专业、越强大。如果你说你有100多名员工，他们会欢呼雀跃：“哇！太棒了！”如果你的公司规模不大，你就会听到言不由衷的：“哦&#8230;&#8230;还不错啊。”前者是恭维，而后者仅仅是礼节而已。</p>

<p>为什么会这样？与企业成长和业务有何关联？为什么总把扩张当做奋斗目标？除了满足虚荣心外,“大”还有什么好处？（你最好能给我一个比“规模经济”更好的答案。）选择并保持合适的规模又有何不妥？</p>

<p>我们会不会对着哈佛和牛津指手画脚说：“如果它们能扩大规模、开设分校、广聘名师、全球运营、开立分校&#8230;&#8230;之后，它们就能成为伟大的学校。”当然不会。这些都不是我们评估名校的标准。那又为什么要用这些标准来衡量一个企业呢？</p>

<p>也许你的公司的最佳规模就是5个人，也可能是40个人，也可能是200个人。也没准只要你一个人加一台笔记本电脑就成。不要提前幻想自己要做到多大规模，要慢慢发展，走一步看一步——时机未到就大肆拉人入伙的做法使很多公司走上了绝路。同时还应该避免井喷式成长——这会使你扩张过头，错过最佳规模。</p>

<p>小公司并不只是一块跳板。小公司本身就是一个伟大的目标。</p>

<p>你有没有发现小公司都想要变大，而大公司却梦想变得更敏捷、更灵活？记住，一旦公司做大了，要想再缩小，就在所难免地要进行裁员。打击士气，还要完全改变业务模式。</p>

<p>你完全没有必要把向上爬作为你的目标。我们要谈的也不只是你的员工人数，还包括你的花销、房租、IT设施、办公家具，等等。这些事情并不会主动找上你，而是由你自己决定要不要背上这些东西。由于背负了庞大的开销，你只能强迫自己创立一种很复杂的业务模式——它运营起来更加困难，更加紧张。</p>

<p>不要因为瞄准小公司就觉得缺乏安全感。无论是谁，只要他所运营的公司能够持续发展、保持盈利，不管规模大小，都是值得骄傲的。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[rework-计划即瞎猜]]></title>
    <link href="http://ajia.github.com/blog/2014/05/14/rework-ji-hua-ji-xia-cai/"/>
    <updated>2014-05-14T23:07:00+08:00</updated>
    <id>http://ajia.github.com/blog/2014/05/14/rework-ji-hua-ji-xia-cai</id>
    <content type="html"><![CDATA[<!--more-->


<p>除非你是个预言家，否则那些长期的商业计划就是痴人说梦。你不能掌控的因素太多了：市场环境、竞争对手、客户群体、经济状况，等等。撰写计划会让人感觉自己把握住了某些东西，但实际上这都是完全不可控的。</p>

<p>为什么我们不直截了当地按照计划的本质来称呼它呢？管它叫“猜想”吧。现在我们就开始把你的商业计划称为“商业猜想”，把财务计划叫做“财务猜想”，把战略计划命名为“战略猜想”。现在咱们就可以不用为这些玩意儿操那么多心了。在这方面操心只能是得不偿失。</p>

<p>当你把猜想变成计划，就等于走进了危险地带。做计划就是在用过去推动未来，等于给你戴上了眼罩。“这就是我们要做的，嗯，因为我们说过要这么做的。”问题是：计划和即兴发挥不会合拍。</p>

<p>你必须能够即兴发挥，你必须抓住每一个迎面而来的机遇。有时候你得说服自己：“我们要换个方向了，因为现在这么做比较靠谱。“</p>

<p>长期计划中的时间也纯属无稽之谈。你只有在做一件事的过程中，才能掌握更多的信息，没有人能够未卜先知。千万不要在行动之前就做出重大的决定。</p>

<p>这并不是说你应该无视未来，或者不应该对未来的挑战作未雨绸缪的准备。预防练习总是值得去做的。只是不要觉得自己必须把这些问题白纸黑字地写出来，或者为此纠结不休。大多数情况下，人们不会再多去看一眼自己长篇大论写下的计划，篇幅庞大的计划书最终都会成为文件柜里的化石。</p>

<p>放下你的臆测吧，现在就决定你这周要做什么，不必去管全年的计划。只要找出下一项最重要的任务，然后起而行之。在行动之前的一刻作决定，而不是早早就预先定下某事。</p>

<p>你也可以跳过这个决策过程，直接上飞机走人，到了目的地再去选一件漂亮的衬衣、一个刮胡膏以及牙刷。</p>

<p>无计划地工作看上去挺悬，但是盲目遵循不切实际的计划，后果则更可怕。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[rework-哪来的从错误中学习]]></title>
    <link href="http://ajia.github.com/blog/2014/05/13/rework-na-lai-de-cong-cuo-wu-zhong-xue-xi/"/>
    <updated>2014-05-13T20:48:00+08:00</updated>
    <id>http://ajia.github.com/blog/2014/05/13/rework-na-lai-de-cong-cuo-wu-zhong-xue-xi</id>
    <content type="html"><![CDATA[<!--more-->


<p>在商业社会中，失败成了一种值得期待的典礼。你总能听到“新公司倒闭者十之八九”的说法。你还听说失败能铸造品性。人们常常建议你“早死早超生，失败多经验也多”。</p>

<p>空气中充斥着如此高浓度的失败理论，貌似除了沉沦其中，没有别的办法。千万不要相信这些观念！不要被这些观点愚弄了，其他人的失败仅仅代表其他人栽了跟头而已。</p>

<p>别人的东西卖不出去，与你何干？别人没法凝聚团队，又与你何干？别人的服务定价失当，又与你何干？别人挣的没有花的多&#8230;&#8230;那么，正好你来挣！</p>

<p>另外一种普遍的错误认知是：人要从错误中吸取经验教训。你到底能从错误中学到什么？你能学到的只是不再重蹈覆辙，但这有什么意义呢？你还是不知道下一步该做什么。</p>

<p>相比之下，你更应该从成功中汲取养分。成功才是真正靠得住的教材。做成一件事后，你会知道这条路行得通—然后就会再次这么做，而下一次，你也许还会做得更棒。</p>

<p>失败并不是成功的先决条件。一份来自哈佛商学院的研究报告表明，那些已经成功的企业家们再创造辉煌的可能性远比常人大得多（他们今后创办公司的成功率为34%）。而那些初次创业就失败的企业家们继续创业的成功率则与初次创业一样：只有23%。首战失败的人的成功率并不比那些从未尝试过的新人高。成功是一种极具现实的价值的宝贵经验。</p>

<p>不比感到惊讶：这就是自然规律。逗留在过去的失败中是无法进化的，进化是建立在成功的基础之上的。你也应该如此。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[rework-忘了现实世界]]></title>
    <link href="http://ajia.github.com/blog/2014/05/11/re-xian-shi-shi-jie/"/>
    <updated>2014-05-11T09:19:00+08:00</updated>
    <id>http://ajia.github.com/blog/2014/05/11/re-xian-shi-shi-jie</id>
    <content type="html"><![CDATA[<!-- more -->


<pre><code>”这在现实世界中完全行不通。“当你向人们介绍一个新创意时，人们总是这么说。

这个”现实世界“听起来如此令人沮丧，貌似所有的新创意、新提案以及外来概念总是会在”现实世界“中碰壁。在这里，能够立于不败之地的都是那些人们耳熟能详、习以为常的事物，即使这些东西以及漏洞百出或陈腐低效。

撕开这个”现实世界“的遮羞布后，你会发现栖居其中的人们都充满着悲观和绝望的情绪。他们期待看到新概念被斩落马下，他们认为这个社会还没有准备好迎接变革，也无力引发变革。

更糟的是，他们想给其他人灌迷魂汤，让人们也陷进他们的坟墓里。如果你对未来充满期待并野心勃勃，他们就会试图说服你不要为不可能实现的想法浪费时间。

不要相信他们。这个世界对于他们来说可能是”现实“的，但并不意味着你也要生活在这样的”现实“世界中。

我们了解这一点，因为我们的公司在很多方面就通过”现实世界“的测评。在”现实世界“中，你不可能让十几个员工在两个大洲的8个不同城市办公；在”现实世界“中，你不可能不靠任何销售人员或广告投放就赢得上百万的客户；在”现实世界“中，你不能将自己的成功秘诀透露给其他人。问题是这些我们都干了，并且干得轰轰烈烈。

”现实世界“并不存在，那只是个借口，只是某些人为了开脱自己的无所作为，跟你一点关系也没有。
</code></pre>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[CMake找不到/Developer目录的问题]]></title>
    <link href="http://ajia.github.com/blog/2014/05/08/cmakezhao-bu-dao-slash-developermu-lu-de-wen-ti/"/>
    <updated>2014-05-08T18:49:00+08:00</updated>
    <id>http://ajia.github.com/blog/2014/05/08/cmakezhao-bu-dao-slash-developermu-lu-de-wen-ti</id>
    <content type="html"><![CDATA[<!-- more -->


<p>想学好OpenGL，已经复习C几周了。</p>

<p>网上有个教程，http://www.opengl-tutorial.org/zh-hans/tutorial-1-opening-a-window-zh/#______</p>

<p>照着上面说的做，在Mac上生成项目的时候遇到个问题：</p>

<pre><code>Error: No developer directory found at /Developer.  Run
/usr/bin/xcode-select to update the developer directory path. 
</code></pre>

<p>原来，我的Xcode的版本是4.6.3，/Developer这个目录已经改到/Applications/Xcode.app/Contents/Developer，执行这条命令就可以了</p>

<pre><code>sudo /usr/bin/xcode-select -switch /Applications/Xcode.app/Contents/Developer
</code></pre>

<p>然后，好好学习OpenGL。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Mac下制作Ubuntu安装U盘]]></title>
    <link href="http://ajia.github.com/blog/2014/05/06/macxia-zhi-zuo-ubuntuan-zhuang-upan/"/>
    <updated>2014-05-06T12:02:00+08:00</updated>
    <id>http://ajia.github.com/blog/2014/05/06/macxia-zhi-zuo-ubuntuan-zhuang-upan</id>
    <content type="html"><![CDATA[<!-- more -->


<p>步骤如下：</p>

<p>打开终端，把IOS镜像转换为DMG格式：</p>

<pre><code>HDIUTIL CONVERT -FORMAT UDRW -O ubuntukylin-13.04-desktop-i386 ubuntukylin-13.04-desktop-i386.iso
</code></pre>

<p>查看U盘的disk编号</p>

<p>不接入U盘的情况下在终端中输入 diskutil list</p>

<p>将U盘接入Mac，再次输入diskutil list</p>

<p>对比2次的输出，确定U盘的disk编号</p>

<p>我这里的disk编号是1</p>

<p>卸载USB盘（插入时已经自动挂载了），但是不要推出。在终端下：</p>

<pre><code>diskutil umountDisk /dev/disk1    
</code></pre>

<p>将dmg写入U盘</p>

<pre><code>sudo dd if=./ubuntukylin-13.04-desktop-i386.dmg of=/dev/rdisk1 bs=1m
</code></pre>

<p>推出USB盘。在上面复制之后，系统可能会报错，“此电脑不难读取能插入的磁盘”，不必理会，直接推出即可。也可以在终端下推出：</p>

<pre><code>diskutil eject /dev/disk1
</code></pre>

<p>使用该USB盘引导启动即可进行Linux的安装。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[读《Lua程序设计》笔记--类型与值]]></title>
    <link href="http://ajia.github.com/blog/2014/04/19/du-luacheng-xu-she-ji-bi-ji-yu-zhi/"/>
    <updated>2014-04-19T18:30:00+08:00</updated>
    <id>http://ajia.github.com/blog/2014/04/19/du-luacheng-xu-she-ji-bi-ji-yu-zhi</id>
    <content type="html"><![CDATA[<!-- more -->


<h6>table的创建是通过“构造表达式”完成的，最简单的构造表达式就是{}。</h6>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='lua'><span class='line'><span class="n">a</span> <span class="o">=</span> <span class="p">{}</span> <span class="c1">--创建一个table, 并将它的引用存储到a</span>
</span><span class='line'><span class="n">k</span> <span class="o">=</span> <span class="s2">&quot;</span><span class="s">x&quot;</span>
</span><span class='line'><span class="n">a</span><span class="p">[</span><span class="n">k</span><span class="p">]</span> <span class="o">=</span> <span class="mi">10</span>  <span class="c1">--新条目，key=&quot;x&quot;, value=10</span>
</span><span class='line'><span class="n">a</span><span class="p">[</span><span class="mi">20</span><span class="p">]</span> <span class="o">=</span> <span class="s2">&quot;</span><span class="s">great&quot;</span>  <span class="c1">--新条目, key=20, value=&quot;great&quot;</span>
</span><span class='line'><span class="nb">print</span><span class="p">(</span><span class="n">a</span><span class="p">[</span><span class="s2">&quot;</span><span class="s">x&quot;</span><span class="p">])</span>  <span class="c1">--&gt;10</span>
</span><span class='line'><span class="n">k</span> <span class="o">=</span> <span class="mi">20</span>
</span><span class='line'><span class="nb">print</span><span class="p">(</span><span class="n">a</span><span class="p">[</span><span class="n">k</span><span class="p">])</span>  <span class="c1">--&gt;&quot;great&quot;</span>
</span><span class='line'><span class="n">a</span><span class="p">[</span><span class="s2">&quot;</span><span class="s">x&quot;</span><span class="p">]</span> <span class="o">=</span> <span class="n">a</span><span class="p">[</span><span class="s2">&quot;</span><span class="s">x&quot;</span><span class="p">]</span> <span class="o">+</span> <span class="mi">1</span>  <span class="c1">--递增条目&quot;x&quot;</span>
</span><span class='line'><span class="nb">print</span><span class="p">(</span><span class="n">a</span><span class="p">[</span><span class="s2">&quot;</span><span class="s">x&quot;</span><span class="p">])</span>  <span class="c1">--&gt;11</span>
</span></code></pre></td></tr></table></div></figure>


<h6>所有table都可以用不同类型的索引来访问值,当需要容纳新条目时，table会自动增长。</h6>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='lua'><span class='line'><span class="n">a</span> <span class="o">=</span> <span class="p">{}</span>  <span class="c1">--空的table</span>
</span><span class='line'><span class="c1">--创建1000个新条目</span>
</span><span class='line'><span class="k">for</span> <span class="n">i</span><span class="o">=</span><span class="mi">1</span><span class="p">,</span><span class="mi">10000</span> <span class="k">do</span> <span class="n">a</span><span class="p">[</span><span class="n">i</span><span class="p">]</span> <span class="o">=</span> <span class="n">i</span><span class="o">*</span><span class="mi">2</span> <span class="k">end</span>
</span><span class='line'><span class="nb">print</span><span class="p">(</span><span class="n">a</span><span class="p">[</span><span class="mi">9</span><span class="p">])</span> <span class="c1">--&gt;18</span>
</span><span class='line'><span class="n">a</span><span class="p">[</span><span class="s2">&quot;</span><span class="s">x&quot;</span><span class="p">]</span> <span class="o">=</span> <span class="mi">10</span>
</span><span class='line'><span class="nb">print</span><span class="p">(</span><span class="n">a</span><span class="p">[</span><span class="s2">&quot;</span><span class="s">x&quot;</span><span class="p">])</span>  <span class="c1">--&gt;10</span>
</span><span class='line'><span class="nb">print</span><span class="p">(</span><span class="n">a</span><span class="p">[</span><span class="s2">&quot;</span><span class="s">y&quot;</span><span class="p">])</span>  <span class="c1">--&gt;nil</span>
</span><span class='line'><span class="n">a</span><span class="p">.</span><span class="n">x</span> <span class="o">=</span> <span class="mi">10</span>  <span class="c1">-- 等同于a[&quot;x&quot;] = 10</span>
</span><span class='line'><span class="nb">print</span><span class="p">(</span><span class="n">a</span><span class="p">.</span><span class="n">x</span><span class="p">)</span>  <span class="c1">-- 等同于print(a[&quot;x&quot;])</span>
</span><span class='line'><span class="nb">print</span><span class="p">(</span><span class="n">a</span><span class="p">.</span><span class="n">y</span><span class="p">)</span>  <span class="c1">-- 等同于print(a[&quot;y&quot;])</span>
</span><span class='line'><span class="c1">-- a.x和a[x]是不同的。前者表示a[&quot;x&quot;]，后者表示以变量x的值来索引table。</span>
</span></code></pre></td></tr></table></div></figure>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[读《Lua程序设计》笔记--函数]]></title>
    <link href="http://ajia.github.com/blog/2014/04/19/du-luacheng-xu-she-ji-bi-ji/"/>
    <updated>2014-04-19T10:02:00+08:00</updated>
    <id>http://ajia.github.com/blog/2014/04/19/du-luacheng-xu-she-ji-bi-ji</id>
    <content type="html"><![CDATA[<!-- more -->


<p>a.多重返回值</p>

<p>Lua允许函数返回多个结果，只需在return关键字后列出所有的返回值即可</p>

<figure class='code'><figcaption><span>查找数组中的最大元素</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='lua'><span class='line'><span class="k">function</span> <span class="nf">maximum</span><span class="p">(</span><span class="n">a</span><span class="p">)</span>
</span><span class='line'><span class="kd">local</span> <span class="n">mi</span> <span class="o">=</span> <span class="mi">1</span>  <span class="c1">--最大值的索引</span>
</span><span class='line'><span class="kd">local</span> <span class="n">m</span> <span class="o">=</span> <span class="n">a</span><span class="p">[</span><span class="n">mi</span><span class="p">]</span>  <span class="c1">--最大值</span>
</span><span class='line'>  <span class="k">for</span> <span class="n">i</span><span class="p">,</span><span class="n">val</span> <span class="k">in</span> <span class="nb">ipairs</span><span class="p">(</span><span class="n">a</span><span class="p">)</span> <span class="k">do</span>
</span><span class='line'>    <span class="k">if</span> <span class="n">val</span><span class="o">&gt;</span><span class="n">m</span> <span class="k">then</span>
</span><span class='line'>      <span class="n">mi</span> <span class="o">=</span> <span class="n">i</span><span class="p">;</span> <span class="n">m</span><span class="o">=</span><span class="n">val</span>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">return</span> <span class="n">m</span><span class="p">,</span> <span class="n">mi</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'><span class="nb">print</span> <span class="p">(</span><span class="n">maximum</span><span class="p">({</span><span class="mi">8</span><span class="p">,</span><span class="mi">10</span><span class="p">,</span><span class="mi">23</span><span class="p">,</span><span class="mi">12</span><span class="p">,</span><span class="mi">5</span><span class="p">}))</span>  <span class="c1">--&gt;23  3</span>
</span></code></pre></td></tr></table></div></figure>


<p>b.变长参数</p>

<figure class='code'><figcaption><span>返回所有参数的总和</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='lua'><span class='line'><span class="k">function</span> <span class="nf">add</span><span class="p">(</span><span class="o">...</span><span class="p">)</span>
</span><span class='line'>    <span class="kd">local</span> <span class="n">s</span> <span class="o">=</span> <span class="mi">0</span>
</span><span class='line'>    <span class="k">for</span> <span class="n">i</span><span class="p">,</span><span class="n">v</span> <span class="k">in</span> <span class="nb">ipairs</span><span class="p">({</span><span class="o">...</span><span class="p">})</span> <span class="k">do</span>  <span class="c1">--ipairs({...})可以简写为ipairs{...}</span>
</span><span class='line'>        <span class="n">s</span> <span class="o">=</span> <span class="n">s</span> <span class="o">+</span> <span class="n">v</span>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'>    <span class="k">return</span> <span class="n">s</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'><span class="nb">print</span><span class="p">(</span><span class="n">add</span><span class="p">(</span><span class="mi">3</span><span class="p">,</span><span class="mi">4</span><span class="p">,</span><span class="mi">10</span><span class="p">,</span><span class="mi">25</span><span class="p">,</span><span class="mi">12</span><span class="p">))</span> <span class="c1">--&gt;54</span>
</span></code></pre></td></tr></table></div></figure>


<p>表达式“&#8230;”的行为类似于一个具有多重返回值的函数，它返回的是当前函数的所有变长参数</p>

<p>c.具名参数
虽然Lua不支持</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='lua'><span class='line'><span class="n">rename</span><span class="p">(</span><span class="n">old</span><span class="o">=</span><span class="s2">&quot;</span><span class="s">temp.lua&quot;</span><span class="p">,</span> <span class="n">new</span><span class="o">=</span><span class="s2">&quot;</span><span class="s">temp1.lua&quot;</span><span class="p">)</span>  <span class="c1">--无效的演示代码</span>
</span></code></pre></td></tr></table></div></figure>


<p>这样的语法，但是可以将所有的实参组织到一个table中，并将这个table作为唯一的实参传给函数。当实参只有一个table的构造式时，函数调用中的圆括号是可有可无的：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='lua'><span class='line'><span class="k">function</span> <span class="nf">rename</span><span class="p">(</span><span class="n">arg</span><span class="p">)</span>
</span><span class='line'>    <span class="k">return</span> <span class="nb">os.rename</span><span class="p">(</span><span class="n">arg</span><span class="p">.</span><span class="n">old</span><span class="p">,</span> <span class="n">arg</span><span class="p">.</span><span class="n">new</span><span class="p">)</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'><span class="n">rename</span><span class="p">{</span><span class="n">old</span><span class="o">=</span><span class="s2">&quot;</span><span class="s">temp.lua&quot;</span><span class="p">,</span> <span class="n">new</span><span class="o">=</span><span class="s2">&quot;</span><span class="s">temp1.lua&quot;</span><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[curl用法(转)]]></title>
    <link href="http://ajia.github.com/blog/2014/04/18/curlyong-fa-zhuan/"/>
    <updated>2014-04-18T17:52:00+08:00</updated>
    <id>http://ajia.github.com/blog/2014/04/18/curlyong-fa-zhuan</id>
    <content type="html"><![CDATA[<!-- more -->


<p>curl可以模仿浏览器，可以当下载器，当你只是在处理一些shell工作时、测试，要图形界面干嘛？或者，要一个下载器干嘛。</p>

<p>基本用法（配合sed/awk/grep）</p>

<pre><code>$curl http: //bpsky.net
</code></pre>

<p>下载保存</p>

<pre><code>$curl http://bpsky.net &gt; index.html
$curl -o index.html http://bpsky.net
$curl -O http://bpsky.net/target.tar.gz
</code></pre>

<p>通过代理</p>

<pre><code>$curl -x  123.45 . 67.89 : 1080  -o page.html http://bpsky.net
</code></pre>

<p>保存cookie</p>

<pre><code>$curl -x  123.45 . 67.89 : 1080  -o page1.html -D cookie0001.txt http://bpsky.net
</code></pre>

<p>使用cookie</p>

<pre><code>$curl -x  123.45 . 67.89 : 1080  -o page1.html -D cookie0002.txt -b cookie0001.txt http://bpsky.net
</code></pre>

<p>模仿浏览器</p>

<pre><code>$curl -A  "Mozilla/4.0 (compatible; MSIE 6.0; Windows NT 5.0)"  -x  123.45 . 67.89 : 1080  -o page.html -D cookie0001.txt http://bpsky.net
</code></pre>

<p>伪造referer</p>

<pre><code>$curl -A  "Mozilla/4.0 (compatible; MSIE 6.0; Windows NT 5.0)"  -x  123.45 . 67.89 : 1080  -e  "mail.yahoo.com"  -o page.html -D cookie0001.txt http://bpsky.net
</code></pre>

<p>循环下载</p>

<pre><code>$curl -O http://cgi2.tky.3web.ne.jp/~zzh/screen[1-10].JPG
</code></pre>

<p>循环（匹配）下载</p>

<pre><code>$curl -O http://cgi2.tky.3web.ne.jp/~{zzh,nick}/[001-201].JPG  # &gt;like zzh/001.JPG
</code></pre>

<p>循环（引用）下载</p>

<pre><code>$curl -o #2_#1.jpg http://cgi2.tky.3web.ne.jp/~{zzh,nick}/[001-201].JPG # like &gt;001_zzh.jpg
</code></pre>

<p>断点续传</p>

<pre><code>$curl -c -O http://cgi2.tky.3wb.ne.jp/~zzh/screen1.JPG 
</code></pre>

<p>分块下载</p>

<pre><code>$curl -r  0 - 10240  -o  "zhao.part1"  http://cgi2.tky.3web.ne.jp/~zzh/zhao1.mp3 &amp;\ 
$curl -r 10241 - 20480  -o  "zhao.part1"  http://cgi2.tky.3web.ne.jp/~zzh/zhao1.mp3 &amp;\ 
$curl -r 20481 - 40960  -o  "zhao.part1"  http://cgi2.tky.3web.ne.jp/~zzh/zhao1.mp3 &amp;\ 
$curl -r 40961 - -o  "zhao.part1"  http://cgi2.tky.3web.ne.jp/~zzh/zhao1.mp3
...
$cat zhao.part* &gt; zhao.mp3
</code></pre>

<p>GET 上传</p>

<pre><code>$curl http://www.yahoo.com/login.cgi?user=nickwolfe&amp;password=12345  
</code></pre>

<p>POST 上传</p>

<pre><code>$curl -d "user=nickwolfe&amp;password=12345" http://www.yahoo.com/login.cgi
</code></pre>

<p>POST 文件上传</p>

<pre><code>$curl -F upload= $localfile  -F $btn_name=$btn_value http://cgi2.tky.3web.ne.jp/~zzh/up_file.cgi
</code></pre>

<h6>#（转自：http://www.cnblogs.com/bugY/archive/2012/06/05/2537030.html）</h6>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[DOOM3在Mac OSX中的编译过程]]></title>
    <link href="http://ajia.github.com/blog/2014/04/08/doom3zai-mac-osxzhong-de-bian-yi-guo-cheng/"/>
    <updated>2014-04-08T18:51:00+08:00</updated>
    <id>http://ajia.github.com/blog/2014/04/08/doom3zai-mac-osxzhong-de-bian-yi-guo-cheng</id>
    <content type="html"><![CDATA[<!-- more -->


<p>听说DOOM3的源码编写的很优美，所以就想亲自编译试试。这个过程中果然出现了很多问题，就找到了这篇文章<a href="http://fabiensanglard.net/doom3_macosx/index.php">Doom3 compilation instructions for Mac OS X</a>。是2011年写的，有的步骤已经不用做了。</p>

<ol>
<li><p>修改Architecture和Target SDK
把&#8221;Architectures&#8221;从&#8221;ppc i386&#8221;修改为&#8221;32-bit Intel&#8221;
改变baseSDK 为 &#8220;Latest MacOSX&#8221;</p></li>
<li><p>修改丢失的框架引用
 重新添加Carbon.framework, IOKit.framework, OpenGL.framework, CoreAudio.framework 引用到 Doom3 项目</p></li>
<li><p>修改ppc_intrinsics.h.（这步已经OK）</p></li>
<li><p>修改Id linker 参数
设置Inline Methods Hidden 为 &#8220;No&#8221;
设置Symbols Hidden by Default 为 &#8220;No&#8221;</p></li>
<li><p>修改C++代码（这步已OK）</p></li>
<li><p>修改更多的C++代码
这步看一下文章的里的说明</p></li>
<li><p>修改编译器
把所有的编译器都改成LLVM GCC 4.2</p></li>
<li><p>修改OpenAL weak reference
删除-weak_framework OpenAL，并且添加OpenAL.framework</p></li>
<li><p>删除旧版的curl lib reference
删除curl项目的引用，添加libcurl.dylib到Doom3项目的框架列表中</p></li>
<li><p>Don&#8217;t build unused architectures.
设置&#8221;Build active Architecture only&#8221;为 Yes</p></li>
<li><p>为链接器添加库
添加库文件game.dylib、libidklib_pic.a</p></li>
<li><p>添加游戏资源（assets）
需要把游戏的base目录考到项目中去</p></li>
<li><p>链接到game.dylib</p></li>
</ol>


<p>如果你启动游戏的时候出错：</p>

<pre><code>Dyld Error Message:
Library not loaded: /usr/local/lib/game.dylib
Referenced from: /Users/dev/TTimo-doom3.gpl-1559777/neo/sys/osx/build/Debug/Doom 3.app/Contents/MacOS/Doom 3
Reason: image not found
</code></pre>

<p>有两个解决方案：
1.拷贝 game.dylib 到 /usr/local/lib，或者用lnm命令建立一个软连接</p>

<p>2.设置&#8221;Dynamic Library Install Name&#8221;为&#8221;&#8220;,这样Doom3就会在当前目录找game.dylib</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Unix Create a Symbolic Link]]></title>
    <link href="http://ajia.github.com/blog/2014/04/07/unix-create-a-symbolic-link/"/>
    <updated>2014-04-07T22:52:00+08:00</updated>
    <id>http://ajia.github.com/blog/2014/04/07/unix-create-a-symbolic-link</id>
    <content type="html"><![CDATA[<!-- more -->


<p>UNIX系统中这样来创建一个软连接（symbolic link）:</p>

<pre><code>$ ln -s {/path/to/file-name} {link-name}
$ ln -s /shared/sales/data/file.txt sales.data.txt
$ vi sales.data.txt
$ ls -l sales.data.txt
</code></pre>

<p>怎样删除软连接呢？很简单，这样：</p>

<pre><code>$ rm {link-name}
$ rm sales.data.txt
$ ls -l
$ ls -l /shared/sales/data/file.txt
</code></pre>

<p>如果你删除了软连接（比如sales.data.txt），它所连接的数据（/shared/sales/data/file.txt）还存在。但是，如果你删除了/shared/sales/data/file.txt，sales.data.txt将成为破坏了的连接，数据也就丢失了</p>

<p>UNIX系统中还可以创建硬连接，用法如下（就是上面的命令中把参数-s去掉）：</p>

<pre><code>$ ln {file.txt} {hard-link}
$ ln /tmp/file link-here
</code></pre>

<p>同样可以删除硬连接：</p>

<pre><code>$ rm {hard-link}
$ rm link-here
</code></pre>

<p>如果你删除了硬连接，数据还存在。如果删除了/tmp/file，还是可以通过link-here来访问数据。其实就是把数据拷贝了一份。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[解决json.dumps不能序列化datetime类型的问题]]></title>
    <link href="http://ajia.github.com/blog/2014/03/20/pythonzhong-zhuan-hua-cheng-jsonde-fang-fa-bu-neng-xu-lie-hua-datetimelei-xing-shu-ju-de-wen-ti/"/>
    <updated>2014-03-20T14:01:00+08:00</updated>
    <id>http://ajia.github.com/blog/2014/03/20/pythonzhong-zhuan-hua-cheng-jsonde-fang-fa-bu-neng-xu-lie-hua-datetimelei-xing-shu-ju-de-wen-ti</id>
    <content type="html"><![CDATA[<!-- more -->


<p>使用python自带的json.</p>

<p>dumps方法转换数据为json的时候，如果格式化的数据中有datetime类型的数据时会报错</p>

<pre><code>TypeError: datetime.datetime(2014, 03, 20, 12, 10, 44) is not JSON serializable
</code></pre>

<p>查了一下，找到如下的方法:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'>  <span class="kn">import</span> <span class="nn">json</span>
</span><span class='line'>  <span class="kn">from</span> <span class="nn">datetime</span> <span class="kn">import</span> <span class="n">date</span><span class="p">,</span> <span class="n">datetime</span>
</span><span class='line'>  <span class="k">class</span> <span class="nc">MyEncoder</span><span class="p">(</span><span class="n">json</span><span class="o">.</span><span class="n">JSONEncoder</span><span class="p">):</span>
</span><span class='line'>    <span class="k">def</span> <span class="nf">default</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">obj</span><span class="p">):</span>
</span><span class='line'>        <span class="c"># if isinstance(obj, datetime.datetime):</span>
</span><span class='line'>        <span class="c">#     return int(mktime(obj.timetuple()))</span>
</span><span class='line'>        <span class="k">if</span> <span class="nb">isinstance</span><span class="p">(</span><span class="n">obj</span><span class="p">,</span> <span class="n">datetime</span><span class="p">):</span>
</span><span class='line'>            <span class="k">return</span> <span class="n">obj</span><span class="o">.</span><span class="n">strftime</span><span class="p">(</span><span class="s">&#39;%Y-%m-</span><span class="si">%d</span><span class="s"> %H:%M:%S&#39;</span><span class="p">)</span>
</span><span class='line'>        <span class="k">elif</span> <span class="nb">isinstance</span><span class="p">(</span><span class="n">obj</span><span class="p">,</span> <span class="n">date</span><span class="p">):</span>
</span><span class='line'>            <span class="k">return</span> <span class="n">obj</span><span class="o">.</span><span class="n">strftime</span><span class="p">(</span><span class="s">&#39;%Y-%m-</span><span class="si">%d</span><span class="s">&#39;</span><span class="p">)</span>
</span><span class='line'>        <span class="k">else</span><span class="p">:</span>
</span><span class='line'>            <span class="k">return</span> <span class="n">json</span><span class="o">.</span><span class="n">JSONEncoder</span><span class="o">.</span><span class="n">default</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">obj</span><span class="p">)</span>
</span><span class='line'>     <span class="k">print</span> <span class="n">json</span><span class="o">.</span><span class="n">dumps</span><span class="p">(</span><span class="n">dataMap</span><span class="p">,</span> <span class="n">cls</span><span class="o">=</span><span class="n">MyEncoder</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<p></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Python的集合运算]]></title>
    <link href="http://ajia.github.com/blog/2014/03/19/pythonde-ji-he-yun-suan/"/>
    <updated>2014-03-19T16:59:00+08:00</updated>
    <id>http://ajia.github.com/blog/2014/03/19/pythonde-ji-he-yun-suan</id>
    <content type="html"><![CDATA[<!-- more -->


<p>python用来写一些提高工作效率的脚本真的非常方便，我越来越喜欢这门简单又强大的语言了。为了计算出两个list之间的交集、并集和差集，查了一下记录在下面：</p>

<h3>获取两个list的交集</h3>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="c">#方法一:</span>
</span><span class='line'><span class="n">a</span><span class="o">=</span><span class="p">[</span><span class="mi">2</span><span class="p">,</span><span class="mi">3</span><span class="p">,</span><span class="mi">4</span><span class="p">,</span><span class="mi">5</span><span class="p">]</span>
</span><span class='line'><span class="n">b</span><span class="o">=</span><span class="p">[</span><span class="mi">2</span><span class="p">,</span><span class="mi">5</span><span class="p">,</span><span class="mi">8</span><span class="p">]</span>
</span><span class='line'><span class="n">tmp</span> <span class="o">=</span> <span class="p">[</span><span class="n">val</span> <span class="k">for</span> <span class="n">val</span> <span class="ow">in</span> <span class="n">a</span> <span class="k">if</span> <span class="n">val</span> <span class="ow">in</span> <span class="n">b</span><span class="p">]</span>
</span><span class='line'><span class="k">print</span> <span class="n">tmp</span>
</span><span class='line'><span class="c">#[2, 5]</span>
</span><span class='line'><span class="c">#方法二:</span>
</span><span class='line'><span class="k">print</span> <span class="nb">list</span><span class="p">(</span><span class="nb">set</span><span class="p">(</span><span class="n">a</span><span class="p">)</span><span class="o">.</span><span class="n">intersection</span><span class="p">(</span><span class="nb">set</span><span class="p">(</span><span class="n">b</span><span class="p">)))</span>
</span></code></pre></td></tr></table></div></figure>


<h3>获取两个list的并集</h3>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="k">print</span> <span class="nb">list</span><span class="p">(</span><span class="nb">set</span><span class="p">(</span><span class="n">a</span><span class="p">)</span><span class="o">.</span><span class="n">union</span><span class="p">(</span><span class="nb">set</span><span class="p">(</span><span class="n">b</span><span class="p">)))</span>
</span></code></pre></td></tr></table></div></figure>


<h3>获取两个list的差集</h3>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="k">print</span> <span class="nb">list</span><span class="p">(</span><span class="nb">set</span><span class="p">(</span><span class="n">b</span><span class="p">)</span><span class="o">.</span><span class="n">difference</span><span class="p">(</span><span class="nb">set</span><span class="p">(</span><span class="n">a</span><span class="p">)))</span> <span class="c"># b中有而a中没有的</span>
</span></code></pre></td></tr></table></div></figure>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[常用排序算法(python实现)]]></title>
    <link href="http://ajia.github.com/blog/2014/02/10/chang-yong-pai-xu-suan-pythonshi-xian/"/>
    <updated>2014-02-10T15:02:00+08:00</updated>
    <id>http://ajia.github.com/blog/2014/02/10/chang-yong-pai-xu-suan-pythonshi-xian</id>
    <content type="html"><![CDATA[<!-- more -->


<p>前段时间把主要的排序算法原理看了一遍，光看不行，还是得动手。</p>

<figure class='code'><figcaption><span>排序算法 python (Sort.py)</span> <a href='http://ajia.github.com/downloads/code/Sort.py'>download</a></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
<span class='line-number'>60</span>
<span class='line-number'>61</span>
<span class='line-number'>62</span>
<span class='line-number'>63</span>
<span class='line-number'>64</span>
<span class='line-number'>65</span>
<span class='line-number'>66</span>
<span class='line-number'>67</span>
<span class='line-number'>68</span>
<span class='line-number'>69</span>
<span class='line-number'>70</span>
<span class='line-number'>71</span>
<span class='line-number'>72</span>
<span class='line-number'>73</span>
<span class='line-number'>74</span>
<span class='line-number'>75</span>
<span class='line-number'>76</span>
<span class='line-number'>77</span>
<span class='line-number'>78</span>
<span class='line-number'>79</span>
<span class='line-number'>80</span>
<span class='line-number'>81</span>
<span class='line-number'>82</span>
<span class='line-number'>83</span>
<span class='line-number'>84</span>
<span class='line-number'>85</span>
<span class='line-number'>86</span>
<span class='line-number'>87</span>
</pre></td><td class='code'><pre><code class='py'><span class='line'><span class="c">#!--</span>
</span><span class='line'><span class="c">#ChooseSort</span>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'><span class="k">class</span> <span class="nc">Sort</span><span class="p">(</span><span class="nb">list</span><span class="p">):</span>
</span><span class='line'>    <span class="k">def</span> <span class="nf">__init__</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="nb">list</span><span class="p">):</span>
</span><span class='line'>        <span class="bp">self</span><span class="o">.</span><span class="n">list</span> <span class="o">=</span> <span class="nb">list</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">def</span> <span class="nf">swap</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">i</span><span class="p">,</span> <span class="n">j</span><span class="p">):</span>
</span><span class='line'>        <span class="nb">list</span><span class="p">[</span><span class="n">i</span><span class="p">],</span> <span class="nb">list</span><span class="p">[</span><span class="n">j</span><span class="p">]</span> <span class="o">=</span> <span class="nb">list</span><span class="p">[</span><span class="n">j</span><span class="p">],</span> <span class="nb">list</span><span class="p">[</span><span class="n">i</span><span class="p">]</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">def</span> <span class="nf">show</span><span class="p">(</span><span class="bp">self</span><span class="p">):</span>
</span><span class='line'>        <span class="k">print</span> <span class="s">&quot; &quot;</span><span class="o">.</span><span class="n">join</span><span class="p">(</span><span class="nb">str</span><span class="p">(</span><span class="n">v</span><span class="p">)</span> <span class="k">for</span> <span class="n">v</span> <span class="ow">in</span> <span class="nb">list</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">def</span> <span class="nf">select_sort</span><span class="p">(</span><span class="bp">self</span><span class="p">):</span>
</span><span class='line'>        <span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span> <span class="nb">len</span><span class="p">(</span><span class="nb">list</span><span class="p">)</span><span class="o">-</span><span class="mi">1</span><span class="p">):</span>
</span><span class='line'>            <span class="nb">min</span> <span class="o">=</span> <span class="n">i</span>
</span><span class='line'>            <span class="k">for</span> <span class="n">j</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="n">i</span><span class="o">+</span><span class="mi">1</span><span class="p">,</span> <span class="nb">len</span><span class="p">(</span><span class="nb">list</span><span class="p">)):</span>
</span><span class='line'>                <span class="k">if</span> <span class="nb">list</span><span class="p">[</span><span class="n">j</span><span class="p">]</span> <span class="o">&lt;</span> <span class="nb">list</span><span class="p">[</span><span class="nb">min</span><span class="p">]:</span>
</span><span class='line'>                    <span class="nb">min</span> <span class="o">=</span> <span class="n">j</span>
</span><span class='line'>            <span class="bp">self</span><span class="o">.</span><span class="n">swap</span><span class="p">(</span><span class="nb">min</span><span class="p">,</span> <span class="n">i</span><span class="p">)</span>
</span><span class='line'>        <span class="k">return</span> <span class="nb">list</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">def</span> <span class="nf">insert_sort</span><span class="p">(</span><span class="bp">self</span><span class="p">):</span>
</span><span class='line'>        <span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="mi">1</span><span class="p">,</span> <span class="nb">len</span><span class="p">(</span><span class="nb">list</span><span class="p">)):</span>
</span><span class='line'>            <span class="n">temp</span> <span class="o">=</span> <span class="nb">list</span><span class="p">[</span><span class="n">i</span><span class="p">]</span>
</span><span class='line'>            <span class="n">j</span> <span class="o">=</span> <span class="n">i</span><span class="o">-</span><span class="mi">1</span>
</span><span class='line'>            <span class="k">while</span> <span class="n">j</span> <span class="o">&gt;=</span> <span class="mi">0</span> <span class="ow">and</span> <span class="n">temp</span> <span class="o">&lt;</span> <span class="nb">list</span><span class="p">[</span><span class="n">j</span><span class="p">]:</span>
</span><span class='line'>                <span class="nb">list</span><span class="p">[</span><span class="n">j</span><span class="o">+</span><span class="mi">1</span><span class="p">]</span> <span class="o">=</span> <span class="nb">list</span><span class="p">[</span><span class="n">j</span><span class="p">]</span>
</span><span class='line'>                <span class="n">j</span> <span class="o">-=</span> <span class="mi">1</span>
</span><span class='line'>            <span class="nb">list</span><span class="p">[</span><span class="n">j</span><span class="o">+</span><span class="mi">1</span><span class="p">]</span> <span class="o">=</span> <span class="n">temp</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">def</span> <span class="nf">quick_sort</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">low</span><span class="o">=</span><span class="mi">0</span><span class="p">,</span> <span class="n">high</span><span class="o">=</span><span class="bp">None</span><span class="p">):</span>
</span><span class='line'>        <span class="k">if</span> <span class="n">high</span> <span class="o">==</span> <span class="bp">None</span><span class="p">:</span>
</span><span class='line'>            <span class="n">high</span> <span class="o">=</span> <span class="nb">len</span><span class="p">(</span><span class="nb">list</span><span class="p">)</span> <span class="o">-</span> <span class="mi">1</span>
</span><span class='line'>        <span class="k">if</span> <span class="n">low</span> <span class="o">&lt;</span> <span class="n">high</span><span class="p">:</span>
</span><span class='line'>            <span class="n">s</span><span class="p">,</span> <span class="n">i</span><span class="p">,</span> <span class="n">j</span> <span class="o">=</span> <span class="nb">list</span><span class="p">[</span><span class="n">low</span><span class="p">],</span> <span class="n">low</span><span class="p">,</span> <span class="n">high</span>
</span><span class='line'>            <span class="k">while</span> <span class="bp">True</span><span class="p">:</span>
</span><span class='line'>                <span class="k">while</span> <span class="n">i</span> <span class="o">!=</span> <span class="n">high</span> <span class="ow">and</span> <span class="nb">list</span><span class="p">[</span><span class="n">i</span><span class="p">]</span> <span class="o">&lt;</span> <span class="n">s</span><span class="p">:</span>
</span><span class='line'>                    <span class="n">i</span> <span class="o">=</span> <span class="n">i</span> <span class="o">+</span> <span class="mi">1</span>
</span><span class='line'>                <span class="c"># if i &lt; j:</span>
</span><span class='line'>                <span class="c">#     list[i] = list[j]</span>
</span><span class='line'>                <span class="c">#     i = i + 1</span>
</span><span class='line'>                <span class="k">while</span> <span class="n">j</span> <span class="o">!=</span><span class="n">low</span> <span class="ow">and</span> <span class="nb">list</span><span class="p">[</span><span class="n">j</span><span class="p">]</span> <span class="o">&gt;</span> <span class="n">s</span><span class="p">:</span>
</span><span class='line'>                    <span class="n">j</span> <span class="o">=</span> <span class="n">j</span> <span class="o">-</span> <span class="mi">1</span>
</span><span class='line'>                <span class="c"># if i &lt; j:</span>
</span><span class='line'>                <span class="c">#     list[j] = list[i]</span>
</span><span class='line'>                <span class="c">#     j = j - 1</span>
</span><span class='line'>                <span class="k">if</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="n">j</span><span class="p">:</span>
</span><span class='line'>                    <span class="nb">list</span><span class="p">[</span><span class="n">j</span><span class="p">],</span> <span class="nb">list</span><span class="p">[</span><span class="n">i</span><span class="p">]</span> <span class="o">=</span> <span class="nb">list</span><span class="p">[</span><span class="n">i</span><span class="p">],</span> <span class="nb">list</span><span class="p">[</span><span class="n">j</span><span class="p">]</span>
</span><span class='line'>                <span class="k">else</span><span class="p">:</span>
</span><span class='line'>                    <span class="k">break</span>
</span><span class='line'>            <span class="nb">list</span><span class="p">[</span><span class="n">j</span><span class="p">],</span> <span class="n">s</span> <span class="o">=</span> <span class="n">s</span><span class="p">,</span> <span class="nb">list</span><span class="p">[</span><span class="n">j</span><span class="p">]</span>
</span><span class='line'>            <span class="bp">self</span><span class="o">.</span><span class="n">quick_sort</span><span class="p">(</span><span class="n">low</span><span class="p">,</span> <span class="n">i</span> <span class="o">-</span> <span class="mi">1</span><span class="p">)</span>
</span><span class='line'>            <span class="bp">self</span><span class="o">.</span><span class="n">quick_sort</span><span class="p">(</span><span class="n">i</span> <span class="o">+</span> <span class="mi">1</span><span class="p">,</span> <span class="n">high</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">def</span> <span class="nf">bubble_sort</span><span class="p">(</span><span class="bp">self</span><span class="p">):</span>
</span><span class='line'>        <span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="nb">len</span><span class="p">(</span><span class="nb">list</span><span class="p">)</span> <span class="o">-</span> <span class="mi">1</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="o">-</span><span class="mi">1</span><span class="p">):</span>
</span><span class='line'>            <span class="k">for</span> <span class="n">j</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span> <span class="n">i</span><span class="p">):</span>
</span><span class='line'>                <span class="k">if</span> <span class="nb">list</span><span class="p">[</span><span class="n">j</span><span class="p">]</span> <span class="o">&gt;</span> <span class="nb">list</span><span class="p">[</span><span class="n">j</span> <span class="o">+</span> <span class="mi">1</span><span class="p">]:</span>
</span><span class='line'>                    <span class="nb">list</span><span class="p">[</span><span class="n">j</span><span class="p">],</span> <span class="nb">list</span><span class="p">[</span><span class="n">j</span> <span class="o">+</span> <span class="mi">1</span><span class="p">]</span> <span class="o">=</span> <span class="nb">list</span><span class="p">[</span><span class="n">j</span> <span class="o">+</span> <span class="mi">1</span><span class="p">],</span> <span class="nb">list</span><span class="p">[</span><span class="n">j</span><span class="p">]</span>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'><span class="k">if</span> <span class="n">__name__</span> <span class="o">==</span> <span class="s">&quot;__main__&quot;</span><span class="p">:</span>
</span><span class='line'>    <span class="nb">list</span> <span class="o">=</span> <span class="p">[</span><span class="mi">6</span><span class="p">,</span> <span class="mi">4</span><span class="p">,</span> <span class="mi">1</span><span class="p">,</span> <span class="mi">9</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">7</span><span class="p">,</span> <span class="mi">10</span><span class="p">,</span> <span class="mi">3</span><span class="p">]</span>
</span><span class='line'>    <span class="k">print</span> <span class="s">&#39;select_sort&#39;</span>
</span><span class='line'>    <span class="n">s</span> <span class="o">=</span> <span class="n">Sort</span><span class="p">(</span><span class="nb">list</span><span class="p">)</span>
</span><span class='line'>    <span class="n">s</span><span class="o">.</span><span class="n">select_sort</span><span class="p">()</span>
</span><span class='line'>    <span class="n">s</span><span class="o">.</span><span class="n">show</span><span class="p">()</span>
</span><span class='line'>
</span><span class='line'>    <span class="nb">list</span> <span class="o">=</span> <span class="p">[</span><span class="mi">6</span><span class="p">,</span> <span class="mi">4</span><span class="p">,</span> <span class="mi">1</span><span class="p">,</span> <span class="mi">9</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">7</span><span class="p">,</span> <span class="mi">10</span><span class="p">,</span> <span class="mi">3</span><span class="p">]</span>
</span><span class='line'>    <span class="k">print</span> <span class="s">&#39;insert_sort&#39;</span>
</span><span class='line'>    <span class="n">s</span> <span class="o">=</span> <span class="n">Sort</span><span class="p">(</span><span class="nb">list</span><span class="p">)</span>
</span><span class='line'>    <span class="n">s</span><span class="o">.</span><span class="n">insert_sort</span><span class="p">()</span>
</span><span class='line'>    <span class="n">s</span><span class="o">.</span><span class="n">show</span><span class="p">()</span>
</span><span class='line'>
</span><span class='line'>    <span class="nb">list</span> <span class="o">=</span> <span class="p">[</span><span class="mi">6</span><span class="p">,</span> <span class="mi">4</span><span class="p">,</span> <span class="mi">1</span><span class="p">,</span> <span class="mi">9</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">7</span><span class="p">,</span> <span class="mi">10</span><span class="p">,</span> <span class="mi">3</span><span class="p">]</span>
</span><span class='line'>    <span class="k">print</span> <span class="s">&#39;quick_sort&#39;</span>
</span><span class='line'>    <span class="n">s</span> <span class="o">=</span> <span class="n">Sort</span><span class="p">(</span><span class="nb">list</span><span class="p">)</span>
</span><span class='line'>    <span class="n">s</span><span class="o">.</span><span class="n">quick_sort</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span> <span class="nb">len</span><span class="p">(</span><span class="nb">list</span><span class="p">)</span><span class="o">-</span><span class="mi">1</span><span class="p">)</span>
</span><span class='line'>    <span class="n">s</span><span class="o">.</span><span class="n">show</span><span class="p">()</span>
</span><span class='line'>
</span><span class='line'>    <span class="nb">list</span> <span class="o">=</span> <span class="p">[</span><span class="mi">6</span><span class="p">,</span> <span class="mi">4</span><span class="p">,</span> <span class="mi">1</span><span class="p">,</span> <span class="mi">9</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">7</span><span class="p">,</span> <span class="mi">10</span><span class="p">,</span> <span class="mi">3</span><span class="p">]</span>
</span><span class='line'>    <span class="k">print</span> <span class="s">&#39;bubble_sort&#39;</span>
</span><span class='line'>    <span class="n">s</span> <span class="o">=</span> <span class="n">Sort</span><span class="p">(</span><span class="nb">list</span><span class="p">)</span>
</span><span class='line'>    <span class="n">s</span><span class="o">.</span><span class="n">bubble_sort</span><span class="p">()</span>
</span><span class='line'>    <span class="n">s</span><span class="o">.</span><span class="n">show</span><span class="p">()</span>
</span></code></pre></td></tr></table></div></figure>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[xcode常用快捷键]]></title>
    <link href="http://ajia.github.com/blog/2013/10/15/xcodechang-yong-kuai-jie-jian/"/>
    <updated>2013-10-15T10:48:00+08:00</updated>
    <id>http://ajia.github.com/blog/2013/10/15/xcodechang-yong-kuai-jie-jian</id>
    <content type="html"><![CDATA[<!-- more -->


<p>熟练使用快捷键能极大的提高效率，在此记录一下常用的xcode快捷键：</p>

<ol>
<li><p>esc 　　　　           自动完成, 作用和VS中的ctrl+j类似，像 Eclipse 的 alt+/</p></li>
<li><p>command + /　　               注释代码和反注释，用 //，相当于 Eclipse 的 ctrl+/</p></li>
<li><h3>control + command + 上/下箭头　 快速在头文件（.h）和实现文件（.m）之间切换</h3></li>
<li><p>command + b　　           编译程序，不运行</p></li>
<li><p>command + r　　      编译并运行程序</p></li>
<li><p>command + shift + b　　       分析代码，找到潜在内存溢出问题</p></li>
<li><p>command  + 单击         跳转到声明</p></li>
<li><p>option + 单击             弹出层中显示帮助信息</p></li>
<li><p>option + command + 左/右 方向键，折叠/打开当前方法</p></li>
<li><p>control + command + f           Xcode 全屏，在 Lion 上支持</p></li>
<li><p>command + shit + y             打开/关闭控制台窗口</p></li>
<li><p>control + k              清理控制台</p></li>
<li><p>control + command + 左/右方向键，在历史的上/下一个文件中切换,或用两个手指左右滑动。command 代替 PC 键盘上的许多操作，像 Ctrl+V, Ctrl+C, Ctrl+Z，都该用 cmd+V, Cmd+C, Cmd+Z</p></li>
<li><p>tab          接受当前的自动完成</p></li>
<li><p>双击中括号或者大括号，可以选择相应的封闭语句块</p></li>
<li><h3>command - shift - o: 快速搜索打开文件</h3></li>
<li><p>control 配合 1/2/3/4/5/6 键 : 可以快速打开相关文件/类或代码，我常用 control+1 显示打开的文件，control+6 显示当前类中的变量或方法，都可以输入来过滤</p></li>
<li><p>command 配合 1/2/3/4/5/6/7 依次显示左边导航中每一个标签的子视图，commandco+ 0 打开或关闭左边导航</p></li>
<li><p>option + command 配合 1/2/3/4/5/6 依次打开右边属性窗口的每一个标签视图，特别是在 xib 时 常用，用 option + command + 0 关闭右边属性窗口</p></li>
<li><p>command + shift + j 在左边导航中定位当前打开的文件</p></li>
<li><p>command + return 切换到标准编辑器</p></li>
<li><p>option + command + return 切换到辅助编辑器，左右可以对比，特别方便编辑 xib 时进行拖拉关联</p></li>
<li><p>command+shift+f        进行 Search</p></li>
<li><p>f7            调试时 Step Into</p></li>
<li><p>f6            调试时 Step Over</p></li>
<li><p>f8            调试时 Step Out</p></li>
<li><p>control + command + y : debug断点时continue</p></li>
<li><p>command + \  ： 当前行设置/取消断点</p></li>
<li><p>command + y  全局激活或禁用所有的断点</p></li>
<li><p>command+ 左/右方向键 跳到行首/行尾</p></li>
<li><p>option + 左/右方向键 向前/后跳一个单词</p></li>
<li><p>option + delete 向前删除一个单词</p></li>
<li><p>fn + option + delete 向后删除一个单词</p></li>
<li><p>command + delete 删除当前行中光标前所有字符</p></li>
<li><p>fn + command + delete 删除当前行中光标后所有字符</p></li>
</ol>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[RethinkDB 创始人总结的 57 条创业经验]]></title>
    <link href="http://ajia.github.com/blog/2013/08/19/rethinkdb-chuang-shi-ren-zong-jie-de-57-tiao-chuang-ye-jing-yan/"/>
    <updated>2013-08-19T15:51:00+08:00</updated>
    <id>http://ajia.github.com/blog/2013/08/19/rethinkdb-chuang-shi-ren-zong-jie-de-57-tiao-chuang-ye-jing-yan</id>
    <content type="html"><![CDATA[<!-- more -->


<p>总部位于旧金山的云计算数据库服务公司RethinkDB创始人斯拉瓦·阿克麦切特（Slava Akhmechet）日前发表文章，总结了57条创业经验，其中涉及团队、融资、市场、产品、营销、销售、产品开发、公司管理、个人状态等9个方面。</p>

<!-- more -->


<p>以下是阿克麦切特总结的57条创业经验：</p>

<p>那些才华横溢、经验丰富的人们已经写过不少创业经验，我想要再添加一些内容。我用过去四年的艰辛总结出了这些经验。如果你打算创业，希望你的路平坦一些。</p>

<h1>团队建设</h1>

<ul>
<li><p>1、如果你的2到4人团队无法在6个月到1年内实现盈利，那么肯定出问题了。除非是你自己选择不盈利，但这必须是你的选择，而非市场原因。</p></li>
<li><p>2、在创始人中间平均分配股票。</p></li>
<li><p>3、一直有一个期权行使计划。</p></li>
<li><p>4、依据一致意见做出大多数决定，但唯一一位CEO拥有最终决定权。从第一天就明确如此。</p></li>
<li><p>5、你作为CEO的权威是赢得的，因为你是从无到有。如果赢得胜利，这种权威会随之增长，反之则会下降。不要试图滥用你没有赢得的权威。</p></li>
<li><p>6、士气是真实存在的，而且自身能够永久存在。如果长时间没有胜利，你的投资者、员工、家人，以及你自己都会失去信心。努力工作，不要陷入这种境地。</p></li>
<li><p>7、谨慎选择最初团队成员。所有人都应当开心共事，至少拥有一项企业相关的技能，效率极高且务实。所有人都应当有产品意识，在产品与公司方面拥有共同的理念。</p></li>
<li><p>8、你工作采用的标准，就是你所接受的标准。选择一小部分对你最重要的、没有谈判余地的规定，并毫不松懈地予以执行。</p></li>
<li><p>9、解雇那些难以共事、没有效率、不可靠、没有产品意识，以及不务实的人。迅速解雇。</p></li>
<li><p>10、有些磨擦是好事，但磨擦过多很要命。解雇那些制造太多磨擦的人。好工作＋坏习惯=你被解雇了。</p></li>
</ul>


<h1>资金筹集</h1>

<ul>
<li><p>11、如果在某一轮融资中你不得不放弃公司15%的控制权，那么公司肯定在某个方面出了问题。这是可以挽救的，但不是理想做法。</p></li>
<li><p>12、如果你还没有赢得人们的尊重，那么依靠吸引力融资要比依靠讲故事融资容易得多。如果你不得不依靠讲故事融资，但却没有自己的声誉，那么肯定有问题。</p></li>
<li><p>13、将自己的融资谈判当作一个至少可成活的产品，推出去之后，每次见面都重复。</p></li>
<li><p>14、大多数投资者的建议有助于公司优化和发展，虚心听取。</p></li>
<li><p>15、大多数投资者的建议无助于开发一款神奇的产品，没有人能帮你开发神奇产品，这是你自己的事情。</p></li>
<li><p>16、不要留恋于融资过程。事成之后，赶紧前进。</p></li>
</ul>


<h1>市场方面</h1>

<ul>
<li><p>17、最好的产品一定不是在真空中产生的，它们成功的原因在于它在某个领域胜出了其他所有产品。找到自己的这个领域，做最好的那个。如果没有这样一个领域，那肯定有问题。</p></li>
<li><p>18、投入到一个既能立即见效，又拥有巨大发展潜力的问题上。如果它无助于改善大量人群的生活条件，那就不值得去做。例如，谷歌(微博)填补了人们日常生活中一个巨大的空白，令数十亿人受益。它改变了人们的行为方式和认知周围世界的方式。努力去做这款拥有如此规模的产品。</p></li>
<li><p>19、刚开始树立一个正确的理念。从经验来看，这个时候你只能依此而动。</p></li>
<li><p>20、要知道，市场瞬息万变，多个团队会几乎同时想出同一个有价值的理念。</p></li>
<li><p>21、接受新观念，因为这是其他社交或技术改变促成的。尽早步入正轨，但确保技术已经足以使产品变得更好。</p></li>
<li><p>22、如果有一个过去未奏效的理念，而且没有社交或技术变革使其现在变得可行有效，那么认定它会失败。（这是又一个市场假设理论，如果一个理念可以取得成果，那么它已经实施了。只有情况发生变化之后，它才值得再次尝试。）</p></li>
<li><p>23、告诉市场，不接受你的产品意味着失去战机。坚持自己的理想和信念，但尊重客观趋势。如果你坚信世界需要诗歌，那么卖掉你的嘻哈歌曲，保留诗歌集。</p></li>
</ul>


<h1>产品方面</h1>

<ul>
<li><p>24、产品观念意味着一切，尽快掌握这种观念。擅长产品技术并不意味着擅长产品管理。</p></li>
<li><p>25、不要生产已经存在的东西。消费者不会因为它是你的就会购买。</p></li>
<li><p>26、确保自己知道用户别无选择而转向你的产品的原因，以及他们不会转回其他产品的原因。不要太相信自己，尽可能检验自己的假设。</p></li>
<li><p>27、对每个产品功能提两个问题。人们会不会因为这个功能而去购买产品？人们会不会因为缺少这个功能而不去购买？如果答不出后面这个问题，就答不出前面的问题。如果两个问题的答案都是否定的，那就不要去开发这个功能。</p></li>
<li><p>28、生产一款尽管有不足，人们也愿意买的东西，而不要生产没有不足之处于是人们应当去买的东西。前者令人愉悦并支付购买，后者无法令人愉悦。</p></li>
<li><p>29、注意“鸡”与“蛋”的产品关系，确保自己的产品能够立即使用。</p></li>
<li><p>30、注意那些可能购买你的产品的人们，以及那些只发评论的人们之间的区别。多关注前者，忽略后者。</p></li>
</ul>


<h1>营销方面</h1>

<ul>
<li><p>31、产品至上。如果人们喜欢你的产品，最小规模的发布会也会引起关注。如果人们不喜欢产品，再大的营销也无济于事。</p></li>
<li><p>32、在产品中内置营销。如果可能的话，制造YouTube效应（人们不断地在你的平台上发布有趣的内容）和Facebook效应（如果用户使用了产品，他们的朋友也会使用）。</p></li>
<li><p>33、看看电影《寿司之神》，以这种方式做营销。选择一小部分任务，持续开展工作，每天都有新进步。</p></li>
<li><p>34、定期对效率进行再评估。撤消无效做法，加倍有效做法。</p></li>
<li><p>35、不要猜，要去考察。</p></li>
<li><p>36、面向你的用户去营销。吸引那些不会购买你产品的人们的注意力，实际上就是浪费时间与金钱。</p></li>
<li><p>37、如果你的竞争对手不说反话，你就不要去说。例如，你的竞争对手说不出你的产品很慢，那么赞扬自己产品速度快就是无效营销。另一方面，你的竞争对手称自己的软件是面向某一些程序员的，那么你就说你的软件是面向另一部分程序员的，这就是不错的营销。苹果可以不遵守这个惯例，但你不能。</p></li>
<li><p>38、不要对你的用户或竞争对手使用骄傲自大的语气，这不助于你销售产品，反而会破坏你的良好声誉。</p></li>
<li><p>39、不要对批评不屑一顾。相反，用批评来改进自己的产品。如果你认真采纳其批评建议，那么最严厉的批评者往往会成为最强有力的支持者。</p></li>
</ul>


<h1>销售方面</h1>

<ul>
<li><p>40、销售能改变一切。如果产品销售出色，那么你即便搞砸了其他事情，也是可以弥补的。</p></li>
<li><p>41、产品至上。对于一款所有人都想要的产品，销售起来很容易，回报也很丰厚，但销售一款没有人需要的产品则是一个令人痛苦的数字游戏。</p></li>
<li><p>42、如果产品介于两个极端之间，那么不懈地去追求这个数字游戏吧。即便销售不好，你也会获得宝贵的经验。</p></li>
<li><p>43、致力于提高效率。在一位不可能购买你产品的用户身上花费时间，无异于什么工作都没有干。</p></li>
<li><p>44、引进比输出更容易。如果可能的话，生产一款客户向你表达了需求，并且愿意为之付费的产品。</p></li>
</ul>


<h1>产品开发</h1>

<ul>
<li><p>45、开发速度很重要。</p></li>
<li><p>46、不要复杂，产品越简单，你出货的可能性越大，你迅速修复问题的可能性也就越大。</p></li>
<li><p>47、选择一种付出20%就能获得80%回报的执行方式。</p></li>
<li><p>48、只要有可能，就选择现货定制的零部件。</p></li>
<li><p>49、采用快速的开发速率，确保这个速率不会超过一到两周。</p></li>
<li><p>50、关注长远项目。如果无法保持速率，就不要去做开发。</p></li>
<li><p>51、关注长期的修改。如果无法在速率中修改，就不要去做。</p></li>
<li><p>52、如果你不得不做不符合产品速率的东西，那么在这个过程中设置尽可能多的结构与评估轮次。</p></li>
<li><p>53、在错误的东西上工作一个月，相当于一个月没有上班。</p></li>
</ul>


<h1>公司管理</h1>

<ul>
<li><p>54、不要花太多时间来选择办公楼、会计、文员、门卫、家具、托管工具等。相信条件已经够好，不要犹豫地前进。</p></li>
<li><p>55、花时间找一位优秀的、不是很昂贵的律师。这很有必要。</p></li>
</ul>


<h1>个人状态</h1>

<ul>
<li><p>56、尽自己最大的努力，给你的创业公司贴上自己的标签（你可能会失败，但要尝度）。每天都尽全力工作，然后休息。这样在尘埃落定之后，你会因自己做过的选择而感到骄傲，无论结果如何。</p></li>
<li><p>57、每隔一段时间，就离开一次。去徒步旅行，看望另一座城市的家人，跳舞，玩象棋，打网球，任何事情。你会让你更有效率，让你周围的人们感觉快乐。</p></li>
</ul>

]]></content>
  </entry>
  
</feed>
