<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Ajia's Blog]]></title>
  <link href="http://ajia.github.com/atom.xml" rel="self"/>
  <link href="http://ajia.github.com/"/>
  <updated>2014-05-06T14:04:03+08:00</updated>
  <id>http://ajia.github.com/</id>
  <author>
    <name><![CDATA[Ajia]]></name>
    <email><![CDATA[DerekLunt@163.com]]></email>
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Mac下制作Ubuntu安装U盘]]></title>
    <link href="http://ajia.github.com/blog/2014/05/06/macxia-zhi-zuo-ubuntuan-zhuang-upan/"/>
    <updated>2014-05-06T12:02:00+08:00</updated>
    <id>http://ajia.github.com/blog/2014/05/06/macxia-zhi-zuo-ubuntuan-zhuang-upan</id>
    <content type="html"><![CDATA[<p>步骤如下：
1. 打开终端，把IOS镜像转换为DMG格式：</p>

<pre><code>HDIUTIL CONVERT -FORMAT UDRW -O ubuntukylin-13.04-desktop-i386 ubuntukylin-13.04-desktop-i386.iso
</code></pre>

<ol>
<li>查看U盘的disk编号</li>
</ol>


<p>不接入U盘的情况下在终端中输入 diskutil list</p>

<p>将U盘接入Mac，再次输入diskutil list</p>

<p>对比2次的输出，确定U盘的disk编号</p>

<p>我这里的disk编号是1</p>

<p>3、卸载USB盘（插入时已经自动挂载了），但是不要推出。在终端下：</p>

<pre><code>diskutil umountDisk /dev/disk1    
</code></pre>

<ol>
<li><p>将dmg写入U盘</p>

<p> sudo dd if=./ubuntukylin-13.04-desktop-i386.dmg of=/dev/rdisk1 bs=1m</p></li>
</ol>


<p>5、推出USB盘。在上面复制之后，系统可能会报错，“此电脑不难读取能插入的磁盘”，不必理会，直接推出即可。也可以在终端下推出：</p>

<pre><code>diskutil eject /dev/disk1
</code></pre>

<p>使用该USB盘引导启动即可进行Linux的安装。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[读Lua程序设计笔记--类型与值]]></title>
    <link href="http://ajia.github.com/blog/2014/04/19/du-luacheng-xu-she-ji-bi-ji-yu-zhi/"/>
    <updated>2014-04-19T18:30:00+08:00</updated>
    <id>http://ajia.github.com/blog/2014/04/19/du-luacheng-xu-she-ji-bi-ji-yu-zhi</id>
    <content type="html"><![CDATA[<!-- more -->


<h6>table的创建是通过“构造表达式”完成的，最简单的构造表达式就是{}。</h6>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='lua'><span class='line'><span class="n">a</span> <span class="o">=</span> <span class="p">{}</span> <span class="c1">--创建一个table, 并将它的引用存储到a</span>
</span><span class='line'><span class="n">k</span> <span class="o">=</span> <span class="s2">&quot;</span><span class="s">x&quot;</span>
</span><span class='line'><span class="n">a</span><span class="p">[</span><span class="n">k</span><span class="p">]</span> <span class="o">=</span> <span class="mi">10</span>  <span class="c1">--新条目，key=&quot;x&quot;, value=10</span>
</span><span class='line'><span class="n">a</span><span class="p">[</span><span class="mi">20</span><span class="p">]</span> <span class="o">=</span> <span class="s2">&quot;</span><span class="s">great&quot;</span>  <span class="c1">--新条目, key=20, value=&quot;great&quot;</span>
</span><span class='line'><span class="nb">print</span><span class="p">(</span><span class="n">a</span><span class="p">[</span><span class="s2">&quot;</span><span class="s">x&quot;</span><span class="p">])</span>  <span class="c1">--&gt;10</span>
</span><span class='line'><span class="n">k</span> <span class="o">=</span> <span class="mi">20</span>
</span><span class='line'><span class="nb">print</span><span class="p">(</span><span class="n">a</span><span class="p">[</span><span class="n">k</span><span class="p">])</span>  <span class="c1">--&gt;&quot;great&quot;</span>
</span><span class='line'><span class="n">a</span><span class="p">[</span><span class="s2">&quot;</span><span class="s">x&quot;</span><span class="p">]</span> <span class="o">=</span> <span class="n">a</span><span class="p">[</span><span class="s2">&quot;</span><span class="s">x&quot;</span><span class="p">]</span> <span class="o">+</span> <span class="mi">1</span>  <span class="c1">--递增条目&quot;x&quot;</span>
</span><span class='line'><span class="nb">print</span><span class="p">(</span><span class="n">a</span><span class="p">[</span><span class="s2">&quot;</span><span class="s">x&quot;</span><span class="p">])</span>  <span class="c1">--&gt;11</span>
</span></code></pre></td></tr></table></div></figure>


<h6>所有table都可以用不同类型的索引来访问值,当需要容纳新条目时，table会自动增长。</h6>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='lua'><span class='line'><span class="n">a</span> <span class="o">=</span> <span class="p">{}</span>  <span class="c1">--空的table</span>
</span><span class='line'><span class="c1">--创建1000个新条目</span>
</span><span class='line'><span class="k">for</span> <span class="n">i</span><span class="o">=</span><span class="mi">1</span><span class="p">,</span><span class="mi">10000</span> <span class="k">do</span> <span class="n">a</span><span class="p">[</span><span class="n">i</span><span class="p">]</span> <span class="o">=</span> <span class="n">i</span><span class="o">*</span><span class="mi">2</span> <span class="k">end</span>
</span><span class='line'><span class="nb">print</span><span class="p">(</span><span class="n">a</span><span class="p">[</span><span class="mi">9</span><span class="p">])</span> <span class="c1">--&gt;18</span>
</span><span class='line'><span class="n">a</span><span class="p">[</span><span class="s2">&quot;</span><span class="s">x&quot;</span><span class="p">]</span> <span class="o">=</span> <span class="mi">10</span>
</span><span class='line'><span class="nb">print</span><span class="p">(</span><span class="n">a</span><span class="p">[</span><span class="s2">&quot;</span><span class="s">x&quot;</span><span class="p">])</span>  <span class="c1">--&gt;10</span>
</span><span class='line'><span class="nb">print</span><span class="p">(</span><span class="n">a</span><span class="p">[</span><span class="s2">&quot;</span><span class="s">y&quot;</span><span class="p">])</span>  <span class="c1">--&gt;nil</span>
</span><span class='line'><span class="n">a</span><span class="p">.</span><span class="n">x</span> <span class="o">=</span> <span class="mi">10</span>  <span class="c1">-- 等同于a[&quot;x&quot;] = 10</span>
</span><span class='line'><span class="nb">print</span><span class="p">(</span><span class="n">a</span><span class="p">.</span><span class="n">x</span><span class="p">)</span>  <span class="c1">-- 等同于print(a[&quot;x&quot;])</span>
</span><span class='line'><span class="nb">print</span><span class="p">(</span><span class="n">a</span><span class="p">.</span><span class="n">y</span><span class="p">)</span>  <span class="c1">-- 等同于print(a[&quot;y&quot;])</span>
</span><span class='line'><span class="c1">-- a.x和a[x]是不同的。前者表示a[&quot;x&quot;]，后者表示以变量x的值来索引table。</span>
</span></code></pre></td></tr></table></div></figure>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[读《Lua程序设计》笔记--函数]]></title>
    <link href="http://ajia.github.com/blog/2014/04/19/du-luacheng-xu-she-ji-bi-ji/"/>
    <updated>2014-04-19T10:02:00+08:00</updated>
    <id>http://ajia.github.com/blog/2014/04/19/du-luacheng-xu-she-ji-bi-ji</id>
    <content type="html"><![CDATA[<!-- more -->


<p>a.多重返回值</p>

<p>Lua允许函数返回多个结果，只需在return关键字后列出所有的返回值即可</p>

<figure class='code'><figcaption><span>查找数组中的最大元素</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='lua'><span class='line'><span class="k">function</span> <span class="nf">maximum</span><span class="p">(</span><span class="n">a</span><span class="p">)</span>
</span><span class='line'><span class="kd">local</span> <span class="n">mi</span> <span class="o">=</span> <span class="mi">1</span>  <span class="c1">--最大值的索引</span>
</span><span class='line'><span class="kd">local</span> <span class="n">m</span> <span class="o">=</span> <span class="n">a</span><span class="p">[</span><span class="n">mi</span><span class="p">]</span>  <span class="c1">--最大值</span>
</span><span class='line'>  <span class="k">for</span> <span class="n">i</span><span class="p">,</span><span class="n">val</span> <span class="k">in</span> <span class="nb">ipairs</span><span class="p">(</span><span class="n">a</span><span class="p">)</span> <span class="k">do</span>
</span><span class='line'>    <span class="k">if</span> <span class="n">val</span><span class="o">&gt;</span><span class="n">m</span> <span class="k">then</span>
</span><span class='line'>      <span class="n">mi</span> <span class="o">=</span> <span class="n">i</span><span class="p">;</span> <span class="n">m</span><span class="o">=</span><span class="n">val</span>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">return</span> <span class="n">m</span><span class="p">,</span> <span class="n">mi</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'><span class="nb">print</span> <span class="p">(</span><span class="n">maximum</span><span class="p">({</span><span class="mi">8</span><span class="p">,</span><span class="mi">10</span><span class="p">,</span><span class="mi">23</span><span class="p">,</span><span class="mi">12</span><span class="p">,</span><span class="mi">5</span><span class="p">}))</span>  <span class="c1">--&gt;23  3</span>
</span></code></pre></td></tr></table></div></figure>


<p>b.变长参数</p>

<figure class='code'><figcaption><span>返回所有参数的总和</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='lua'><span class='line'><span class="k">function</span> <span class="nf">add</span><span class="p">(</span><span class="o">...</span><span class="p">)</span>
</span><span class='line'>    <span class="kd">local</span> <span class="n">s</span> <span class="o">=</span> <span class="mi">0</span>
</span><span class='line'>    <span class="k">for</span> <span class="n">i</span><span class="p">,</span><span class="n">v</span> <span class="k">in</span> <span class="nb">ipairs</span><span class="p">({</span><span class="o">...</span><span class="p">})</span> <span class="k">do</span>  <span class="c1">--ipairs({...})可以简写为ipairs{...}</span>
</span><span class='line'>        <span class="n">s</span> <span class="o">=</span> <span class="n">s</span> <span class="o">+</span> <span class="n">v</span>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'>    <span class="k">return</span> <span class="n">s</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'><span class="nb">print</span><span class="p">(</span><span class="n">add</span><span class="p">(</span><span class="mi">3</span><span class="p">,</span><span class="mi">4</span><span class="p">,</span><span class="mi">10</span><span class="p">,</span><span class="mi">25</span><span class="p">,</span><span class="mi">12</span><span class="p">))</span> <span class="c1">--&gt;54</span>
</span></code></pre></td></tr></table></div></figure>


<p>表达式“&#8230;”的行为类似于一个具有多重返回值的函数，它返回的是当前函数的所有变长参数</p>

<p>c.具名参数
虽然Lua不支持</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='lua'><span class='line'><span class="n">rename</span><span class="p">(</span><span class="n">old</span><span class="o">=</span><span class="s2">&quot;</span><span class="s">temp.lua&quot;</span><span class="p">,</span> <span class="n">new</span><span class="o">=</span><span class="s2">&quot;</span><span class="s">temp1.lua&quot;</span><span class="p">)</span>  <span class="c1">--无效的演示代码</span>
</span></code></pre></td></tr></table></div></figure>


<p>这样的语法，但是可以将所有的实参组织到一个table中，并将这个table作为唯一的实参传给函数。当实参只有一个table的构造式时，函数调用中的圆括号是可有可无的：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='lua'><span class='line'><span class="k">function</span> <span class="nf">rename</span><span class="p">(</span><span class="n">arg</span><span class="p">)</span>
</span><span class='line'>    <span class="k">return</span> <span class="nb">os.rename</span><span class="p">(</span><span class="n">arg</span><span class="p">.</span><span class="n">old</span><span class="p">,</span> <span class="n">arg</span><span class="p">.</span><span class="n">new</span><span class="p">)</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'><span class="n">rename</span><span class="p">{</span><span class="n">old</span><span class="o">=</span><span class="s2">&quot;</span><span class="s">temp.lua&quot;</span><span class="p">,</span> <span class="n">new</span><span class="o">=</span><span class="s2">&quot;</span><span class="s">temp1.lua&quot;</span><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Du Luacheng Xu She Ji Bi Ji]]></title>
    <link href="http://ajia.github.com/blog/2014/04/19/du-luacheng-xu-she-ji-bi-ji/"/>
    <updated>2014-04-19T00:00:00+08:00</updated>
    <id>http://ajia.github.com/blog/2014/04/19/du-luacheng-xu-she-ji-bi-ji</id>
    <content type="html"><![CDATA[<!DOCTYPE html><html><head><meta charset="utf-8"><style>html { font-size: 100%; overflow-y: scroll; -webkit-text-size-adjust: 100%; -ms-text-size-adjust: 100%; }

body{
  color:#444;
  font-family:Georgia, Palatino, &#8216;Palatino Linotype&#8217;, Times, &#8216;Times New Roman&#8217;,
              &#8220;Hiragino Sans GB&#8221;, &#8220;STXihei&#8221;, &#8220;微软雅黑&#8221;, serif;
  font-size:12px;
  line-height:1.5em;
  background:#fefefe;
  width: 45em;
  margin: 10px auto;
  padding: 1em;
  outline: 1300px solid #FAFAFA;
}

a{ color: #0645ad; text-decoration:none;}
a:visited{ color: #0b0080; }
a:hover{ color: #06e; }
a:active{ color:#faa700; }
a:focus{ outline: thin dotted; }
a:hover, a:active{ outline: 0; }

span.backtick {
  border:1px solid #EAEAEA;
  border-radius:3px;
  background:#F8F8F8;
  padding:0 3px 0 3px;
}

::-moz-selection{background:rgba(255,255,0,0.3);color:#000}
::selection{background:rgba(255,255,0,0.3);color:#000}

a::-moz-selection{background:rgba(255,255,0,0.3);color:#0645ad}
a::selection{background:rgba(255,255,0,0.3);color:#0645ad}

p{
margin:1em 0;
}

img{
max-width:100%;
}

h1,h2,h3,h4,h5,h6{
font-weight:normal;
color:#111;
line-height:1em;
}
h4,h5,h6{ font-weight: bold; }
h1{ font-size:2.5em; }
h2{ font-size:2em; border-bottom:1px solid silver; padding-bottom: 5px; }
h3{ font-size:1.5em; }
h4{ font-size:1.2em; }
h5{ font-size:1em; }
h6{ font-size:0.9em; }

blockquote{
color:#666666;
margin:0;
padding-left: 3em;
border-left: 0.5em #EEE solid;
}
hr { display: block; height: 2px; border: 0; border-top: 1px solid #aaa;border-bottom: 1px solid #eee; margin: 1em 0; padding: 0; }


pre , code, kbd, samp { 
  color: #000; 
  font-family: monospace; 
  font-size: 0.88em; 
  border-radius:3px;
  background-color: #F8F8F8;
  border: 1px solid #CCC; 
}
pre { white-space: pre; white-space: pre-wrap; word-wrap: break-word; padding: 5px 12px;}
pre code { border: 0px !important; padding: 0;}
code { padding: 0 3px 0 3px; }

b, strong { font-weight: bold; }

dfn { font-style: italic; }

ins { background: #ff9; color: #000; text-decoration: none; }

mark { background: #ff0; color: #000; font-style: italic; font-weight: bold; }

sub, sup { font-size: 75%; line-height: 0; position: relative; vertical-align: baseline; }
sup { top: -0.5em; }
sub { bottom: -0.25em; }

ul, ol { margin: 1em 0; padding: 0 0 0 2em; }
li p:last-child { margin:0 }
dd { margin: 0 0 0 2em; }

img { border: 0; -ms-interpolation-mode: bicubic; vertical-align: middle; }

table { border-collapse: collapse; border-spacing: 0; }
td { vertical-align: top; }

@media only screen and (min-width: 480px) {
body{font-size:14px;}
}

@media only screen and (min-width: 768px) {
body{font-size:16px;}
}

@media print {
  * { background: transparent !important; color: black !important; filter:none !important; -ms-filter: none !important; }
  body{font-size:12pt; max-width:100%; outline:none;}
  a, a:visited { text-decoration: underline; }
  hr { height: 1px; border:0; border-bottom:1px solid black; }
  a[href]:after { content: &#8221; (&#8221; attr(href) &#8220;)&#8221;; }
  abbr[title]:after { content: &#8221; (&#8221; attr(title) &#8220;)&#8221;; }
  .ir a:after, a[href^=&#8221;javascript:&#8221;]:after, a[href^=&#8221;#&#8221;]:after { content: &#8220;&#8221;; }
  pre, blockquote { border: 1px solid #999; padding-right: 1em; page-break-inside: avoid; }
  tr, img { page-break-inside: avoid; }
  img { max-width: 100% !important; }
  @page :left { margin: 15mm 20mm 15mm 10mm; }
  @page :right { margin: 15mm 10mm 15mm 20mm; }
  p, h2, h3 { orphans: 3; widows: 3; }
  h2, h3 { page-break-after: avoid; }
}
</style><title>2014-04-19-du-luacheng-xu-she-ji-bi-ji</title></head><body><hr />
<p>layout: post
title: &#8220;读《Lua程序设计》笔记&#8211;函数&#8221;
date: 2014-04-19 10:02
comments: true
categories: L
keywords: 笔记 学习 读书
description: 读《Lua程序设计》笔记</p>
<hr />
<!-- more -->

<p>a.多重返回值</p>
<p>Lua允许函数返回多个结果，只需在return关键字后列出所有的返回值即可
<figure class='code'><figcaption><span>查找数组中的最大元素</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
</pre></td><td class='code'><pre><code class='lua'><span class='line'><span class="k">function</span> <span class="nf">maximum</span><span class="p">(</span><span class="n">a</span><span class="p">)</span>
</span><span class='line'><span class="kd">local</span> <span class="n">mi</span> <span class="o">=</span> <span class="mi">1</span>  <span class="c1">--最大值的索引</span>
</span><span class='line'><span class="kd">local</span> <span class="n">m</span> <span class="o">=</span> <span class="n">a</span><span class="p">[</span><span class="n">mi</span><span class="p">]</span>  <span class="c1">--最大值</span>
</span><span class='line'>  <span class="k">for</span> <span class="n">i</span><span class="p">,</span><span class="n">val</span> <span class="k">in</span> <span class="nb">ipairs</span><span class="p">(</span><span class="n">a</span><span class="p">)</span> <span class="k">do</span>
</span><span class='line'>    <span class="k">if</span> <span class="n">val</span><span class="err">&amp;</span><span class="n">gt</span><span class="p">;</span><span class="n">m</span> <span class="k">then</span>
</span><span class='line'>      <span class="n">mi</span> <span class="o">=</span> <span class="n">i</span><span class="p">;</span> <span class="n">m</span><span class="o">=</span><span class="n">val</span>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">return</span> <span class="n">m</span><span class="p">,</span> <span class="n">mi</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'><span class="nb">print</span> <span class="p">(</span><span class="n">maximum</span><span class="p">({</span><span class="mi">8</span><span class="p">,</span><span class="mi">10</span><span class="p">,</span><span class="mi">23</span><span class="p">,</span><span class="mi">12</span><span class="p">,</span><span class="mi">5</span><span class="p">}))</span>  <span class="c1">--&amp;gt;23  3&lt;/p&gt;</span>
</span><span class='line'><span class="o">&lt;</span><span class="n">pre</span><span class="o">&gt;&lt;</span><span class="n">code</span><span class="o">&gt;</span>
</span><span class='line'><span class="n">b</span><span class="p">.</span><span class="err">变长参数</span>
</span></code></pre></td></tr></table></div></figure>lua 返回所有参数的总和
    function add(&#8230;)
        local s = 0
        for i,v in ipairs({&#8230;}) do  &#8211;ipairs({&#8230;})可以简写为ipairs{&#8230;}
            s = s + v
        end
        return s
    end
    print(add(3,4,10,25,12)) &#8211;&gt;54
</code></pre>

<p>表达式“&#8230;”的行为类似于一个具有多重返回值的函数，它返回的是当前函数的所有变长参数</p>
<p>c.具名参数
虽然Lua不支持 </p>
<pre><code class="lua">rename(old=&quot;temp.lua&quot;, new=&quot;temp1.lua&quot;)  --无效的演示代码
```这样的语法，但是可以将所有的实参组织到一个table中，并将这个table作为唯一的实参传给函数。当实参只有一个table的构造式时，函数调用中的圆括号是可有可无的：
```lua
    function rename(arg)
        return os.rename(arg.old, arg.new)
    end
    rename{old=&quot;temp.lua&quot;, new=&quot;temp1.lua&quot;}
</code></pre></body></html>]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[curl用法(转)]]></title>
    <link href="http://ajia.github.com/blog/2014/04/18/curlyong-fa-zhuan/"/>
    <updated>2014-04-18T17:52:00+08:00</updated>
    <id>http://ajia.github.com/blog/2014/04/18/curlyong-fa-zhuan</id>
    <content type="html"><![CDATA[<p>curl可以模仿浏览器，可以当下载器，当你只是在处理一些shell工作时、测试，要图形界面干嘛？或者，要一个下载器干嘛。</p>

<!-- more -->


<p>基本用法（配合sed/awk/grep）</p>

<pre><code>$curl http: //bpsky.net
</code></pre>

<p>下载保存</p>

<pre><code>$curl http://bpsky.net &gt; index.html
$curl -o index.html http://bpsky.net
$curl -O http://bpsky.net/target.tar.gz
</code></pre>

<p>通过代理</p>

<pre><code>$curl -x  123.45 . 67.89 : 1080  -o page.html http://bpsky.net
</code></pre>

<p>保存cookie</p>

<pre><code>$curl -x  123.45 . 67.89 : 1080  -o page1.html -D cookie0001.txt http://bpsky.net
</code></pre>

<p>使用cookie</p>

<pre><code>$curl -x  123.45 . 67.89 : 1080  -o page1.html -D cookie0002.txt -b cookie0001.txt http://bpsky.net
</code></pre>

<p>模仿浏览器</p>

<pre><code>$curl -A  "Mozilla/4.0 (compatible; MSIE 6.0; Windows NT 5.0)"  -x  123.45 . 67.89 : 1080  -o page.html -D cookie0001.txt http://bpsky.net
</code></pre>

<p>伪造referer</p>

<pre><code>$curl -A  "Mozilla/4.0 (compatible; MSIE 6.0; Windows NT 5.0)"  -x  123.45 . 67.89 : 1080  -e  "mail.yahoo.com"  -o page.html -D cookie0001.txt http://bpsky.net
</code></pre>

<p>循环下载</p>

<pre><code>$curl -O http://cgi2.tky.3web.ne.jp/~zzh/screen[1-10].JPG
</code></pre>

<p>循环（匹配）下载</p>

<pre><code>$curl -O http://cgi2.tky.3web.ne.jp/~{zzh,nick}/[001-201].JPG  # &gt;like zzh/001.JPG
</code></pre>

<p>循环（引用）下载</p>

<pre><code>$curl -o #2_#1.jpg http://cgi2.tky.3web.ne.jp/~{zzh,nick}/[001-201].JPG # like &gt;001_zzh.jpg
</code></pre>

<p>断点续传</p>

<pre><code>$curl -c -O http://cgi2.tky.3wb.ne.jp/~zzh/screen1.JPG 
</code></pre>

<p>分块下载</p>

<pre><code>$curl -r  0 - 10240  -o  "zhao.part1"  http://cgi2.tky.3web.ne.jp/~zzh/zhao1.mp3 &amp;\ 
$curl -r 10241 - 20480  -o  "zhao.part1"  http://cgi2.tky.3web.ne.jp/~zzh/zhao1.mp3 &amp;\ 
$curl -r 20481 - 40960  -o  "zhao.part1"  http://cgi2.tky.3web.ne.jp/~zzh/zhao1.mp3 &amp;\ 
$curl -r 40961 - -o  "zhao.part1"  http://cgi2.tky.3web.ne.jp/~zzh/zhao1.mp3
...
$cat zhao.part* &gt; zhao.mp3
</code></pre>

<p>GET 上传</p>

<pre><code>$curl http://www.yahoo.com/login.cgi?user=nickwolfe&amp;password=12345  
</code></pre>

<p>POST 上传</p>

<pre><code>$curl -d "user=nickwolfe&amp;password=12345" http://www.yahoo.com/login.cgi
</code></pre>

<p>POST 文件上传</p>

<pre><code>$curl -F upload= $localfile  -F $btn_name=$btn_value http://cgi2.tky.3web.ne.jp/~zzh/up_file.cgi
</code></pre>

<h6>#（转自：http://www.cnblogs.com/bugY/archive/2012/06/05/2537030.html）</h6>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[DOOM3在Mac OSX中的编译过程]]></title>
    <link href="http://ajia.github.com/blog/2014/04/08/doom3zai-mac-osxzhong-de-bian-yi-guo-cheng/"/>
    <updated>2014-04-08T18:51:00+08:00</updated>
    <id>http://ajia.github.com/blog/2014/04/08/doom3zai-mac-osxzhong-de-bian-yi-guo-cheng</id>
    <content type="html"><![CDATA[<p>听说DOOM3的源码编写的很优美，所以就想亲自编译试试。这个过程中果然出现了很多问题，就找到了这篇文章<a href="http://fabiensanglard.net/doom3_macosx/index.php">Doom3 compilation instructions for Mac OS X</a>。是2011年写的，有的步骤已经不用做了。</p>

<!-- more -->


<ol>
<li><p>修改Architecture和Target SDK
把&#8221;Architectures&#8221;从&#8221;ppc i386&#8221;修改为&#8221;32-bit Intel&#8221;
改变baseSDK 为 &#8220;Latest MacOSX&#8221;</p></li>
<li><p>修改丢失的框架引用
 重新添加Carbon.framework, IOKit.framework, OpenGL.framework, CoreAudio.framework 引用到 Doom3 项目</p></li>
<li><p>修改ppc_intrinsics.h.（这步已经OK）</p></li>
<li><p>修改Id linker 参数
设置Inline Methods Hidden 为 &#8220;No&#8221;
设置Symbols Hidden by Default 为 &#8220;No&#8221;</p></li>
<li><p>修改C++代码（这步已OK）</p></li>
<li><p>修改更多的C++代码
这步看一下文章的里的说明</p></li>
<li><p>修改编译器
把所有的编译器都改成LLVM GCC 4.2</p></li>
<li><p>修改OpenAL weak reference
删除-weak_framework OpenAL，并且添加OpenAL.framework</p></li>
<li><p>删除旧版的curl lib reference
删除curl项目的引用，添加libcurl.dylib到Doom3项目的框架列表中</p></li>
<li><p>Don&#8217;t build unused architectures.
设置&#8221;Build active Architecture only&#8221;为 Yes</p></li>
<li><p>为链接器添加库
添加库文件game.dylib、libidklib_pic.a</p></li>
<li><p>添加游戏资源（assets）
需要把游戏的base目录考到项目中去</p></li>
<li><p>链接到game.dylib</p></li>
</ol>


<p>如果你启动游戏的时候出错：</p>

<pre><code>Dyld Error Message:
Library not loaded: /usr/local/lib/game.dylib
Referenced from: /Users/dev/TTimo-doom3.gpl-1559777/neo/sys/osx/build/Debug/Doom 3.app/Contents/MacOS/Doom 3
Reason: image not found
</code></pre>

<p>有两个解决方案：
1.拷贝 game.dylib 到 /usr/local/lib，或者用lnm命令建立一个软连接</p>

<p>2.设置&#8221;Dynamic Library Install Name&#8221;为&#8221;&#8220;,这样Doom3就会在当前目录找game.dylib</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Unix Create a Symbolic Link]]></title>
    <link href="http://ajia.github.com/blog/2014/04/07/unix-create-a-symbolic-link/"/>
    <updated>2014-04-07T22:52:00+08:00</updated>
    <id>http://ajia.github.com/blog/2014/04/07/unix-create-a-symbolic-link</id>
    <content type="html"><![CDATA[<p>UNIX系统中这样来创建一个软连接（symbolic link）:</p>

<pre><code>$ ln -s {/path/to/file-name} {link-name}
$ ln -s /shared/sales/data/file.txt sales.data.txt
$ vi sales.data.txt
$ ls -l sales.data.txt
</code></pre>

<!-- more -->


<p>怎样删除软连接呢？很简单，这样：</p>

<pre><code>$ rm {link-name}
$ rm sales.data.txt
$ ls -l
$ ls -l /shared/sales/data/file.txt
</code></pre>

<p>如果你删除了软连接（比如sales.data.txt），它所连接的数据（/shared/sales/data/file.txt）还存在。但是，如果你删除了/shared/sales/data/file.txt，sales.data.txt将成为破坏了的连接，数据也就丢失了</p>

<p>UNIX系统中还可以创建硬连接，用法如下（就是上面的命令中把参数-s去掉）：</p>

<pre><code>$ ln {file.txt} {hard-link}
$ ln /tmp/file link-here
</code></pre>

<p>同样可以删除硬连接：</p>

<pre><code>$ rm {hard-link}
$ rm link-here
</code></pre>

<p>如果你删除了硬连接，数据还存在。如果删除了/tmp/file，还是可以通过link-here来访问数据。其实就是把数据拷贝了一份。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[python中转化成json的方法不能序列化datetime类型数据的问题]]></title>
    <link href="http://ajia.github.com/blog/2014/03/20/pythonzhong-zhuan-hua-cheng-jsonde-fang-fa-bu-neng-xu-lie-hua-datetimelei-xing-shu-ju-de-wen-ti/"/>
    <updated>2014-03-20T14:01:00+08:00</updated>
    <id>http://ajia.github.com/blog/2014/03/20/pythonzhong-zhuan-hua-cheng-jsonde-fang-fa-bu-neng-xu-lie-hua-datetimelei-xing-shu-ju-de-wen-ti</id>
    <content type="html"><![CDATA[<p>使用python自带的json.dumps方法转换数据为json的时候，如果格式化的数据中有datetime类型的数据时会报错</p>

<pre><code>TypeError: datetime.datetime(2014, 03, 20, 12, 10, 44) is not JSON serializable
</code></pre>

<p>查了一下，找到如下的方法:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'>  <span class="kn">import</span> <span class="nn">json</span>
</span><span class='line'>  <span class="kn">from</span> <span class="nn">datetime</span> <span class="kn">import</span> <span class="n">date</span><span class="p">,</span> <span class="n">datetime</span>
</span><span class='line'>  <span class="k">class</span> <span class="nc">MyEncoder</span><span class="p">(</span><span class="n">json</span><span class="o">.</span><span class="n">JSONEncoder</span><span class="p">):</span>
</span><span class='line'>    <span class="k">def</span> <span class="nf">default</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">obj</span><span class="p">):</span>
</span><span class='line'>        <span class="c"># if isinstance(obj, datetime.datetime):</span>
</span><span class='line'>        <span class="c">#     return int(mktime(obj.timetuple()))</span>
</span><span class='line'>        <span class="k">if</span> <span class="nb">isinstance</span><span class="p">(</span><span class="n">obj</span><span class="p">,</span> <span class="n">datetime</span><span class="p">):</span>
</span><span class='line'>            <span class="k">return</span> <span class="n">obj</span><span class="o">.</span><span class="n">strftime</span><span class="p">(</span><span class="s">&#39;%Y-%m-</span><span class="si">%d</span><span class="s"> %H:%M:%S&#39;</span><span class="p">)</span>
</span><span class='line'>        <span class="k">elif</span> <span class="nb">isinstance</span><span class="p">(</span><span class="n">obj</span><span class="p">,</span> <span class="n">date</span><span class="p">):</span>
</span><span class='line'>            <span class="k">return</span> <span class="n">obj</span><span class="o">.</span><span class="n">strftime</span><span class="p">(</span><span class="s">&#39;%Y-%m-</span><span class="si">%d</span><span class="s">&#39;</span><span class="p">)</span>
</span><span class='line'>        <span class="k">else</span><span class="p">:</span>
</span><span class='line'>            <span class="k">return</span> <span class="n">json</span><span class="o">.</span><span class="n">JSONEncoder</span><span class="o">.</span><span class="n">default</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">obj</span><span class="p">)</span>
</span><span class='line'>     <span class="k">print</span> <span class="n">json</span><span class="o">.</span><span class="n">dumps</span><span class="p">(</span><span class="n">dataMap</span><span class="p">,</span> <span class="n">cls</span><span class="o">=</span><span class="n">MyEncoder</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<p></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Python的集合运算]]></title>
    <link href="http://ajia.github.com/blog/2014/03/19/pythonde-ji-he-yun-suan/"/>
    <updated>2014-03-19T16:59:00+08:00</updated>
    <id>http://ajia.github.com/blog/2014/03/19/pythonde-ji-he-yun-suan</id>
    <content type="html"><![CDATA[<p>python用来写一些提高工作效率的脚本真的非常方便，我越来越喜欢这门简单又强大的语言了。为了计算出两个list之间的交集、并集和差集，查了一下记录在下面：</p>

<h3>获取两个list的交集</h3>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="c">#方法一:</span>
</span><span class='line'><span class="n">a</span><span class="o">=</span><span class="p">[</span><span class="mi">2</span><span class="p">,</span><span class="mi">3</span><span class="p">,</span><span class="mi">4</span><span class="p">,</span><span class="mi">5</span><span class="p">]</span>
</span><span class='line'><span class="n">b</span><span class="o">=</span><span class="p">[</span><span class="mi">2</span><span class="p">,</span><span class="mi">5</span><span class="p">,</span><span class="mi">8</span><span class="p">]</span>
</span><span class='line'><span class="n">tmp</span> <span class="o">=</span> <span class="p">[</span><span class="n">val</span> <span class="k">for</span> <span class="n">val</span> <span class="ow">in</span> <span class="n">a</span> <span class="k">if</span> <span class="n">val</span> <span class="ow">in</span> <span class="n">b</span><span class="p">]</span>
</span><span class='line'><span class="k">print</span> <span class="n">tmp</span>
</span><span class='line'><span class="c">#[2, 5]</span>
</span><span class='line'><span class="c">#方法二:</span>
</span><span class='line'><span class="k">print</span> <span class="nb">list</span><span class="p">(</span><span class="nb">set</span><span class="p">(</span><span class="n">a</span><span class="p">)</span><span class="o">.</span><span class="n">intersection</span><span class="p">(</span><span class="nb">set</span><span class="p">(</span><span class="n">b</span><span class="p">)))</span>
</span></code></pre></td></tr></table></div></figure>


<h3>获取两个list的并集</h3>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="k">print</span> <span class="nb">list</span><span class="p">(</span><span class="nb">set</span><span class="p">(</span><span class="n">a</span><span class="p">)</span><span class="o">.</span><span class="n">union</span><span class="p">(</span><span class="nb">set</span><span class="p">(</span><span class="n">b</span><span class="p">)))</span>
</span></code></pre></td></tr></table></div></figure>


<h3>获取两个list的差集</h3>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="k">print</span> <span class="nb">list</span><span class="p">(</span><span class="nb">set</span><span class="p">(</span><span class="n">b</span><span class="p">)</span><span class="o">.</span><span class="n">difference</span><span class="p">(</span><span class="nb">set</span><span class="p">(</span><span class="n">a</span><span class="p">)))</span> <span class="c"># b中有而a中没有的</span>
</span></code></pre></td></tr></table></div></figure>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[常用排序算法(python实现)]]></title>
    <link href="http://ajia.github.com/blog/2014/02/10/chang-yong-pai-xu-suan-pythonshi-xian/"/>
    <updated>2014-02-10T15:02:00+08:00</updated>
    <id>http://ajia.github.com/blog/2014/02/10/chang-yong-pai-xu-suan-pythonshi-xian</id>
    <content type="html"><![CDATA[<!-- more -->


<p>前段时间把主要的排序算法原理看了一遍，光看不行，还是得动手。</p>

<figure class='code'><figcaption><span>排序算法 python (Sort.py)</span> <a href='http://ajia.github.com/downloads/code/Sort.py'>download</a></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
<span class='line-number'>60</span>
<span class='line-number'>61</span>
<span class='line-number'>62</span>
<span class='line-number'>63</span>
<span class='line-number'>64</span>
<span class='line-number'>65</span>
<span class='line-number'>66</span>
<span class='line-number'>67</span>
<span class='line-number'>68</span>
<span class='line-number'>69</span>
<span class='line-number'>70</span>
<span class='line-number'>71</span>
<span class='line-number'>72</span>
<span class='line-number'>73</span>
<span class='line-number'>74</span>
<span class='line-number'>75</span>
<span class='line-number'>76</span>
<span class='line-number'>77</span>
<span class='line-number'>78</span>
<span class='line-number'>79</span>
<span class='line-number'>80</span>
<span class='line-number'>81</span>
<span class='line-number'>82</span>
<span class='line-number'>83</span>
<span class='line-number'>84</span>
<span class='line-number'>85</span>
<span class='line-number'>86</span>
<span class='line-number'>87</span>
</pre></td><td class='code'><pre><code class='py'><span class='line'><span class="c">#!--</span>
</span><span class='line'><span class="c">#ChooseSort</span>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'><span class="k">class</span> <span class="nc">Sort</span><span class="p">(</span><span class="nb">list</span><span class="p">):</span>
</span><span class='line'>    <span class="k">def</span> <span class="nf">__init__</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="nb">list</span><span class="p">):</span>
</span><span class='line'>        <span class="bp">self</span><span class="o">.</span><span class="n">list</span> <span class="o">=</span> <span class="nb">list</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">def</span> <span class="nf">swap</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">i</span><span class="p">,</span> <span class="n">j</span><span class="p">):</span>
</span><span class='line'>        <span class="nb">list</span><span class="p">[</span><span class="n">i</span><span class="p">],</span> <span class="nb">list</span><span class="p">[</span><span class="n">j</span><span class="p">]</span> <span class="o">=</span> <span class="nb">list</span><span class="p">[</span><span class="n">j</span><span class="p">],</span> <span class="nb">list</span><span class="p">[</span><span class="n">i</span><span class="p">]</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">def</span> <span class="nf">show</span><span class="p">(</span><span class="bp">self</span><span class="p">):</span>
</span><span class='line'>        <span class="k">print</span> <span class="s">&quot; &quot;</span><span class="o">.</span><span class="n">join</span><span class="p">(</span><span class="nb">str</span><span class="p">(</span><span class="n">v</span><span class="p">)</span> <span class="k">for</span> <span class="n">v</span> <span class="ow">in</span> <span class="nb">list</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">def</span> <span class="nf">select_sort</span><span class="p">(</span><span class="bp">self</span><span class="p">):</span>
</span><span class='line'>        <span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span> <span class="nb">len</span><span class="p">(</span><span class="nb">list</span><span class="p">)</span><span class="o">-</span><span class="mi">1</span><span class="p">):</span>
</span><span class='line'>            <span class="nb">min</span> <span class="o">=</span> <span class="n">i</span>
</span><span class='line'>            <span class="k">for</span> <span class="n">j</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="n">i</span><span class="o">+</span><span class="mi">1</span><span class="p">,</span> <span class="nb">len</span><span class="p">(</span><span class="nb">list</span><span class="p">)):</span>
</span><span class='line'>                <span class="k">if</span> <span class="nb">list</span><span class="p">[</span><span class="n">j</span><span class="p">]</span> <span class="o">&lt;</span> <span class="nb">list</span><span class="p">[</span><span class="nb">min</span><span class="p">]:</span>
</span><span class='line'>                    <span class="nb">min</span> <span class="o">=</span> <span class="n">j</span>
</span><span class='line'>            <span class="bp">self</span><span class="o">.</span><span class="n">swap</span><span class="p">(</span><span class="nb">min</span><span class="p">,</span> <span class="n">i</span><span class="p">)</span>
</span><span class='line'>        <span class="k">return</span> <span class="nb">list</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">def</span> <span class="nf">insert_sort</span><span class="p">(</span><span class="bp">self</span><span class="p">):</span>
</span><span class='line'>        <span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="mi">1</span><span class="p">,</span> <span class="nb">len</span><span class="p">(</span><span class="nb">list</span><span class="p">)):</span>
</span><span class='line'>            <span class="n">temp</span> <span class="o">=</span> <span class="nb">list</span><span class="p">[</span><span class="n">i</span><span class="p">]</span>
</span><span class='line'>            <span class="n">j</span> <span class="o">=</span> <span class="n">i</span><span class="o">-</span><span class="mi">1</span>
</span><span class='line'>            <span class="k">while</span> <span class="n">j</span> <span class="o">&gt;=</span> <span class="mi">0</span> <span class="ow">and</span> <span class="n">temp</span> <span class="o">&lt;</span> <span class="nb">list</span><span class="p">[</span><span class="n">j</span><span class="p">]:</span>
</span><span class='line'>                <span class="nb">list</span><span class="p">[</span><span class="n">j</span><span class="o">+</span><span class="mi">1</span><span class="p">]</span> <span class="o">=</span> <span class="nb">list</span><span class="p">[</span><span class="n">j</span><span class="p">]</span>
</span><span class='line'>                <span class="n">j</span> <span class="o">-=</span> <span class="mi">1</span>
</span><span class='line'>            <span class="nb">list</span><span class="p">[</span><span class="n">j</span><span class="o">+</span><span class="mi">1</span><span class="p">]</span> <span class="o">=</span> <span class="n">temp</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">def</span> <span class="nf">quick_sort</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">low</span><span class="o">=</span><span class="mi">0</span><span class="p">,</span> <span class="n">high</span><span class="o">=</span><span class="bp">None</span><span class="p">):</span>
</span><span class='line'>        <span class="k">if</span> <span class="n">high</span> <span class="o">==</span> <span class="bp">None</span><span class="p">:</span>
</span><span class='line'>            <span class="n">high</span> <span class="o">=</span> <span class="nb">len</span><span class="p">(</span><span class="nb">list</span><span class="p">)</span> <span class="o">-</span> <span class="mi">1</span>
</span><span class='line'>        <span class="k">if</span> <span class="n">low</span> <span class="o">&lt;</span> <span class="n">high</span><span class="p">:</span>
</span><span class='line'>            <span class="n">s</span><span class="p">,</span> <span class="n">i</span><span class="p">,</span> <span class="n">j</span> <span class="o">=</span> <span class="nb">list</span><span class="p">[</span><span class="n">low</span><span class="p">],</span> <span class="n">low</span><span class="p">,</span> <span class="n">high</span>
</span><span class='line'>            <span class="k">while</span> <span class="bp">True</span><span class="p">:</span>
</span><span class='line'>                <span class="k">while</span> <span class="n">i</span> <span class="o">!=</span> <span class="n">high</span> <span class="ow">and</span> <span class="nb">list</span><span class="p">[</span><span class="n">i</span><span class="p">]</span> <span class="o">&lt;</span> <span class="n">s</span><span class="p">:</span>
</span><span class='line'>                    <span class="n">i</span> <span class="o">=</span> <span class="n">i</span> <span class="o">+</span> <span class="mi">1</span>
</span><span class='line'>                <span class="c"># if i &lt; j:</span>
</span><span class='line'>                <span class="c">#     list[i] = list[j]</span>
</span><span class='line'>                <span class="c">#     i = i + 1</span>
</span><span class='line'>                <span class="k">while</span> <span class="n">j</span> <span class="o">!=</span><span class="n">low</span> <span class="ow">and</span> <span class="nb">list</span><span class="p">[</span><span class="n">j</span><span class="p">]</span> <span class="o">&gt;</span> <span class="n">s</span><span class="p">:</span>
</span><span class='line'>                    <span class="n">j</span> <span class="o">=</span> <span class="n">j</span> <span class="o">-</span> <span class="mi">1</span>
</span><span class='line'>                <span class="c"># if i &lt; j:</span>
</span><span class='line'>                <span class="c">#     list[j] = list[i]</span>
</span><span class='line'>                <span class="c">#     j = j - 1</span>
</span><span class='line'>                <span class="k">if</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="n">j</span><span class="p">:</span>
</span><span class='line'>                    <span class="nb">list</span><span class="p">[</span><span class="n">j</span><span class="p">],</span> <span class="nb">list</span><span class="p">[</span><span class="n">i</span><span class="p">]</span> <span class="o">=</span> <span class="nb">list</span><span class="p">[</span><span class="n">i</span><span class="p">],</span> <span class="nb">list</span><span class="p">[</span><span class="n">j</span><span class="p">]</span>
</span><span class='line'>                <span class="k">else</span><span class="p">:</span>
</span><span class='line'>                    <span class="k">break</span>
</span><span class='line'>            <span class="nb">list</span><span class="p">[</span><span class="n">j</span><span class="p">],</span> <span class="n">s</span> <span class="o">=</span> <span class="n">s</span><span class="p">,</span> <span class="nb">list</span><span class="p">[</span><span class="n">j</span><span class="p">]</span>
</span><span class='line'>            <span class="bp">self</span><span class="o">.</span><span class="n">quick_sort</span><span class="p">(</span><span class="n">low</span><span class="p">,</span> <span class="n">i</span> <span class="o">-</span> <span class="mi">1</span><span class="p">)</span>
</span><span class='line'>            <span class="bp">self</span><span class="o">.</span><span class="n">quick_sort</span><span class="p">(</span><span class="n">i</span> <span class="o">+</span> <span class="mi">1</span><span class="p">,</span> <span class="n">high</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">def</span> <span class="nf">bubble_sort</span><span class="p">(</span><span class="bp">self</span><span class="p">):</span>
</span><span class='line'>        <span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="nb">len</span><span class="p">(</span><span class="nb">list</span><span class="p">)</span> <span class="o">-</span> <span class="mi">1</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="o">-</span><span class="mi">1</span><span class="p">):</span>
</span><span class='line'>            <span class="k">for</span> <span class="n">j</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span> <span class="n">i</span><span class="p">):</span>
</span><span class='line'>                <span class="k">if</span> <span class="nb">list</span><span class="p">[</span><span class="n">j</span><span class="p">]</span> <span class="o">&gt;</span> <span class="nb">list</span><span class="p">[</span><span class="n">j</span> <span class="o">+</span> <span class="mi">1</span><span class="p">]:</span>
</span><span class='line'>                    <span class="nb">list</span><span class="p">[</span><span class="n">j</span><span class="p">],</span> <span class="nb">list</span><span class="p">[</span><span class="n">j</span> <span class="o">+</span> <span class="mi">1</span><span class="p">]</span> <span class="o">=</span> <span class="nb">list</span><span class="p">[</span><span class="n">j</span> <span class="o">+</span> <span class="mi">1</span><span class="p">],</span> <span class="nb">list</span><span class="p">[</span><span class="n">j</span><span class="p">]</span>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'><span class="k">if</span> <span class="n">__name__</span> <span class="o">==</span> <span class="s">&quot;__main__&quot;</span><span class="p">:</span>
</span><span class='line'>    <span class="nb">list</span> <span class="o">=</span> <span class="p">[</span><span class="mi">6</span><span class="p">,</span> <span class="mi">4</span><span class="p">,</span> <span class="mi">1</span><span class="p">,</span> <span class="mi">9</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">7</span><span class="p">,</span> <span class="mi">10</span><span class="p">,</span> <span class="mi">3</span><span class="p">]</span>
</span><span class='line'>    <span class="k">print</span> <span class="s">&#39;select_sort&#39;</span>
</span><span class='line'>    <span class="n">s</span> <span class="o">=</span> <span class="n">Sort</span><span class="p">(</span><span class="nb">list</span><span class="p">)</span>
</span><span class='line'>    <span class="n">s</span><span class="o">.</span><span class="n">select_sort</span><span class="p">()</span>
</span><span class='line'>    <span class="n">s</span><span class="o">.</span><span class="n">show</span><span class="p">()</span>
</span><span class='line'>
</span><span class='line'>    <span class="nb">list</span> <span class="o">=</span> <span class="p">[</span><span class="mi">6</span><span class="p">,</span> <span class="mi">4</span><span class="p">,</span> <span class="mi">1</span><span class="p">,</span> <span class="mi">9</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">7</span><span class="p">,</span> <span class="mi">10</span><span class="p">,</span> <span class="mi">3</span><span class="p">]</span>
</span><span class='line'>    <span class="k">print</span> <span class="s">&#39;insert_sort&#39;</span>
</span><span class='line'>    <span class="n">s</span> <span class="o">=</span> <span class="n">Sort</span><span class="p">(</span><span class="nb">list</span><span class="p">)</span>
</span><span class='line'>    <span class="n">s</span><span class="o">.</span><span class="n">insert_sort</span><span class="p">()</span>
</span><span class='line'>    <span class="n">s</span><span class="o">.</span><span class="n">show</span><span class="p">()</span>
</span><span class='line'>
</span><span class='line'>    <span class="nb">list</span> <span class="o">=</span> <span class="p">[</span><span class="mi">6</span><span class="p">,</span> <span class="mi">4</span><span class="p">,</span> <span class="mi">1</span><span class="p">,</span> <span class="mi">9</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">7</span><span class="p">,</span> <span class="mi">10</span><span class="p">,</span> <span class="mi">3</span><span class="p">]</span>
</span><span class='line'>    <span class="k">print</span> <span class="s">&#39;quick_sort&#39;</span>
</span><span class='line'>    <span class="n">s</span> <span class="o">=</span> <span class="n">Sort</span><span class="p">(</span><span class="nb">list</span><span class="p">)</span>
</span><span class='line'>    <span class="n">s</span><span class="o">.</span><span class="n">quick_sort</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span> <span class="nb">len</span><span class="p">(</span><span class="nb">list</span><span class="p">)</span><span class="o">-</span><span class="mi">1</span><span class="p">)</span>
</span><span class='line'>    <span class="n">s</span><span class="o">.</span><span class="n">show</span><span class="p">()</span>
</span><span class='line'>
</span><span class='line'>    <span class="nb">list</span> <span class="o">=</span> <span class="p">[</span><span class="mi">6</span><span class="p">,</span> <span class="mi">4</span><span class="p">,</span> <span class="mi">1</span><span class="p">,</span> <span class="mi">9</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">7</span><span class="p">,</span> <span class="mi">10</span><span class="p">,</span> <span class="mi">3</span><span class="p">]</span>
</span><span class='line'>    <span class="k">print</span> <span class="s">&#39;bubble_sort&#39;</span>
</span><span class='line'>    <span class="n">s</span> <span class="o">=</span> <span class="n">Sort</span><span class="p">(</span><span class="nb">list</span><span class="p">)</span>
</span><span class='line'>    <span class="n">s</span><span class="o">.</span><span class="n">bubble_sort</span><span class="p">()</span>
</span><span class='line'>    <span class="n">s</span><span class="o">.</span><span class="n">show</span><span class="p">()</span>
</span></code></pre></td></tr></table></div></figure>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[xcode常用快捷键]]></title>
    <link href="http://ajia.github.com/blog/2013/10/15/xcodechang-yong-kuai-jie-jian/"/>
    <updated>2013-10-15T10:48:00+08:00</updated>
    <id>http://ajia.github.com/blog/2013/10/15/xcodechang-yong-kuai-jie-jian</id>
    <content type="html"><![CDATA[<p>熟练使用快捷键能极大的提高效率，在此记录一下常用的xcode快捷键：</p>

<!-- more -->


<ol>
<li><p>esc 　　　　           自动完成, 作用和VS中的ctrl+j类似，像 Eclipse 的 alt+/</p></li>
<li><p>command + /　　               注释代码和反注释，用 //，相当于 Eclipse 的 ctrl+/</p></li>
<li><h3>control + command + 上/下箭头　 快速在头文件（.h）和实现文件（.m）之间切换</h3></li>
<li><p>command + b　　           编译程序，不运行</p></li>
<li><p>command + r　　      编译并运行程序</p></li>
<li><p>command + shift + b　　       分析代码，找到潜在内存溢出问题</p></li>
<li><p>command  + 单击         跳转到声明</p></li>
<li><p>option + 单击             弹出层中显示帮助信息</p></li>
<li><p>option + command + 左/右 方向键，折叠/打开当前方法</p></li>
<li><p>control + command + f           Xcode 全屏，在 Lion 上支持</p></li>
<li><p>command + shit + y             打开/关闭控制台窗口</p></li>
<li><p>control + k              清理控制台</p></li>
<li><p>control + command + 左/右方向键，在历史的上/下一个文件中切换,或用两个手指左右滑动。command 代替 PC 键盘上的许多操作，像 Ctrl+V, Ctrl+C, Ctrl+Z，都该用 cmd+V, Cmd+C, Cmd+Z</p></li>
<li><p>tab          接受当前的自动完成</p></li>
<li><p>双击中括号或者大括号，可以选择相应的封闭语句块</p></li>
<li><h3>command - shift - o: 快速搜索打开文件</h3></li>
<li><p>control 配合 1/2/3/4/5/6 键 : 可以快速打开相关文件/类或代码，我常用 control+1 显示打开的文件，control+6 显示当前类中的变量或方法，都可以输入来过滤</p></li>
<li><p>command 配合 1/2/3/4/5/6/7 依次显示左边导航中每一个标签的子视图，commandco+ 0 打开或关闭左边导航</p></li>
<li><p>option + command 配合 1/2/3/4/5/6 依次打开右边属性窗口的每一个标签视图，特别是在 xib 时 常用，用 option + command + 0 关闭右边属性窗口</p></li>
<li><p>command + shift + j 在左边导航中定位当前打开的文件</p></li>
<li><p>command + return 切换到标准编辑器</p></li>
<li><p>option + command + return 切换到辅助编辑器，左右可以对比，特别方便编辑 xib 时进行拖拉关联</p></li>
<li><p>command+shift+f        进行 Search</p></li>
<li><p>f7            调试时 Step Into</p></li>
<li><p>f6            调试时 Step Over</p></li>
<li><p>f8            调试时 Step Out</p></li>
<li><p>control + command + y : debug断点时continue</p></li>
<li><p>command + \  ： 当前行设置/取消断点</p></li>
<li><p>command + y  全局激活或禁用所有的断点</p></li>
<li><p>command+ 左/右方向键 跳到行首/行尾</p></li>
<li><p>option + 左/右方向键 向前/后跳一个单词</p></li>
<li><p>option + delete 向前删除一个单词</p></li>
<li><p>fn + option + delete 向后删除一个单词</p></li>
<li><p>command + delete 删除当前行中光标前所有字符</p></li>
<li><p>fn + command + delete 删除当前行中光标后所有字符</p></li>
</ol>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[RethinkDB 创始人总结的 57 条创业经验]]></title>
    <link href="http://ajia.github.com/blog/2013/08/19/rethinkdb-chuang-shi-ren-zong-jie-de-57-tiao-chuang-ye-jing-yan/"/>
    <updated>2013-08-19T15:51:00+08:00</updated>
    <id>http://ajia.github.com/blog/2013/08/19/rethinkdb-chuang-shi-ren-zong-jie-de-57-tiao-chuang-ye-jing-yan</id>
    <content type="html"><![CDATA[<p>总部位于旧金山的云计算数据库服务公司RethinkDB创始人斯拉瓦·阿克麦切特（Slava Akhmechet）日前发表文章，总结了57条创业经验，其中涉及团队、融资、市场、产品、营销、销售、产品开发、公司管理、个人状态等9个方面。</p>

<!-- more -->


<p>以下是阿克麦切特总结的57条创业经验：</p>

<p>那些才华横溢、经验丰富的人们已经写过不少创业经验，我想要再添加一些内容。我用过去四年的艰辛总结出了这些经验。如果你打算创业，希望你的路平坦一些。</p>

<h1>团队建设</h1>

<ul>
<li><p>1、如果你的2到4人团队无法在6个月到1年内实现盈利，那么肯定出问题了。除非是你自己选择不盈利，但这必须是你的选择，而非市场原因。</p></li>
<li><p>2、在创始人中间平均分配股票。</p></li>
<li><p>3、一直有一个期权行使计划。</p></li>
<li><p>4、依据一致意见做出大多数决定，但唯一一位CEO拥有最终决定权。从第一天就明确如此。</p></li>
<li><p>5、你作为CEO的权威是赢得的，因为你是从无到有。如果赢得胜利，这种权威会随之增长，反之则会下降。不要试图滥用你没有赢得的权威。</p></li>
<li><p>6、士气是真实存在的，而且自身能够永久存在。如果长时间没有胜利，你的投资者、员工、家人，以及你自己都会失去信心。努力工作，不要陷入这种境地。</p></li>
<li><p>7、谨慎选择最初团队成员。所有人都应当开心共事，至少拥有一项企业相关的技能，效率极高且务实。所有人都应当有产品意识，在产品与公司方面拥有共同的理念。</p></li>
<li><p>8、你工作采用的标准，就是你所接受的标准。选择一小部分对你最重要的、没有谈判余地的规定，并毫不松懈地予以执行。</p></li>
<li><p>9、解雇那些难以共事、没有效率、不可靠、没有产品意识，以及不务实的人。迅速解雇。</p></li>
<li><p>10、有些磨擦是好事，但磨擦过多很要命。解雇那些制造太多磨擦的人。好工作＋坏习惯=你被解雇了。</p></li>
</ul>


<h1>资金筹集</h1>

<ul>
<li><p>11、如果在某一轮融资中你不得不放弃公司15%的控制权，那么公司肯定在某个方面出了问题。这是可以挽救的，但不是理想做法。</p></li>
<li><p>12、如果你还没有赢得人们的尊重，那么依靠吸引力融资要比依靠讲故事融资容易得多。如果你不得不依靠讲故事融资，但却没有自己的声誉，那么肯定有问题。</p></li>
<li><p>13、将自己的融资谈判当作一个至少可成活的产品，推出去之后，每次见面都重复。</p></li>
<li><p>14、大多数投资者的建议有助于公司优化和发展，虚心听取。</p></li>
<li><p>15、大多数投资者的建议无助于开发一款神奇的产品，没有人能帮你开发神奇产品，这是你自己的事情。</p></li>
<li><p>16、不要留恋于融资过程。事成之后，赶紧前进。</p></li>
</ul>


<h1>市场方面</h1>

<ul>
<li><p>17、最好的产品一定不是在真空中产生的，它们成功的原因在于它在某个领域胜出了其他所有产品。找到自己的这个领域，做最好的那个。如果没有这样一个领域，那肯定有问题。</p></li>
<li><p>18、投入到一个既能立即见效，又拥有巨大发展潜力的问题上。如果它无助于改善大量人群的生活条件，那就不值得去做。例如，谷歌(微博)填补了人们日常生活中一个巨大的空白，令数十亿人受益。它改变了人们的行为方式和认知周围世界的方式。努力去做这款拥有如此规模的产品。</p></li>
<li><p>19、刚开始树立一个正确的理念。从经验来看，这个时候你只能依此而动。</p></li>
<li><p>20、要知道，市场瞬息万变，多个团队会几乎同时想出同一个有价值的理念。</p></li>
<li><p>21、接受新观念，因为这是其他社交或技术改变促成的。尽早步入正轨，但确保技术已经足以使产品变得更好。</p></li>
<li><p>22、如果有一个过去未奏效的理念，而且没有社交或技术变革使其现在变得可行有效，那么认定它会失败。（这是又一个市场假设理论，如果一个理念可以取得成果，那么它已经实施了。只有情况发生变化之后，它才值得再次尝试。）</p></li>
<li><p>23、告诉市场，不接受你的产品意味着失去战机。坚持自己的理想和信念，但尊重客观趋势。如果你坚信世界需要诗歌，那么卖掉你的嘻哈歌曲，保留诗歌集。</p></li>
</ul>


<h1>产品方面</h1>

<ul>
<li><p>24、产品观念意味着一切，尽快掌握这种观念。擅长产品技术并不意味着擅长产品管理。</p></li>
<li><p>25、不要生产已经存在的东西。消费者不会因为它是你的就会购买。</p></li>
<li><p>26、确保自己知道用户别无选择而转向你的产品的原因，以及他们不会转回其他产品的原因。不要太相信自己，尽可能检验自己的假设。</p></li>
<li><p>27、对每个产品功能提两个问题。人们会不会因为这个功能而去购买产品？人们会不会因为缺少这个功能而不去购买？如果答不出后面这个问题，就答不出前面的问题。如果两个问题的答案都是否定的，那就不要去开发这个功能。</p></li>
<li><p>28、生产一款尽管有不足，人们也愿意买的东西，而不要生产没有不足之处于是人们应当去买的东西。前者令人愉悦并支付购买，后者无法令人愉悦。</p></li>
<li><p>29、注意“鸡”与“蛋”的产品关系，确保自己的产品能够立即使用。</p></li>
<li><p>30、注意那些可能购买你的产品的人们，以及那些只发评论的人们之间的区别。多关注前者，忽略后者。</p></li>
</ul>


<h1>营销方面</h1>

<ul>
<li><p>31、产品至上。如果人们喜欢你的产品，最小规模的发布会也会引起关注。如果人们不喜欢产品，再大的营销也无济于事。</p></li>
<li><p>32、在产品中内置营销。如果可能的话，制造YouTube效应（人们不断地在你的平台上发布有趣的内容）和Facebook效应（如果用户使用了产品，他们的朋友也会使用）。</p></li>
<li><p>33、看看电影《寿司之神》，以这种方式做营销。选择一小部分任务，持续开展工作，每天都有新进步。</p></li>
<li><p>34、定期对效率进行再评估。撤消无效做法，加倍有效做法。</p></li>
<li><p>35、不要猜，要去考察。</p></li>
<li><p>36、面向你的用户去营销。吸引那些不会购买你产品的人们的注意力，实际上就是浪费时间与金钱。</p></li>
<li><p>37、如果你的竞争对手不说反话，你就不要去说。例如，你的竞争对手说不出你的产品很慢，那么赞扬自己产品速度快就是无效营销。另一方面，你的竞争对手称自己的软件是面向某一些程序员的，那么你就说你的软件是面向另一部分程序员的，这就是不错的营销。苹果可以不遵守这个惯例，但你不能。</p></li>
<li><p>38、不要对你的用户或竞争对手使用骄傲自大的语气，这不助于你销售产品，反而会破坏你的良好声誉。</p></li>
<li><p>39、不要对批评不屑一顾。相反，用批评来改进自己的产品。如果你认真采纳其批评建议，那么最严厉的批评者往往会成为最强有力的支持者。</p></li>
</ul>


<h1>销售方面</h1>

<ul>
<li><p>40、销售能改变一切。如果产品销售出色，那么你即便搞砸了其他事情，也是可以弥补的。</p></li>
<li><p>41、产品至上。对于一款所有人都想要的产品，销售起来很容易，回报也很丰厚，但销售一款没有人需要的产品则是一个令人痛苦的数字游戏。</p></li>
<li><p>42、如果产品介于两个极端之间，那么不懈地去追求这个数字游戏吧。即便销售不好，你也会获得宝贵的经验。</p></li>
<li><p>43、致力于提高效率。在一位不可能购买你产品的用户身上花费时间，无异于什么工作都没有干。</p></li>
<li><p>44、引进比输出更容易。如果可能的话，生产一款客户向你表达了需求，并且愿意为之付费的产品。</p></li>
</ul>


<h1>产品开发</h1>

<ul>
<li><p>45、开发速度很重要。</p></li>
<li><p>46、不要复杂，产品越简单，你出货的可能性越大，你迅速修复问题的可能性也就越大。</p></li>
<li><p>47、选择一种付出20%就能获得80%回报的执行方式。</p></li>
<li><p>48、只要有可能，就选择现货定制的零部件。</p></li>
<li><p>49、采用快速的开发速率，确保这个速率不会超过一到两周。</p></li>
<li><p>50、关注长远项目。如果无法保持速率，就不要去做开发。</p></li>
<li><p>51、关注长期的修改。如果无法在速率中修改，就不要去做。</p></li>
<li><p>52、如果你不得不做不符合产品速率的东西，那么在这个过程中设置尽可能多的结构与评估轮次。</p></li>
<li><p>53、在错误的东西上工作一个月，相当于一个月没有上班。</p></li>
</ul>


<h1>公司管理</h1>

<ul>
<li><p>54、不要花太多时间来选择办公楼、会计、文员、门卫、家具、托管工具等。相信条件已经够好，不要犹豫地前进。</p></li>
<li><p>55、花时间找一位优秀的、不是很昂贵的律师。这很有必要。</p></li>
</ul>


<h1>个人状态</h1>

<ul>
<li><p>56、尽自己最大的努力，给你的创业公司贴上自己的标签（你可能会失败，但要尝度）。每天都尽全力工作，然后休息。这样在尘埃落定之后，你会因自己做过的选择而感到骄傲，无论结果如何。</p></li>
<li><p>57、每隔一段时间，就离开一次。去徒步旅行，看望另一座城市的家人，跳舞，玩象棋，打网球，任何事情。你会让你更有效率，让你周围的人们感觉快乐。</p></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[用Git做版本控制]]></title>
    <link href="http://ajia.github.com/blog/2013/07/19/yong-gitzuo-ban-ben-kong-zhi/"/>
    <updated>2013-07-19T15:15:00+08:00</updated>
    <id>http://ajia.github.com/blog/2013/07/19/yong-gitzuo-ban-ben-kong-zhi</id>
    <content type="html"><![CDATA[<p>版本控制系统可以跟踪项目代码的变化，便于和他人协作，如果出现问题（例如不小心删除了文件）还可以回滚到以前的版本。每个软件开发者都应该学习使用版本控制系统。</p>

<p>版本控制工具很多，Rails 社区更多的会使用 Git，它最初是由 Linus Torvalds 开发用来存储 Linux 内核代码的。Git 的知识很多，这里我们只会介绍一些简单的内容，网络上有很多免费的资料可以阅读，我特别推荐 Scott Chacon 的《Pro Git》（Apress 2009 年出版。<a href="http://git-scm.com/book/zh">中文版</a>）。之所以推荐你将代码放到 Git 这个版本控制系统中是因为这几乎是 Rails 社区的普遍做法，还因为这样做更利于代码的分享，也便于程序的部署。</p>

<!-- more -->


<h3>安装与设置</h3>

<p>第一次运行的设置</p>

<p>安装Git后，你应该做一些只需做一次的事情：系统设置——这样的设置在每台电脑上只需做一次：</p>

<pre><code>$ git config --global user.name "Your Name"
$ git config --global user.email your.email@example.com
</code></pre>

<p>我还想用co代替字数较多的checkout命令，那么要做如下设置：</p>

<pre><code>$ git config --global alias.co checkout
</code></pre>

<p>最后，你还可以设置编辑 Git 提交信息时使用的编辑器。如果你使用的是图形界面的编辑器，例如 Sublime Text、TextMate、gVim 或 MacVim，要加上一个旗标确保编辑器会在终端中保持状态而不是立马结束命令：</p>

<pre><code>$ git config --global core.editor "subl -w"
</code></pre>

<h3>设置第一个仓库</h3>

<p>下面的步骤你每次新建一个仓库时都要执行。首先进入刚创建的应用程序的根目录，然后初始化一个新仓库：</p>

<pre><code>$ git init 
Initialized empty Git repository in /Users/mhartl/rails_projects/first_app/.git/
</code></pre>

<h3>添加文件并提交</h3>

<p>最后我们要把 Rails 项目中的文件添加到 Git 中，然后提交结果。你可以使用下述命令添加所有的文件（除了 .gitignore 中忽略的文件）：</p>

<pre><code>$ git add .
</code></pre>

<p>这里的点号（.）代表当前目录，Git 会自动的将所有的文件，包括子目录中的文件添加到 Git 中。这个命令会将项目的文件添加到暂存区域（staging area），这个区域包含未提交的改动。你可以使用 status 命令查看暂存区域有哪些文件</p>

<pre><code>$ git status
# On branch master
#
# Initial commit
#
# Changes to be committed:
#   (use "git rm --cached &lt;file&gt;..." to unstage)
#
#       new file:   README.rdoc
#       new file:   Rakefile
.
.
.
（显示的结果很长，所以我用点号代替了。）
</code></pre>

<p>用 commit 命令告诉 Git 你想保存这些改动：</p>

<pre><code>$ git commit -m "Initial commit"
[master (root-commit) df0a62f] Initial commit
42 files changed, 8461 insertions(+), 0 deletions(-)
create mode 100644 README.rdoc
create mode 100644 Rakefile
.
.
.
</code></pre>

<p>参数 -m 允许你为这次提交添加一个信息，如果没有提供 -m，Git 会打开你在前面设置的编辑器，你需要在编辑器中填写信息。</p>

<p>有一点很重要，Git 提交是针对本地的，数据只存在执行提交的电脑中。这一点和另一个很著名的开源版本控制系统 SVN 不同，SVN 提交时会更新远程仓库。git 将 SVN 中的提交分成了两部分：本地保存的更改（git commit）和将更改推送到远程仓库（git push）。</p>

<p>顺便说一下，你可以使用 log 命令查看提交的历史信息：</p>

<pre><code>$git log
commit df0a62f3f091e53ffa799309b3e32c27b0b38eb4
Author: Michael Hartl &lt;michael@michaelhartl.com&gt;
Date:   Thu Oct 15 11:36:21 2009 -0700
Initial commit
</code></pre>

<h3>Git为我们带来了什么好处？</h3>

<p>现在你可能还不是完全清楚将源码纳入版本控制系统有什么好处，那我就举个例子来说明一下吧。（后续章节中还有很多例子）假设你不小心做了一些改动，比如说删除了 app/controllers/ 文件夹：</p>

<pre><code>$ ls app/controllers/
application_controller.rb
$ rm -rf app/controllers/
$ ls app/controllers/
ls: app/controllers/: No such file or directory
</code></pre>

<p>我们用 Unix 中的 ls 命令列出 app/controllers/ 文件夹中的内容，用 rm 命令删除这个文件夹。旗标 -rf 的意思是“强制递归”，无需得到确认就递归的删除所有文件、文件夹、子文件夹等。</p>

<p>查看一下状态看看发生了什么：</p>

<pre><code>$ git status
# On branch master
# Changed but not updated:
#   (use "git add/rm &lt;file&gt;..." to update what will be committed)
#   (use "git checkout -- &lt;file&gt;..." to discard changes in working directory)
#
#       deleted:    app/controllers/application_controller.rb
#
no changes added to commit (use "git add" and/or "git commit -a")
</code></pre>

<p>可以看到一个文件被删除了，但是这个改动只发生在工作区，还没有提交。这样我们就可以使用 checkout 命令切换到前一个提交记录来撤销这次改动（其中旗标 -f 意思是覆盖当前的改动）：</p>

<pre><code>$ git checkout -f
$ git status
# On branch master
nothing to commit (working directory clean)
$ ls app/controllers/
application_controller.rb
</code></pre>

<p>删除的文件夹和文件又回来了，这下放心了！</p>

<h3>分支，编辑，提交，合并</h3>

<h4>分支</h4>

<p>Git 中的分支功能很强大，分支是对仓库的复制，在分支中所做的改动（或许是实验性质的）不会影响父级文件。大多数情况下，父级仓库是 master 分支。我们可以使用 checkout 命令，并指定 -b 旗标创建一个新分支：</p>

<pre><code>$ git checkout -b modify-README
Switched to a new branch 'modify-README'
$ git branch
master
* modify-README
</code></pre>

<p>第二个命令， git branch, 会将本地所有的分支列出来，分支名前面的星号（*）指明当前所在的分支。注意，git checkout -b modify-README 会创建一个新分支，然后切换到这个分支，modify-README 前面的星号证明了这一点。</p>

<p>分支的唯一价值是在多个开发人员协同开发一个项目时使开发的过程更明了，不过对只有一个开发者的项目（比如本教程）也有用。一般而言，主分支是和从分支隔离开的，所以即便我们搞砸了也只需切换回到主分支并删除从分支来丢掉改动。在本节末尾我们会看到怎么做。</p>

<p>顺便说一下，对于较小的改动我一般不会动用新分支，这里是对好的习惯做一个演示。</p>

<h4>编辑</h4>

<p>创建了从分支后，我们要编辑文件让其更好的描述我们的项目。较之默认的 RDoc 格式，我更喜欢 Markdown 标记语言，如果文件扩展名是 .md，GitHub 会自动为你排版。首先我们使用 Unix 命令 mv（移动，move）的 Git 版本来修改文件名，然后写入代码 1.8 所示的内容：</p>

<pre><code>$ git mv README.rdoc README.md
$ subl README.md
</code></pre>

<p>代码 1.8 新的 README 文件，README.md</p>

<pre><code># Ruby on Rails Tutorial: first application
This is the first application for
[*Ruby on Rails Tutorial: Learn Rails by Example*](http://railstutorial.org/)
by [Michael Hartl](http://michaelhartl.com/).
</code></pre>

<h4>提交</h4>

<p>编辑后，查看一下该分支的状态：</p>

<pre><code>$ git status
# On branch modify-README
# Changes to be committed:
#   (use "git reset HEAD &lt;file&gt;..." to unstage)
#
#       renamed:    README.rdoc -&gt; README.md
#
# Changed but not updated:
#   (use "git add &lt;file&gt;..." to update what will be committed)
#   (use "git checkout -- &lt;file&gt;..." to discard changes in working directory)
#
#       modified:   README.md
#
</code></pre>

<p>这时，我们可以使用git add .来提交，但是 Git 提供了参数 -a，它的意思是将现有文件的所有改动（包括使用 git mv 创建的文件，对 Git 来说这并不是新的文件）添加进来：</p>

<pre><code>$ git commit -a -m "Improve the README file"
2 files changed, 5 insertions(+), 243 deletions(-)
delete mode 100644 README.rdoc
create mode 100644 README.md
</code></pre>

<p>千万别误用了 -a 。如果在上次提交之后你向项目添加了新文件的话，首先你要使用 git add 告诉 Git 你添加的文件。</p>

<h4>合并</h4>

<p>我们已经修改完了，现在可以将其合并到主分支了：</p>

<pre><code>$ git checkout master
Switched to branch 'master'
$ git merge modify-README
Updating 34f06b7..2c92bef
Fast forward
README.rdoc     |  243 --------------------------------------------------
README.md       |    5 +
2 files changed, 5 insertions(+), 243 deletions(-)
delete mode 100644 README.rdoc
create mode 100644 README.md
</code></pre>

<p>合并完后，我们可以清理一下分支了，使用 git branch -d 删除这个从分支：</p>

<pre><code>$ git branch -d modify-README
Deleted branch modify-README (was 2c92bef).
</code></pre>

<p>这一步是可选的，事实上一般我们都会留着这个从分支，这样你就可以在主、从分支之间来回切换，在合适的时候将改动合并到主分支中。</p>

<p>如前面提到的，你可以使用 git branch -D 放弃对从分支所做的修改：</p>

<pre><code># For illustration only; don't do this unless you mess up a branch
$ git checkout -b topic-branch
$ &lt;really screw up the branch&gt;
$ git add .
$ git commit -a -m "Major screw up"
$ git checkout master
$ git branch -D topic-branch
</code></pre>

<p>和参数 -d 不同，即使还未合并 -D 也会删除分支。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[创业12条建议]]></title>
    <link href="http://ajia.github.com/blog/2013/07/19/chuang-ye-jian-yi/"/>
    <updated>2013-07-19T14:46:00+08:00</updated>
    <id>http://ajia.github.com/blog/2013/07/19/chuang-ye-jian-yi</id>
    <content type="html"><![CDATA[<p>本文来自Squawk Messenger的联合创始人及StreetArtSF.com的创始人Chloë Bregman。</p>

<p>这些不是道听途说来的狗屁东西，而是我自己摸索总结出来的点点滴滴。</p>

<!-- more -->


<h2>1. 你的那些所谓的好点子在被执行前，一文不值。</h2>

<p>没人想要签你的合同，没人在乎你那些好主意。你知道吗？在硅谷，任何一名风投或者拥有些人脉的人都从好几打人那里听过相同的点子，其中有一些正在执行过程中。多找人交流，获得回馈，提升你的想法，当然最关键的还是把它变成现实。一个好点子的价值在于执行。Henry Ford 深知这一点：“梦想不付诸实践，就仅仅是幻想。”</p>

<blockquote><blockquote><p>我虽然不是一名风投，但我认识很多硅谷人，连我都可能听你的那些点子听到耳朵都出茧了，更别提那些每年被骚扰 3000 次的风投了。</p></blockquote></blockquote>

<h2>2. 清晰地定义每一名创始人的角色。</h2>

<p>你公司的每一名创始人除了拥有优秀的能力之外，也要确保他们能胜任不同的分工。如果每个人的强项都是相同的领域，那公司的缺陷就会暴露得更明显。你需要那些只想专心做好自己本职工作的人，也需要值得信任的能做好你所布置的任务的人。你也得确保每个人都是有真本事的，除非你是干业务拓展或者销售的，不然的话，你需要的就必须是能对产品做出实际贡献的人员。</p>

<h2>3. 积极推进。</h2>

<p>我认识很多朋友，他们拥有一个看起来有趣的点子，却一直停留在原地，原因是他们碰到了某个瓶颈，于是他们就不再往前了。几个月后，他们眼睁睁看着其他一些拥有相似产品创意的创业公司得到了投资。在我看来，这些后来者们抢得先机，并不是因为他们的产品有多棒，而是他们推进事情更为积极。迎难而上，创造条件，Make it happen. 在你的团队里，最好有一两个人是擅长干这个的。</p>

<h2>4. 尽快推出你的产品，别拖着。</h2>

<p>完美主义害死人。踌躇不前、犹豫不决会让你得不到关于市场和你的产品的宝贵信息。很少有一个科技产品是“已经完成”状态的，如果真的有，那也可能是一次性服务或者已经过时的产品。别等了，赶紧发布，然后再慢慢地反复地打磨。</p>

<ul>
<li>我曾经打造的产品，从第一周就开始进行用户测试。人们口头上说他们想做的，和他们真正会做的是不同的。你需要尽可能快地去观察用户行为，而不是听他们说。</li>
</ul>


<h2>5. 解决问题的能力。</h2>

<p>你不可能全知全能，在运营公司的过程中难免会碰到一些未知的问题。白手起家创建一个公司，最核心的能力就是发现问题并能快速地解决它们。你就好比是“幸存者”中的参赛者尝试在岛上生存那样，需要始终足智多谋来克服困难。想要有效地解决问题，你需要诚实并开放地面对批评。这也是一个实践建设性批评的艺术的好机会。</p>

<h2>6. 清醒认识自己，对自己绝对诚实。</h2>

<p>白手起家创建公司不是一件容易的事情。充分理解所处的现状、过程中出现的瑕疵、潮起潮落和你身边的战友们。想要成功，你必须要对自己的优缺点保持绝对的、“无情的”诚实。它们（优缺点）会往好的方向也会往坏的方向发展，所以你对它们的认识越是清楚，你就越容易成功。</p>

<h2>7. 拥有愿景。</h2>

<p>人们会向你问起你与竞争者 x、y 或者 z 的差异，而你是唯一了解自己公司前进方向的人。如果你仅仅是一个跟风者，你永远不会明白有些东西是否行得通，你也不会有一个明确的方向。务实一点，明白自己的方向。</p>

<h2>8. 虚心向别人征求意见。</h2>

<p>你不可能会知道所有问题的答案，虚心向你所尊重的朋友们征求他们的意见。你并不孤独，人们会力所能及地帮助你。广义上来讲，我们所做的一切都是在帮助人类进步和发展，不是吗？我向你保证，这世界上总有一个人是知道怎么解决你面临的这个问题的。要知道，你面临的这些难题并不是你想象的那么独一无二。不过话虽如此，意见也只是意见，不能直接当做问题的解决方案。</p>

<h2>9. 你所参与的是马拉松，而不是短跑。</h2>

<p>不断地努力工作，同时也要注意持续性。公司并不是一朝一夕建立的，如果你经常通宵工作，最后累倒了，那最终不会有好结果。</p>

<h2>10. 坚持不懈。</h2>

<p>创业公司需要时间。事情永远不像它们看起来的那么好，也不像它们看起来的那么差。坚持做下去吧，不要停下来。</p>

<h2>11.享受整个过程。</h2>

<p>在我写这篇东西的时候，Miley Cyrus 的那首 The Climb 跃入我的脑海，又有多少创业公司能够做到 Enjoy 他们的创业过程呢？创业的确是为了有朝一日胜利登顶的结果，但同时也是为了整个攀爬的过程。媒体整日喧嚣着一夜暴富的幻梦，但我要提醒你，取得胜利，通常需要年复一年的辛勤工作。</p>

<h2>12. 为胜利而战。</h2>

<p>如果你不全身心投入游戏，你根本没有机会获胜。这世上根本就没有一个由兼职者组成的公司，能够突然膨胀成为一个十亿级别的传奇的。（没错，你可以在大学里编出一个如 SnapChat 的热门应用，但一旦它火起来了，你也就必须全身心投入了。）</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Guava的使用指南之Cache]]></title>
    <link href="http://ajia.github.com/blog/2013/07/05/guavade-shi-yong-zhi-nan-zhi-cache/"/>
    <updated>2013-07-05T17:42:00+08:00</updated>
    <id>http://ajia.github.com/blog/2013/07/05/guavade-shi-yong-zhi-nan-zhi-cache</id>
    <content type="html"><![CDATA[<h3>创建cache</h3>

<p>可以通过两种方式来创建cache：</p>

<pre><code>cacheLoader

callable callback
</code></pre>

<p>通过这两种方法创建的cache，和通常用map来缓存的做法比，不同在于，这两种方法都实现了一种逻辑——从缓存中取key X的值，如果该值已经缓存过了，则返回缓存中的值，如果没有缓存过，可以通过某个方法来获取这个值。</p>

<p>但不同的在于cacheloader的定义比较宽泛，是针对整个cache定义的，可以认为是统一的根据key值load value的方法。</p>

<p>而callable的方式较为灵活，允许你在get的时候指定。</p>

<p>下面是两种方法的例子:</p>

<p>首先是基于cacheloader的方法</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="nd">@Test</span>
</span><span class='line'><span class="kd">public</span> <span class="kt">void</span> <span class="nf">testCacheBuilder</span><span class="o">()</span> <span class="kd">throws</span> <span class="n">ExecutionException</span> <span class="o">{</span>
</span><span class='line'>  <span class="n">LoadingCache</span><span class="o">&lt;</span><span class="n">String</span><span class="o">,</span> <span class="n">String</span><span class="o">&gt;</span> <span class="n">graphs</span> <span class="o">=</span> <span class="n">CacheBuilder</span><span class="o">.</span><span class="na">newBuilder</span><span class="o">().</span><span class="na">maximumSize</span><span class="o">(</span><span class="mi">1000</span><span class="o">)</span>
</span><span class='line'>            <span class="o">.</span><span class="na">build</span><span class="o">(</span><span class="k">new</span> <span class="n">CacheLoader</span><span class="o">&lt;</span><span class="n">String</span><span class="o">,</span> <span class="n">String</span><span class="o">&gt;()</span> <span class="o">{</span>
</span><span class='line'>                <span class="kd">public</span> <span class="n">String</span> <span class="nf">load</span><span class="o">(</span><span class="n">String</span> <span class="n">key</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>                    <span class="c1">// 这里是key根据实际去取值的方法，例如根据这个key去数据库或者properties文件中取值</span>
</span><span class='line'>                    <span class="n">ApplicationContext</span> <span class="n">context</span> <span class="o">=</span> <span class="k">new</span> <span class="n">FileSystemXmlApplicationContext</span><span class="o">(</span><span class="s">&quot;E:/WorkDir/struts2practice/GuavaTest/WebRoot/WEB-INF/xml/springConfig.xml&quot;</span><span class="o">);</span>
</span><span class='line'>                    <span class="n">JdbcCustomerDAO</span> <span class="n">aJdbcCustomerDAO</span> <span class="o">=</span> <span class="n">context</span><span class="o">.</span><span class="na">getBean</span><span class="o">(</span><span class="n">JdbcCustomerDAO</span><span class="o">.</span><span class="na">class</span><span class="o">);</span>
</span><span class='line'>                    <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">&quot;load method has been invoked&quot;</span><span class="o">);</span>
</span><span class='line'>                    <span class="k">return</span> <span class="n">aJdbcCustomerDAO</span><span class="o">.</span><span class="na">findValue</span><span class="o">(</span><span class="n">key</span><span class="o">);</span>
</span><span class='line'>                <span class="o">}</span>
</span><span class='line'>            <span class="o">});</span>
</span><span class='line'>    <span class="n">String</span> <span class="n">resultVal</span> <span class="o">=</span> <span class="n">graphs</span><span class="o">.</span><span class="na">get</span><span class="o">(</span><span class="s">&quot;testKey&quot;</span><span class="o">);</span>
</span><span class='line'>    <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">&quot;first time value is: &quot;</span> <span class="o">+</span> <span class="n">resultVal</span><span class="o">);</span>
</span><span class='line'>    <span class="n">String</span> <span class="n">resultVal1</span> <span class="o">=</span> <span class="n">graphs</span><span class="o">.</span><span class="na">get</span><span class="o">(</span><span class="s">&quot;testKey&quot;</span><span class="o">);</span>
</span><span class='line'>    <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">&quot;second time values is: &quot;</span> <span class="o">+</span> <span class="n">resultVal1</span><span class="o">);</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>其次是基于实现callable的方法：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="nd">@Test</span>
</span><span class='line'>    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">testCallable</span><span class="o">()</span> <span class="kd">throws</span> <span class="n">ExecutionException</span> <span class="o">{</span>
</span><span class='line'>        <span class="c1">// 没有使用CacheLoader</span>
</span><span class='line'>        <span class="n">Cache</span><span class="o">&lt;</span><span class="n">String</span><span class="o">,</span> <span class="n">String</span><span class="o">&gt;</span> <span class="n">cache</span> <span class="o">=</span> <span class="n">CacheBuilder</span><span class="o">.</span><span class="na">newBuilder</span><span class="o">().</span><span class="na">maximumSize</span><span class="o">(</span><span class="mi">1000</span><span class="o">).</span><span class="na">build</span><span class="o">();</span>
</span><span class='line'>      <span class="n">String</span> <span class="n">resultVal</span> <span class="o">=</span> <span class="n">cache</span><span class="o">.</span><span class="na">get</span><span class="o">(</span><span class="s">&quot;testKey&quot;</span><span class="o">,</span> <span class="k">new</span> <span class="n">Callable</span><span class="o">&lt;</span><span class="n">String</span><span class="o">&gt;()</span> <span class="o">{</span>
</span><span class='line'>            <span class="kd">public</span> <span class="n">String</span> <span class="nf">call</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>                <span class="c1">// 这里先根据key实际去取值的方法，例如根据这个key去数据库或者properties文件中取值</span>
</span><span class='line'>                <span class="n">ApplicationContext</span> <span class="n">context</span> <span class="o">=</span> <span class="k">new</span> <span class="n">FileSystemXmlApplicationContext</span><span class="o">(</span><span class="s">&quot;E:/WorkDir/struts2practice/GuavaTest/WebRoot/WEB-INF/xml/springConfig.xml&quot;</span><span class="o">);</span>
</span><span class='line'>                <span class="n">JdbcCustomerDAO</span> <span class="n">aJdbcCustomerDAO</span> <span class="o">=</span> <span class="n">context</span><span class="o">.</span><span class="na">getBean</span><span class="o">(</span><span class="n">JdbcCustomerDAO</span><span class="o">.</span><span class="na">class</span><span class="o">);</span>
</span><span class='line'>                <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">&quot;resultVal call method is invoked&quot;</span><span class="o">);</span>
</span><span class='line'>                <span class="k">return</span> <span class="n">aJdbcCustomerDAO</span><span class="o">.</span><span class="na">findValue</span><span class="o">(</span><span class="s">&quot;testKey&quot;</span><span class="o">);</span>
</span><span class='line'>            <span class="o">}</span>
</span><span class='line'>        <span class="o">});</span>
</span><span class='line'>        <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">&quot;first time value is: &quot;</span> <span class="o">+</span> <span class="n">resultVal</span><span class="o">);</span>
</span><span class='line'>        <span class="n">String</span> <span class="n">resultVal1</span> <span class="o">=</span> <span class="n">cache</span><span class="o">.</span><span class="na">get</span><span class="o">(</span><span class="s">&quot;testKey&quot;</span><span class="o">,</span> <span class="k">new</span> <span class="n">Callable</span><span class="o">&lt;</span><span class="n">String</span><span class="o">&gt;()</span> <span class="o">{</span>
</span><span class='line'>            <span class="kd">public</span> <span class="n">String</span> <span class="nf">call</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>                <span class="c1">// 这里先根据key实际去取值的方法，例如根据这个key去数据库或者properties文件中取值</span>
</span><span class='line'>                <span class="n">ApplicationContext</span> <span class="n">context</span> <span class="o">=</span> <span class="k">new</span> <span class="n">FileSystemXmlApplicationContext</span><span class="o">(</span><span class="s">&quot;E:/WorkDir/struts2practice/GuavaTest/WebRoot/WEB-INF/xml/springConfig.xml&quot;</span><span class="o">);</span>
</span><span class='line'>                <span class="n">JdbcCustomerDAO</span> <span class="n">aJdbcCustomerDAO</span> <span class="o">=</span> <span class="n">context</span><span class="o">.</span><span class="na">getBean</span><span class="o">(</span><span class="n">JdbcCustomerDAO</span><span class="o">.</span><span class="na">class</span><span class="o">);</span>
</span><span class='line'>                <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">&quot;resultVal1 call method is invoked&quot;</span><span class="o">);</span>
</span><span class='line'>                <span class="k">return</span> <span class="n">aJdbcCustomerDAO</span><span class="o">.</span><span class="na">findValue</span><span class="o">(</span><span class="s">&quot;testKey&quot;</span><span class="o">);</span>
</span><span class='line'>            <span class="o">}</span>
</span><span class='line'>        <span class="o">});</span>
</span><span class='line'>        <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">&quot;second time values is: &quot;</span> <span class="o">+</span> <span class="n">resultVal1</span><span class="o">);</span>
</span><span class='line'>    <span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>




<!-- more -->


<h3>缓存数据的移除</h3>

<h5>基于大小的移除</h5>

<p>看字面意思就知道就是按照缓存的大小来移除，如果即将到达指定的大小，那就会把不常用的键值对从cache中移除。</p>

<p>定义的方式一般为 CacheBuilder.maximumSize(long)，官方还介绍了一种可以算权重的方法，个人认为实际使用中不太用到，暂不讨论。</p>

<p>就这个常用的来看有几个注意点，</p>

<p>其一，这个size指的是cache中的条目数，不是内存大小或是其他；</p>

<p>其二，并不是完全到了指定的size系统才开始移除不常用的数据的，而是接近这个size的时候系统就会开始做移除的动作；</p>

<p>其三，如果一个键值对已经从缓存中被移除了，你再次请求访问的时候，如果cachebuild是使用cacheloader方式的，那依然还是会从cacheloader中再取一次值，如果这样还没有，就会抛出异常</p>

<h5>基于时间的移除</h5>

<p>guava提供了两个基于时间移除的方法</p>

<p>expireAfterAccess(long, TimeUnit)  这个方法是根据某个键值对最后一次访问之后多少时间后移除</p>

<p>expireAfterWrite(long, TimeUnit)   这个方法是根据某个键值对被创建或值被替换后多少时间移除</p>

<h5>基于引用的移除</h5>

<p>这种移除方式主要是基于java的垃圾回收机制，根据键或者值的引用关系决定移除，个人对垃圾回收这块不是非常了解，窃以为不太可靠。。也不常用。。所以没有研究，欢迎补充。</p>

<p>主动移除有三种方法：</p>

<p>单独移除用 Cache.invalidate(key)</p>

<p>批量移除用 Cache.invalidateAll(keys)</p>

<p>移除所有用 Cache.invalidateAll()</p>

<p>如果需要在移除数据的时候有所动作还可以定义Removal Listener，但是有点需要注意的是默认Removal Listener中的行为是和移除动作同步执行的，如果需要改成异步形式，可以考虑使用RemovalListeners.asynchronous(RemovalListener, Executor)</p>

<h3>刷新操作</h3>

<p>refresh 操作， 与evict不同， 是给key一个new value， 同时如果在refresh时有访问，那么将会返回old value， 而evict则会等待evict结束返回new value
定义refresh一般使用异步的操作</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="c1">// Some keys don&#39;t need refreshing, and we want refreshes to be done asynchronously.</span>
</span><span class='line'><span class="n">LoadingCache</span><span class="o">&lt;</span><span class="n">Key</span><span class="o">,</span> <span class="n">Graph</span><span class="o">&gt;</span> <span class="n">graphs</span> <span class="o">=</span> <span class="n">CacheBuilder</span><span class="o">.</span><span class="na">newBuilder</span><span class="o">()</span>
</span><span class='line'>       <span class="o">.</span><span class="na">maximumSize</span><span class="o">(</span><span class="mi">1000</span><span class="o">)</span>
</span><span class='line'>       <span class="o">.</span><span class="na">refreshAfterWrite</span><span class="o">(</span><span class="mi">1</span><span class="o">,</span> <span class="n">TimeUnit</span><span class="o">.</span><span class="na">MINUTES</span><span class="o">)</span>
</span><span class='line'>       <span class="o">.</span><span class="na">build</span><span class="o">(</span>
</span><span class='line'>           <span class="k">new</span> <span class="n">CacheLoader</span><span class="o">&lt;</span><span class="n">Key</span><span class="o">,</span> <span class="n">Graph</span><span class="o">&gt;()</span> <span class="o">{</span>
</span><span class='line'>             <span class="kd">public</span> <span class="n">Graph</span> <span class="nf">load</span><span class="o">(</span><span class="n">Key</span> <span class="n">key</span><span class="o">)</span> <span class="o">{</span> <span class="c1">// no checked exception</span>
</span><span class='line'>               <span class="k">return</span> <span class="nf">getGraphFromDatabase</span><span class="o">(</span><span class="n">key</span><span class="o">);</span>
</span><span class='line'>             <span class="o">}</span>
</span><span class='line'>             <span class="kd">public</span> <span class="n">ListenableFuture</span><span class="o">&lt;</span><span class="n">Graph</span><span class="o">&gt;</span> <span class="nf">reload</span><span class="o">(</span><span class="kd">final</span> <span class="n">Key</span> <span class="n">key</span><span class="o">,</span> <span class="n">Graph</span> <span class="n">prevGraph</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>               <span class="k">if</span> <span class="o">(</span><span class="n">neverNeedsRefresh</span><span class="o">(</span><span class="n">key</span><span class="o">))</span> <span class="o">{</span>
</span><span class='line'>                 <span class="k">return</span> <span class="n">Futures</span><span class="o">.</span><span class="na">immediateFuture</span><span class="o">(</span><span class="n">prevGraph</span><span class="o">);</span>
</span><span class='line'>               <span class="o">}</span> <span class="k">else</span> <span class="o">{</span>
</span><span class='line'>                 <span class="c1">// asynchronous!</span>
</span><span class='line'>                 <span class="k">return</span> <span class="n">ListenableFutureTask</span><span class="o">.</span><span class="na">create</span><span class="o">(</span><span class="k">new</span> <span class="n">Callable</span><span class="o">&lt;</span><span class="n">Graph</span><span class="o">&gt;()</span> <span class="o">{</span>
</span><span class='line'>                   <span class="kd">public</span> <span class="n">Graph</span> <span class="nf">call</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>                     <span class="k">return</span> <span class="nf">getGraphFromDatabase</span><span class="o">(</span><span class="n">key</span><span class="o">);</span>
</span><span class='line'>                   <span class="o">}</span>
</span><span class='line'>                 <span class="o">});</span>
</span><span class='line'>               <span class="o">}</span>
</span><span class='line'>             <span class="o">}</span>
</span><span class='line'>           <span class="o">});</span>
</span></code></pre></td></tr></table></div></figure>


<p>在refreshAfterWrite方法，会调用reload</p>

<h3>统计</h3>

<p>提供了一些数据采集的方法</p>

<ul>
<li><p>CacheBuilder.recordStats() 方法启动了 cache的数据收集</p></li>
<li><p>Cache.stats() 返回了一个CacheStats对象， 提供一些数据方法</p></li>
<li><p>hitRate()， 请求点击率</p></li>
<li><p>averageLoadPenalty()， 加载new value，花费的时间， 单位nanosecondes</p></li>
<li><p>evictionCount()， 清除的个数</p></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Sublime Text的一些配置]]></title>
    <link href="http://ajia.github.com/blog/2013/06/27/sublime-textde-%5B%3F%5D-xie-pei-zhi/"/>
    <updated>2013-06-27T10:37:00+08:00</updated>
    <id>http://ajia.github.com/blog/2013/06/27/sublime-textde-[?]-xie-pei-zhi</id>
    <content type="html"><![CDATA[<p>来源：https://github.com/mhartl/rails_tutorial_sublime_text</p>

<h1>Command-line command</h1>

<p>在Mac OSX上这样创建命令subl：</p>

<pre><code>$ sudo ln -s "/Applications/Sublime Text 2.app/Contents/SharedSupport/bin/subl" ~/bin/subl
</code></pre>

<p>如果~/bin/subl不存在:</p>

<pre><code>mkdir ~/bin
</code></pre>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[解决heroku push timeout错误]]></title>
    <link href="http://ajia.github.com/blog/2013/06/27/jie-jue-heroku-push-timeoutcuo-wu/"/>
    <updated>2013-06-27T10:24:00+08:00</updated>
    <id>http://ajia.github.com/blog/2013/06/27/jie-jue-heroku-push-timeoutcuo-wu</id>
    <content type="html"><![CDATA[<p>转自http://ruby-china.org/topics/10813</p>

<p>git push heroku master出现Operation/Connecting timed out错误。</p>

<p>用“ssh -v git@heroku.com”检查后发现原因在于fuck GFW!!!以下节点全部不可用:<br/>
174.129.23.118<br/>
174.129.22.35<br/>
50.16.233.102<br/>
50.19.85.154<br/>
50.19.85.132<br/>
50.16.215.67<br/>
50.19.85.156<br/>
184.73.165.65<br/>
50.16.215.104<br/>
107.21.106.77<br/>
107.21.105.64<br/>
107.22.234.17</p>

<p>仅有以下节点可用：
107.21.95.3</p>

<p>故手动配置vi ~/.ssh/config：</p>

<p>Host heroku.com<br/>
User freemember007<br/>
Hostname 107.21.95.3 #关键设置，替代proxy.heroku.com，直接走IP。<br/>
PreferredAuthentications publickey
IdentityFile ~/.ssh/id_rsa
port 22</p>

<p>用了上面的方法，问题解决。感谢分享。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[常用sql]]></title>
    <link href="http://ajia.github.com/blog/2013/06/08/chang-yong-sql/"/>
    <updated>2013-06-08T11:22:00+08:00</updated>
    <id>http://ajia.github.com/blog/2013/06/08/chang-yong-sql</id>
    <content type="html"><![CDATA[<h1>查询重复的userid</h1>

<pre><code>select * from WebsiteUser where userid in 
(select userid from WebsiteUser group by userid having(count(*)&gt;1))
</code></pre>

<p>作为记录、待续</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[时间格式化插件jquery-dateFormat]]></title>
    <link href="http://ajia.github.com/blog/2013/06/07/shi-jian-ge-shi-hua-cha-jian-jquery-dateformat/"/>
    <updated>2013-06-07T18:01:00+08:00</updated>
    <id>http://ajia.github.com/blog/2013/06/07/shi-jian-ge-shi-hua-cha-jian-jquery-dateformat</id>
    <content type="html"><![CDATA[<p>做项目难免遇上格式化时间，而且可能不是每个地方都显示成一个样子，所以服务器端做这个不太方便。</p>

<p><a href="https://github.com/phstc/jquery-dateFormat#examples">jquery-dateFormat</a></p>

<!-- more -->


<h1>Format patterns</h1>

<ul>
<li><p>Date and time patterns</p></li>
<li><p>yy = short year</p></li>
<li><p>yyyy = long year</p></li>
<li><p>M = month (1-12)</p></li>
<li><p>MM = month (01-12)</p></li>
<li><p>MMM = month abbreviation (Jan, Feb … Dec)</p></li>
<li><p>MMMM = long month (January, February … December)</p></li>
<li><p>d = day (1 - 31)</p></li>
<li><p>dd = day (01 - 31)</p></li>
<li><p>ddd = day of the week in words (Monday, Tuesday … Sunday)</p></li>
<li><p>D - Ordinal day (1st, 2nd, 3rd, 21st, 22nd, 23rd, 31st, 4th…)</p></li>
<li><p>h = hour in am/pm (0-12)</p></li>
<li><p>hh = hour in am/pm (00-12)</p></li>
<li><p>H = hour in day (0-23)</p></li>
<li><p>HH = hour in day (00-23)</p></li>
<li><p>mm = minute</p></li>
<li><p>ss = second</p></li>
<li><p>SSS = milliseconds</p></li>
<li><p>a = AM/PM marker</p></li>
<li><p>p = a.m./p.m. marker</p></li>
</ul>


<h1>支持的时间格式</h1>

<ul>
<li><p>2009-12-18 10:54:50.546 (default java.util.Date.toString output)</p></li>
<li><p>Wed Jan 13 10:43:41 CET 2010 (???)</p></li>
<li><p>2010-10-19T11:40:33.527+02:00 (default JAXB formatting of java.util.Date)</p></li>
<li><p>Sat Mar 05 2011 11:47:35 GMT-0300 (BRT) (default JavaScript new Date().toString() output)</p></li>
<li><p>Unix Timestamp (e.g. new Date().getTime())</p></li>
</ul>


<h1>例子</h1>

<p><em>使用css来格式化</em></p>

<pre><code>&lt;span class="shortDateFormat"&gt;2009-12-18 10:54:50.546&lt;/span&gt;
&lt;span class="longDateFormat"&gt;2009-12-18 10:54:50.546&lt;/span&gt;
</code></pre>

<p>默认的shortDateFormat 和 longDateFormat 这样来定义：</p>

<pre><code>jQuery.format.date.defaultShortDateFormat = "dd/MM/yyyy";
jQuery.format.date.defaultLongDateFormat = "dd/MM/yyyy HH:mm:ss";
</code></pre>

<p>输出</p>

<pre><code>#1 18/12/2009
#2 18/12/2009 10:54:50
</code></pre>

<p><em>用javascript来格式化</em></p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="o">&lt;</span><span class="nx">script</span><span class="o">&gt;</span>
</span><span class='line'>      <span class="nb">document</span><span class="p">.</span><span class="nx">write</span><span class="p">(</span><span class="nx">$</span><span class="p">.</span><span class="nx">format</span><span class="p">.</span><span class="nx">date</span><span class="p">(</span><span class="s2">&quot;2009-12-18 10:54:50.546&quot;</span><span class="p">,</span> <span class="s2">&quot;Test: dd/MM/yyyy&quot;</span><span class="p">));</span>
</span><span class='line'>      <span class="nb">document</span><span class="p">.</span><span class="nx">write</span><span class="p">(</span><span class="nx">$</span><span class="p">.</span><span class="nx">format</span><span class="p">.</span><span class="nx">date</span><span class="p">(</span><span class="s2">&quot;Wed Jan 13 10:43:41 CET 2010&quot;</span><span class="p">,</span> <span class="s2">&quot;dd~MM~yyyy&quot;</span><span class="p">));</span>
</span><span class='line'><span class="o">&lt;</span><span class="err">/script&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<p>输出</p>

<pre><code>#1 Test: 18/12/2009
#2 18~12~2009
</code></pre>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[数字格式化插件Numeral.js]]></title>
    <link href="http://ajia.github.com/blog/2013/06/07/shu-zi-ge-shi-hua-cha-jian-numeral-dot-js/"/>
    <updated>2013-06-07T18:00:00+08:00</updated>
    <id>http://ajia.github.com/blog/2013/06/07/shu-zi-ge-shi-hua-cha-jian-numeral-dot-js</id>
    <content type="html"><![CDATA[<p>需要格式化文件大小，发现这个好用的东西，<a href="http://numeraljs.com/">numeral.js</a></p>

<!-- more -->


<p>首先当然是要引入它</p>

<pre><code>&lt;script src="numeral.min.js"&gt;&lt;/script&gt;
</code></pre>

<p>然后就可以格式化了</p>

<pre><code>var string = numeral(1000).format('0,0');
// '1,000'
</code></pre>

<p>数字的格式化</p>

<pre><code>Number          Format          String
10000           '0,0.0000'      10,000.0000
10000.23        '0,0'           10,000
-10000          '0,0.0'         -10,000.0
10000.1234      '0.000'         10000.123
10000.1234      '0[.]00000'     10000.12340
-10000          '(0,0.0000)'    (10,000.0000)
-0.23           '.00'           -.23
-0.23           '(.00)'         (.23)
0.23            '0.00000'       0.23000
0.23            '0.0[0000]'     0.23
1230974         '0.0a'          1.2m
1460            '0 a'           1 k
-104000         '0a'            -104k
1               '0o'            1st
52              '0o'            52nd
23              '0o'            23rd        
100             '0o'            100th
</code></pre>

<p>货币的格式化</p>

<pre><code>Number          Format          String
1000.234        '$0,0.00'       $1,000.23
1000.2          '0,0[.]00 $'    1,000.20 $
1001            '$ 0,0[.]00'    $ 1,001
-1000.234       '($0,0)'        ($1,000)
-1000.234       '$0.00'         -$1000.23
1230974         '($ 0.00 a)'    $ 1.23 m
</code></pre>

<p>字节的格式化</p>

<pre><code>Number          Format          String
100             '0b'            100B
2048            '0 b'           2 KB
4194304         '0.0b'          2 MB
7884486213      '0.00b'         7.3GB
3467479682787   '0.000 b'       3.154 TB
</code></pre>

<p>百分比</p>

<pre><code>Number          Format          String
1               '0%'            100%
0.974878234     '0.000%'        97.488%
-0.43           '0 %'           -43 %
0.43            '(0.000 %)'     43.000 %
</code></pre>

<p>时间</p>

<pre><code>Number          Format          String
25              '00:00:00'      0:00:25
238             '00:00:00'      0:03:58
63846           '00:00:00'      17:44:06
</code></pre>

<p>还可以反格式化</p>

<pre><code>var string = numeral().unformat('($10,000.00)');
// '-10000'

String          Function                    Number
'10,000.123'    .unformat('10,000.123')     10000.123
'0.12345'       .unformat('0.12345')        0.12345
'1.23m'         .unformat('1.23m')          1230000
'23rd'          .unformat('23rd')           23
'$10,000.00'    .unformat('$10,000.00')     10000
'100B'          .unformat('100B')           100
'3.154TB'       .unformat('3.154TB')        3467859674006
'-76%'          .unformat('-76%')           -0.76
'2:23:57'       .unformat('2:23:57')        8637
</code></pre>

<p>还支持运算</p>

<pre><code>var number = numeral(1000);

var added = number.add(10);
// 1010
Before          Function            After
1000            .add(100)           1100
1100            .subtract(100)      1000
1000            .multiply(100)      100000
100000          .divide(100)        1000
</code></pre>

<p>提供的方法：value 等等&#8230;</p>

<pre><code>var number = numeral(1000);

var string = number.format('0,0');
// '1,000'

var value = number.value();
// 1000
</code></pre>

<p>最重要的是还支持中文</p>
]]></content>
  </entry>
  
</feed>
