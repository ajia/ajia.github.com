<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: ruby | Ajia's Blog]]></title>
  <link href="http://ajia.github.com/blog/categories/ruby/atom.xml" rel="self"/>
  <link href="http://ajia.github.com/"/>
  <updated>2014-07-05T02:27:22+08:00</updated>
  <id>http://ajia.github.com/</id>
  <author>
    <name><![CDATA[Ajia]]></name>
    <email><![CDATA[DerekLunt@163.com]]></email>
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[用Git做版本控制]]></title>
    <link href="http://ajia.github.com/blog/2013/07/19/yong-gitzuo-ban-ben-kong-zhi/"/>
    <updated>2013-07-19T15:15:00+08:00</updated>
    <id>http://ajia.github.com/blog/2013/07/19/yong-gitzuo-ban-ben-kong-zhi</id>
    <content type="html"><![CDATA[<!-- more -->


<p>版本控制系统可以跟踪项目代码的变化，便于和他人协作，如果出现问题（例如不小心删除了文件）还可以回滚到以前的版本。每个软件开发者都应该学习使用版本控制系统。</p>

<p>版本控制工具很多，Rails 社区更多的会使用 Git，它最初是由 Linus Torvalds 开发用来存储 Linux 内核代码的。Git 的知识很多，这里我们只会介绍一些简单的内容，网络上有很多免费的资料可以阅读，我特别推荐 Scott Chacon 的《Pro Git》（Apress 2009 年出版。<a href="http://git-scm.com/book/zh">中文版</a>）。之所以推荐你将代码放到 Git 这个版本控制系统中是因为这几乎是 Rails 社区的普遍做法，还因为这样做更利于代码的分享，也便于程序的部署。</p>

<!-- more -->


<h3>安装与设置</h3>

<p>第一次运行的设置</p>

<p>安装Git后，你应该做一些只需做一次的事情：系统设置——这样的设置在每台电脑上只需做一次：</p>

<pre><code>$ git config --global user.name "Your Name"
$ git config --global user.email your.email@example.com
</code></pre>

<p>我还想用co代替字数较多的checkout命令，那么要做如下设置：</p>

<pre><code>$ git config --global alias.co checkout
</code></pre>

<p>最后，你还可以设置编辑 Git 提交信息时使用的编辑器。如果你使用的是图形界面的编辑器，例如 Sublime Text、TextMate、gVim 或 MacVim，要加上一个旗标确保编辑器会在终端中保持状态而不是立马结束命令：</p>

<pre><code>$ git config --global core.editor "subl -w"
</code></pre>

<h3>设置第一个仓库</h3>

<p>下面的步骤你每次新建一个仓库时都要执行。首先进入刚创建的应用程序的根目录，然后初始化一个新仓库：</p>

<pre><code>$ git init 
Initialized empty Git repository in /Users/mhartl/rails_projects/first_app/.git/
</code></pre>

<h3>添加文件并提交</h3>

<p>最后我们要把 Rails 项目中的文件添加到 Git 中，然后提交结果。你可以使用下述命令添加所有的文件（除了 .gitignore 中忽略的文件）：</p>

<pre><code>$ git add .
</code></pre>

<p>这里的点号（.）代表当前目录，Git 会自动的将所有的文件，包括子目录中的文件添加到 Git 中。这个命令会将项目的文件添加到暂存区域（staging area），这个区域包含未提交的改动。你可以使用 status 命令查看暂存区域有哪些文件</p>

<pre><code>$ git status
# On branch master
#
# Initial commit
#
# Changes to be committed:
#   (use "git rm --cached &lt;file&gt;..." to unstage)
#
#       new file:   README.rdoc
#       new file:   Rakefile
.
.
.
（显示的结果很长，所以我用点号代替了。）
</code></pre>

<p>用 commit 命令告诉 Git 你想保存这些改动：</p>

<pre><code>$ git commit -m "Initial commit"
[master (root-commit) df0a62f] Initial commit
42 files changed, 8461 insertions(+), 0 deletions(-)
create mode 100644 README.rdoc
create mode 100644 Rakefile
.
.
.
</code></pre>

<p>参数 -m 允许你为这次提交添加一个信息，如果没有提供 -m，Git 会打开你在前面设置的编辑器，你需要在编辑器中填写信息。</p>

<p>有一点很重要，Git 提交是针对本地的，数据只存在执行提交的电脑中。这一点和另一个很著名的开源版本控制系统 SVN 不同，SVN 提交时会更新远程仓库。git 将 SVN 中的提交分成了两部分：本地保存的更改（git commit）和将更改推送到远程仓库（git push）。</p>

<p>顺便说一下，你可以使用 log 命令查看提交的历史信息：</p>

<pre><code>$git log
commit df0a62f3f091e53ffa799309b3e32c27b0b38eb4
Author: Michael Hartl &lt;michael@michaelhartl.com&gt;
Date:   Thu Oct 15 11:36:21 2009 -0700
Initial commit
</code></pre>

<h3>Git为我们带来了什么好处？</h3>

<p>现在你可能还不是完全清楚将源码纳入版本控制系统有什么好处，那我就举个例子来说明一下吧。（后续章节中还有很多例子）假设你不小心做了一些改动，比如说删除了 app/controllers/ 文件夹：</p>

<pre><code>$ ls app/controllers/
application_controller.rb
$ rm -rf app/controllers/
$ ls app/controllers/
ls: app/controllers/: No such file or directory
</code></pre>

<p>我们用 Unix 中的 ls 命令列出 app/controllers/ 文件夹中的内容，用 rm 命令删除这个文件夹。旗标 -rf 的意思是“强制递归”，无需得到确认就递归的删除所有文件、文件夹、子文件夹等。</p>

<p>查看一下状态看看发生了什么：</p>

<pre><code>$ git status
# On branch master
# Changed but not updated:
#   (use "git add/rm &lt;file&gt;..." to update what will be committed)
#   (use "git checkout -- &lt;file&gt;..." to discard changes in working directory)
#
#       deleted:    app/controllers/application_controller.rb
#
no changes added to commit (use "git add" and/or "git commit -a")
</code></pre>

<p>可以看到一个文件被删除了，但是这个改动只发生在工作区，还没有提交。这样我们就可以使用 checkout 命令切换到前一个提交记录来撤销这次改动（其中旗标 -f 意思是覆盖当前的改动）：</p>

<pre><code>$ git checkout -f
$ git status
# On branch master
nothing to commit (working directory clean)
$ ls app/controllers/
application_controller.rb
</code></pre>

<p>删除的文件夹和文件又回来了，这下放心了！</p>

<h3>分支，编辑，提交，合并</h3>

<h4>分支</h4>

<p>Git 中的分支功能很强大，分支是对仓库的复制，在分支中所做的改动（或许是实验性质的）不会影响父级文件。大多数情况下，父级仓库是 master 分支。我们可以使用 checkout 命令，并指定 -b 旗标创建一个新分支：</p>

<pre><code>$ git checkout -b modify-README
Switched to a new branch 'modify-README'
$ git branch
master
* modify-README
</code></pre>

<p>第二个命令， git branch, 会将本地所有的分支列出来，分支名前面的星号（*）指明当前所在的分支。注意，git checkout -b modify-README 会创建一个新分支，然后切换到这个分支，modify-README 前面的星号证明了这一点。</p>

<p>分支的唯一价值是在多个开发人员协同开发一个项目时使开发的过程更明了，不过对只有一个开发者的项目（比如本教程）也有用。一般而言，主分支是和从分支隔离开的，所以即便我们搞砸了也只需切换回到主分支并删除从分支来丢掉改动。在本节末尾我们会看到怎么做。</p>

<p>顺便说一下，对于较小的改动我一般不会动用新分支，这里是对好的习惯做一个演示。</p>

<h4>编辑</h4>

<p>创建了从分支后，我们要编辑文件让其更好的描述我们的项目。较之默认的 RDoc 格式，我更喜欢 Markdown 标记语言，如果文件扩展名是 .md，GitHub 会自动为你排版。首先我们使用 Unix 命令 mv（移动，move）的 Git 版本来修改文件名，然后写入代码 1.8 所示的内容：</p>

<pre><code>$ git mv README.rdoc README.md
$ subl README.md
</code></pre>

<p>代码 1.8 新的 README 文件，README.md</p>

<pre><code># Ruby on Rails Tutorial: first application
This is the first application for
[*Ruby on Rails Tutorial: Learn Rails by Example*](http://railstutorial.org/)
by [Michael Hartl](http://michaelhartl.com/).
</code></pre>

<h4>提交</h4>

<p>编辑后，查看一下该分支的状态：</p>

<pre><code>$ git status
# On branch modify-README
# Changes to be committed:
#   (use "git reset HEAD &lt;file&gt;..." to unstage)
#
#       renamed:    README.rdoc -&gt; README.md
#
# Changed but not updated:
#   (use "git add &lt;file&gt;..." to update what will be committed)
#   (use "git checkout -- &lt;file&gt;..." to discard changes in working directory)
#
#       modified:   README.md
#
</code></pre>

<p>这时，我们可以使用git add .来提交，但是 Git 提供了参数 -a，它的意思是将现有文件的所有改动（包括使用 git mv 创建的文件，对 Git 来说这并不是新的文件）添加进来：</p>

<pre><code>$ git commit -a -m "Improve the README file"
2 files changed, 5 insertions(+), 243 deletions(-)
delete mode 100644 README.rdoc
create mode 100644 README.md
</code></pre>

<p>千万别误用了 -a 。如果在上次提交之后你向项目添加了新文件的话，首先你要使用 git add 告诉 Git 你添加的文件。</p>

<h4>合并</h4>

<p>我们已经修改完了，现在可以将其合并到主分支了：</p>

<pre><code>$ git checkout master
Switched to branch 'master'
$ git merge modify-README
Updating 34f06b7..2c92bef
Fast forward
README.rdoc     |  243 --------------------------------------------------
README.md       |    5 +
2 files changed, 5 insertions(+), 243 deletions(-)
delete mode 100644 README.rdoc
create mode 100644 README.md
</code></pre>

<p>合并完后，我们可以清理一下分支了，使用 git branch -d 删除这个从分支：</p>

<pre><code>$ git branch -d modify-README
Deleted branch modify-README (was 2c92bef).
</code></pre>

<p>这一步是可选的，事实上一般我们都会留着这个从分支，这样你就可以在主、从分支之间来回切换，在合适的时候将改动合并到主分支中。</p>

<p>如前面提到的，你可以使用 git branch -D 放弃对从分支所做的修改：</p>

<pre><code># For illustration only; don't do this unless you mess up a branch
$ git checkout -b topic-branch
$ &lt;really screw up the branch&gt;
$ git add .
$ git commit -a -m "Major screw up"
$ git checkout master
$ git branch -D topic-branch
</code></pre>

<p>和参数 -d 不同，即使还未合并 -D 也会删除分支。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Sublime Text的一些配置]]></title>
    <link href="http://ajia.github.com/blog/2013/06/27/sublime-textde-%5B%3F%5D-xie-pei-zhi/"/>
    <updated>2013-06-27T10:37:00+08:00</updated>
    <id>http://ajia.github.com/blog/2013/06/27/sublime-textde-[?]-xie-pei-zhi</id>
    <content type="html"><![CDATA[<!-- more -->


<p>来源：https://github.com/mhartl/rails_tutorial_sublime_text</p>

<h1>Command-line command</h1>

<p>在Mac OSX上这样创建命令subl：</p>

<pre><code>$ sudo ln -s "/Applications/Sublime Text 2.app/Contents/SharedSupport/bin/subl" ~/bin/subl
</code></pre>

<p>如果~/bin/subl不存在:</p>

<pre><code>mkdir ~/bin
</code></pre>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[解决heroku push timeout错误]]></title>
    <link href="http://ajia.github.com/blog/2013/06/27/jie-jue-heroku-push-timeoutcuo-wu/"/>
    <updated>2013-06-27T10:24:00+08:00</updated>
    <id>http://ajia.github.com/blog/2013/06/27/jie-jue-heroku-push-timeoutcuo-wu</id>
    <content type="html"><![CDATA[<!-- more -->


<p>转自http://ruby-china.org/topics/10813</p>

<p>git push heroku master出现Operation/Connecting timed out错误。</p>

<p>用“ssh -v git@heroku.com”检查后发现原因在于fuck GFW!!!以下节点全部不可用:<br/>
174.129.23.118<br/>
174.129.22.35<br/>
50.16.233.102<br/>
50.19.85.154<br/>
50.19.85.132<br/>
50.16.215.67<br/>
50.19.85.156<br/>
184.73.165.65<br/>
50.16.215.104<br/>
107.21.106.77<br/>
107.21.105.64<br/>
107.22.234.17</p>

<p>仅有以下节点可用：
107.21.95.3</p>

<p>故手动配置vi ~/.ssh/config：</p>

<p>Host heroku.com<br/>
User freemember007<br/>
Hostname 107.21.95.3 #关键设置，替代proxy.heroku.com，直接走IP。<br/>
PreferredAuthentications publickey
IdentityFile ~/.ssh/id_rsa
port 22</p>

<p>用了上面的方法，问题解决。感谢分享。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[学习ruby on rails-ruby和rails的安装]]></title>
    <link href="http://ajia.github.com/blog/2013/04/01/xue-xi-ruby-on-rails-rubyhe-railsde-an-zhuang/"/>
    <updated>2013-04-01T11:59:00+08:00</updated>
    <id>http://ajia.github.com/blog/2013/04/01/xue-xi-ruby-on-rails-rubyhe-railsde-an-zhuang</id>
    <content type="html"><![CDATA[<!--more-->


<p>ruby的安装在文章<a href="http://ajia.github.com/blog/2013/03/06/how-to-install-octopress/" title="点击查看">how-to-install-octopress</a>里有说过。</p>

<h3>在Lion安装rails</h3>

<pre><code>gem install rails
</code></pre>

<h3>创建rails的应用</h3>

<pre><code>rails new myapp
</code></pre>

<h3>启动应用</h3>

<pre><code>cd myapp
rails server
</code></pre>

<h3>进入</h3>

<pre><code>http://localhost:3000
"Welcome aboard: You're riding Ruby on Rails!"
</code></pre>
]]></content>
  </entry>
  
</feed>
