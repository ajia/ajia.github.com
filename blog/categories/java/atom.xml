<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: java | Ajia's Blog]]></title>
  <link href="http://ajia.github.com/blog/categories/java/atom.xml" rel="self"/>
  <link href="http://ajia.github.com/"/>
  <updated>2013-04-27T17:17:51+08:00</updated>
  <id>http://ajia.github.com/</id>
  <author>
    <name><![CDATA[Ajia]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[mysql创建function失败]]></title>
    <link href="http://ajia.github.com/blog/2013/04/16/mysqlchuang-jian-functionshi-bai/"/>
    <updated>2013-04-16T16:12:00+08:00</updated>
    <id>http://ajia.github.com/blog/2013/04/16/mysqlchuang-jian-functionshi-bai</id>
    <content type="html"><![CDATA[<p>出错信息：</p>

<p>创建function时</p>

<pre><code>ERROR 1418 (HY000): This function has none of DETERMINISTIC, NO SQL,
or READS SQL DATA in its declaration and binary logging is enabled 
(you might want to use the less safe log_bin_trust_function_creators variable)
</code></pre>

<p>原因：</p>

<p>这是我们开启了bin-log, 我们就必须指定我们的函数是否是
1 DETERMINISTIC 不确定的
2 NO SQL 没有SQl语句，当然也不会修改数据
3 READS SQL DATA 只是读取数据，当然也不会修改数据
4 MODIFIES SQL DATA 要修改数据
5 CONTAINS SQL 包含了SQL语句</p>

<p>其中在function里面，只有 DETERMINISTIC, NO SQL 和 READS SQL DATA 被支持。如果我们开启了 bin-log, 我们就必须为我们的function指定一个参数。</p>

<p>解决办法</p>

<pre><code>mysql&gt;show variables like '%func%';
+---------------------------------+-------+  
|Variable_name                  |Value|  
+---------------------------------+-------+  
|log_bin_trust_function_creators|OFF  |  
+---------------------------------+-------+  

set global log_bin_trust_function_creators=1;  

mysql&gt;show variables like '%func%';  
+---------------------------------+-------+  
|Variable_name                  |Value|  
+---------------------------------+-------+  
|log_bin_trust_function_creators|ON   |  
+---------------------------------+-------+  
</code></pre>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[hessian版本冲突的问题]]></title>
    <link href="http://ajia.github.com/blog/2013/04/11/hessianban-ben-chong-tu-de-wen-ti/"/>
    <updated>2013-04-11T17:53:00+08:00</updated>
    <id>http://ajia.github.com/blog/2013/04/11/hessianban-ben-chong-tu-de-wen-ti</id>
    <content type="html"><![CDATA[<p>项目需要调用远程的接口，用的是hessian，写了一段代码测试，结果报错
```java</p>

<pre><code>HessianProtocolException：expected integer at…
</code></pre>

<p>```</p>

<p>非常简短，让人摸不着头脑。寻找了一段时间，在网上发现这样一句话</p>

<blockquote><blockquote><p>use hessian-4.<em> spring-3.</em>  resin-4.<em>. for Hessian protocol 2.And resin-3.</em>, spring-2.* hessian before 3.2.0 for Hessian protocol version 1.</p></blockquote></blockquote>

<p>看来是版本的问题，我的环境是resin-4.*、spring-2.*、hessian-4.*，后来改成用resin.3.1.13版本就正常了。接下来试试把spring升级到3。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[jquery的jsonp方式的ajax提交解决跨域的问题]]></title>
    <link href="http://ajia.github.com/blog/2013/04/08/jqueryde-jsonpfang-shi-de-ajaxti-jiao-jie-jue-kua-yu-de-wen-ti/"/>
    <updated>2013-04-08T17:45:00+08:00</updated>
    <id>http://ajia.github.com/blog/2013/04/08/jqueryde-jsonpfang-shi-de-ajaxti-jiao-jie-jue-kua-yu-de-wen-ti</id>
    <content type="html"><![CDATA[<p>jquery请求：
```javascript</p>

<pre><code>var action = form.attr("action");
$.ajax({  
    type:"get",  
    data: {  
        mobile : $('#mobile'+id).val()  
    },  
    url:action,  
    dataType:"jsonp",  
    jsonp:"callback",  
    success:function(data){
        var res = eval(data);
        if(res.resultObj.result){
            alert("发送成功");
        }
    }  
}); 
</code></pre>

<p>```</p>

<p>服务器端：
```java</p>

<pre><code>response.setContentType("text/html; charset=utf-8");
response.setHeader("Pragma", "No-cache");
response.setDateHeader("Expires", 0);
response.setHeader("Cache-Control", "no-cache");
PrintWriter out = response.getWriter();
//业务逻辑
String callback = request.getParameter("callback");
result = callback+"("+resultJson.toString()+")";
out.print(result);
out.flush();
out.close();
</code></pre>

<p>```</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[遇上MySql的奇怪问题]]></title>
    <link href="http://ajia.github.com/blog/2013/04/08/yu-shang-mysqlde-qi-guai-wen-ti/"/>
    <updated>2013-04-08T17:25:00+08:00</updated>
    <id>http://ajia.github.com/blog/2013/04/08/yu-shang-mysqlde-qi-guai-wen-ti</id>
    <content type="html"><![CDATA[<p>今天遇上一个异常：<br/>
```
2013-04-08 15:35:47 072 [ERROR] JDBC commit failed [org.hibernate.transaction.JDBCTransaction.commit(JDBCTransaction.java:124)]
com.mysql.jdbc.exceptions.jdbc4.MySQLNonTransientConnectionException: Communications link failure during commit(). Transaction resolution unknown.</p>

<pre><code>at sun.reflect.NativeConstructorAccessorImpl.newInstance0(Native Method)
at sun.reflect.NativeConstructorAccessorImpl.newInstance(NativeConstructorAccessorImpl.java:57)
at sun.reflect.DelegatingConstructorAccessorImpl.newInstance(DelegatingConstructorAccessorImpl.java:45)
at java.lang.reflect.Constructor.newInstance(Constructor.java:532)
at com.mysql.jdbc.Util.handleNewInstance(Util.java:407)
at com.mysql.jdbc.Util.getInstance(Util.java:382)
at com.mysql.jdbc.SQLError.createSQLException(SQLError.java:1013)
at com.mysql.jdbc.SQLError.createSQLException(SQLError.java:987)
at com.mysql.jdbc.SQLError.createSQLException(SQLError.java:982)
at com.mysql.jdbc.SQLError.createSQLException(SQLError.java:927)
at com.mysql.jdbc.ConnectionImpl.commit(ConnectionImpl.java:1672)
at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:57)
at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
at java.lang.reflect.Method.invoke(Method.java:616)
at org.logicalcobwebs.proxool.WrappedConnection.invoke(WrappedConnection.java:162)
at org.logicalcobwebs.proxool.WrappedConnection.intercept(WrappedConnection.java:87)
at $java.sql.Connection$$EnhancerByProxool$$90ddbb0c.commit(&lt;generated&gt;)
at org.hibernate.transaction.JDBCTransaction.commitAndResetAutoCommit(JDBCTransaction.java:139)
at org.hibernate.transaction.JDBCTransaction.commit(JDBCTransaction.java:115)
at org.springframework.orm.hibernate3.HibernateTransactionManager.doCommit(HibernateTransactionManager.java:596)
at org.springframework.transaction.support.AbstractPlatformTransactionManager.processCommit(AbstractPlatformTransactionManager.java:709)
at org.springframework.transaction.support.AbstractPlatformTransactionManager.commit(AbstractPlatformTransactionManager.java:678)
at org.springframework.transaction.interceptor.TransactionAspectSupport.commitTransactionAfterReturning(TransactionAspectSupport.java:319)
at org.springframework.transaction.interceptor.TransactionInterceptor.invoke(TransactionInterceptor.java:116)
at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:171)
at org.springframework.aop.framework.JdkDynamicAopProxy.invoke(JdkDynamicAopProxy.java:204)
at $Proxy163.importDate(Unknown Source)
</code></pre>

<p>```
找了一个上午和半个下午终于解决了，原因是线上的数据库服务器关掉了innodb引擎，myisam对事务支持有问题，所以修改spring的配置文件，把事务的配置去掉就可以了。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[HttpClient上传文件]]></title>
    <link href="http://ajia.github.com/blog/2013/04/07/httpclientshang-chuan-wen-jian/"/>
    <updated>2013-04-07T21:44:00+08:00</updated>
    <id>http://ajia.github.com/blog/2013/04/07/httpclientshang-chuan-wen-jian</id>
    <content type="html"><![CDATA[<p>折腾了一下用HttpClient上传文件，主要是不需要设置“multipart/form-data”,否则会出现“the request was rejected because no multipart boundary was found”
```java</p>

<pre><code>PostMethod method = new PostMethod(url); 
    Part[] part = new Part[params.size()+1];
    Set&lt;String&gt; keySet = params.keySet();
    int i=0;
    for(String key : keySet) {
        String value = params.get(key);
        if(StringUtil.isNotNull(value)){
            part[i] = new StringPart(key, value, "UTF-8");
        }else{
            part[i] = new StringPart(key, "", "UTF-8");
        }
        i++;
    }
    FilePart fp = new  FilePart("image", file);
    fp.setContentType(MIME.ENC_BINARY);
    part[i] = fp;
    HttpConnectionManagerParams managerParams = httpClient.getHttpConnectionManager().getParams();
    managerParams.setConnectionTimeout(3000000);
     managerParams.setSoTimeout(12000000);
    int statusCode;
    try {
        MultipartRequestEntity mrp= new  MultipartRequestEntity(part, method.getParams());  
        method.setRequestEntity(mrp);
        statusCode = httpClient.executeMethod(method);
        if(statusCode != HttpStatus.SC_OK){
            log.error("Method failed code=" + statusCode + ": " + method.getStatusLine());
        }else{
            InputStream inputStream = method.getResponseBodyAsStream();  
            BufferedReader br = new BufferedReader(new InputStreamReader(inputStream, "UTF-8"));  
            String str= "";  
            while((str = br.readLine()) != null){   
                response .append(str);  
            }   
        }
    } catch (HttpException e) {
        log.error(e.getMessage(), e);
    } catch (IOException e) {
        log.error(e.getMessage(), e);
    } finally{
        method.releaseConnection();
    }
</code></pre>

<p>```</p>
]]></content>
  </entry>
  
</feed>
